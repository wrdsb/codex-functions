/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the PatternAnalyzer class.
 * @constructor
 * Flexibly separates text into terms via a regular expression pattern. This
 * analyzer is implemented using Apache Lucene.
 *
 * @member {boolean} [lowerCaseTerms] A value indicating whether terms should
 * be lower-cased. Default is true. Default value: true .
 *
 * @member {string} [pattern] A regular expression pattern to match token
 * separators. Default is an expression that matches one or more whitespace
 * characters. Default value: '\W+' .
 *
 * @member {object} [flags] Regular expression flags.
 *
 * @member {string} [flags.name]
 *
 * @member {array} [stopwords] A list of stopwords.
 *
 */
class PatternAnalyzer extends models['Analyzer'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PatternAnalyzer
   *
   * @returns {object} metadata of PatternAnalyzer
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.PatternAnalyzer',
      type: {
        name: 'Composite',
        className: 'PatternAnalyzer',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          lowerCaseTerms: {
            required: false,
            serializedName: 'lowercase',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          pattern: {
            required: false,
            serializedName: 'pattern',
            defaultValue: '\W+',
            type: {
              name: 'String'
            }
          },
          flags: {
            required: false,
            serializedName: 'flags',
            type: {
              name: 'Composite',
              className: 'RegexFlags'
            }
          },
          stopwords: {
            required: false,
            serializedName: 'stopwords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = PatternAnalyzer;
