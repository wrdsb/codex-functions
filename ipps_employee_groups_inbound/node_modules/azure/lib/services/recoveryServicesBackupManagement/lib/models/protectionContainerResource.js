/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ProtectionContainerResource class.
 * @constructor
 * Base class for a container with backup items. Containers with specific
 * workloads are derived from this class.
 *
 * @member {object} [properties]
 *
 * @member {string} [properties.friendlyName] Friendly name of the container.
 *
 * @member {string} [properties.backupManagementType] The backup managemenent
 * type for the container. Possible values include: 'Invalid', 'AzureIaasVM',
 * 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql'
 *
 * @member {string} [properties.registrationStatus] The container's
 * registration status with the Recovery Services vault.
 *
 * @member {string} [properties.healthStatus] The status of the container's
 * health.
 *
 * @member {string} [properties.containerType] The type assigned to the
 * container. The values to use for each of these propertes are:<br/> 1.
 * Compute Azure VM is Microsoft.Compute/virtualMachines<br/> 2. Classic
 * Compute Azure VM is Microsoft.ClassicCompute/virtualMachines<br/> 3. Windows
 * machines (like Azure Backup Server and DPM) is Windows<br/> 4. Azure SQL
 * instance is AzureSqlContainer.
 *
 * @member {string} [properties.protectableObjectType] Polymorphic
 * Discriminator
 *
 */
class ProtectionContainerResource extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ProtectionContainerResource
   *
   * @returns {object} metadata of ProtectionContainerResource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ProtectionContainerResource',
      type: {
        name: 'Composite',
        className: 'ProtectionContainerResource',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'protectableObjectType',
                clientName: 'protectableObjectType'
              },
              uberParent: 'ProtectionContainer',
              className: 'ProtectionContainer'
            }
          }
        }
      }
    };
  }
}

module.exports = ProtectionContainerResource;
