/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the PatternTokenizer class.
 * @constructor
 * Tokenizer that uses regex pattern matching to construct distinct tokens.
 * This tokenizer is implemented using Apache Lucene.
 *
 * @member {string} [pattern] A regular expression pattern to match token
 * separators. Default is an expression that matches one or more whitespace
 * characters. Default value: '\W+' .
 *
 * @member {object} [flags] Regular expression flags.
 *
 * @member {string} [flags.name]
 *
 * @member {number} [group] The zero-based ordinal of the matching group in the
 * regular expression pattern to extract into tokens. Use -1 if you want to use
 * the entire pattern to split the input into tokens, irrespective of matching
 * groups. Default is -1. Default value: -1 .
 *
 */
class PatternTokenizer extends models['Tokenizer'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PatternTokenizer
   *
   * @returns {object} metadata of PatternTokenizer
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.PatternTokenizer',
      type: {
        name: 'Composite',
        className: 'PatternTokenizer',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          pattern: {
            required: false,
            serializedName: 'pattern',
            defaultValue: '\W+',
            type: {
              name: 'String'
            }
          },
          flags: {
            required: false,
            serializedName: 'flags',
            type: {
              name: 'Composite',
              className: 'RegexFlags'
            }
          },
          group: {
            required: false,
            serializedName: 'group',
            defaultValue: -1,
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = PatternTokenizer;
