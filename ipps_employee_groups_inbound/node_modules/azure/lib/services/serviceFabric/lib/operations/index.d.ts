/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ClusterManifests
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterManifests {


    /**
     * Get cluster manifests
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Get cluster manifests
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    get(callback: ServiceCallback<string>): void;
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ClusterHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterHealths {


    /**
     * Report cluster healths
     *
     * @param {object} clusterHealthReport The report of the cluster health
     *
     * @param {string} [clusterHealthReport.sourceId]
     *
     * @param {string} [clusterHealthReport.property]
     *
     * @param {string} [clusterHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [clusterHealthReport.description]
     *
     * @param {string} [clusterHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [clusterHealthReport.sequenceNumber]
     *
     * @param {boolean} [clusterHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(clusterHealthReport: models.ClusterHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Report cluster healths
     *
     * @param {object} clusterHealthReport The report of the cluster health
     *
     * @param {string} [clusterHealthReport.sourceId]
     *
     * @param {string} [clusterHealthReport.property]
     *
     * @param {string} [clusterHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [clusterHealthReport.description]
     *
     * @param {string} [clusterHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [clusterHealthReport.sequenceNumber]
     *
     * @param {boolean} [clusterHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(clusterHealthReport: models.ClusterHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(clusterHealthReport: models.ClusterHealthReport, callback: ServiceCallback<string>): void;
    send(clusterHealthReport: models.ClusterHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Get cluster healths
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.nodesHealthStateFilter] The filter of the nodes
     * health state
     *
     * @param {string} [options.applicationsHealthStateFilter] The filter of the
     * applications health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { eventsHealthStateFilter? : string, nodesHealthStateFilter? : string, applicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterHealth>>;

    /**
     * Get cluster healths
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.nodesHealthStateFilter] The filter of the nodes
     * health state
     *
     * @param {string} [options.applicationsHealthStateFilter] The filter of the
     * applications health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterHealth} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { eventsHealthStateFilter? : string, nodesHealthStateFilter? : string, applicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterHealth>;
    get(callback: ServiceCallback<models.ClusterHealth>): void;
    get(options: { eventsHealthStateFilter? : string, nodesHealthStateFilter? : string, applicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterHealth>): void;
}

/**
 * @class
 * ClusterUpgrades
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterUpgrades {


    /**
     * Start cluster upgrades
     *
     * @param {object} startClusterUpgrade The description of the start cluster
     * upgrade
     *
     * @param {string} [startClusterUpgrade.configVersion] The version of the
     * config
     *
     * @param {string} [startClusterUpgrade.codeVersion] The version of the code
     *
     * @param {string} [startClusterUpgrade.upgradeKind] The kind of the upgrade
     *
     * @param {string} [startClusterUpgrade.rollingUpgradeMode] The mode of the
     * rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     *
     * @param {number} [startClusterUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {boolean} [startClusterUpgrade.forceRestart] The flag of the force
     * restart
     *
     * @param {boolean} [startClusterUpgrade.enableDeltaHealthEvaluation] The
     * evaluation of the enable delta health
     *
     * @param {object} [startClusterUpgrade.monitoringPolicy] The policy of the
     * monitoring
     *
     * @param {object} [startClusterUpgrade.clusterUpgradeHealthPolicy] The policy
     * of the cluster upgrade health
     *
     * @param {number}
     * [startClusterUpgrade.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes]
     * The max percent of the delta unhealthy nodes, values are [0-100]
     *
     * @param {number}
     * [startClusterUpgrade.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
     * The max percent of the upgrade domain delta unhealthy nodes, values are
     * [0-100]
     *
     * @param {object} [startClusterUpgrade.applicationHealthPolicyMap] The map of
     * the application health policy
     *
     * @param {boolean}
     * [startClusterUpgrade.applicationHealthPolicyMap.considerWarningAsError] The
     * boolean of the consider warning as error
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyDeployedApplications]
     * The max percent of the unhealthy deployed applications
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyServices]
     * The policy of the default service type health
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyPartitionsPerService]
     * The max percent unhealthy partitions per service
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyReplicasPerPartition]
     * The max percent unhealthy replicas per partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(startClusterUpgrade: models.StartClusterUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Start cluster upgrades
     *
     * @param {object} startClusterUpgrade The description of the start cluster
     * upgrade
     *
     * @param {string} [startClusterUpgrade.configVersion] The version of the
     * config
     *
     * @param {string} [startClusterUpgrade.codeVersion] The version of the code
     *
     * @param {string} [startClusterUpgrade.upgradeKind] The kind of the upgrade
     *
     * @param {string} [startClusterUpgrade.rollingUpgradeMode] The mode of the
     * rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     *
     * @param {number} [startClusterUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {boolean} [startClusterUpgrade.forceRestart] The flag of the force
     * restart
     *
     * @param {boolean} [startClusterUpgrade.enableDeltaHealthEvaluation] The
     * evaluation of the enable delta health
     *
     * @param {object} [startClusterUpgrade.monitoringPolicy] The policy of the
     * monitoring
     *
     * @param {object} [startClusterUpgrade.clusterUpgradeHealthPolicy] The policy
     * of the cluster upgrade health
     *
     * @param {number}
     * [startClusterUpgrade.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes]
     * The max percent of the delta unhealthy nodes, values are [0-100]
     *
     * @param {number}
     * [startClusterUpgrade.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
     * The max percent of the upgrade domain delta unhealthy nodes, values are
     * [0-100]
     *
     * @param {object} [startClusterUpgrade.applicationHealthPolicyMap] The map of
     * the application health policy
     *
     * @param {boolean}
     * [startClusterUpgrade.applicationHealthPolicyMap.considerWarningAsError] The
     * boolean of the consider warning as error
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyDeployedApplications]
     * The max percent of the unhealthy deployed applications
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyServices]
     * The policy of the default service type health
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyPartitionsPerService]
     * The max percent unhealthy partitions per service
     *
     * @param {number}
     * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyReplicasPerPartition]
     * The max percent unhealthy replicas per partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(startClusterUpgrade: models.StartClusterUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    start(startClusterUpgrade: models.StartClusterUpgrade, callback: ServiceCallback<string>): void;
    start(startClusterUpgrade: models.StartClusterUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Update cluster upgrades
     *
     * @param {object} updateClusterUpgrade The description of the update cluster
     * upgrade
     *
     * @param {string} [updateClusterUpgrade.upgradeKind] The kind of the upgrade
     *
     * @param {object} [updateClusterUpgrade.updateDescription] The description of
     * the update
     *
     * @param {string} [updateClusterUpgrade.updateDescription.rollingUpgradeMode]
     * The mode of the rolling upgrade. Possible values include: 'Invalid',
     * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
     *
     * @param {boolean} [updateClusterUpgrade.updateDescription.forceRestart] The
     * flag of the force restart
     *
     * @param {string} [updateClusterUpgrade.updateDescription.failureAction] The
     * action of the failure
     *
     * @param {number}
     * [updateClusterUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
     * The seconds of the health check wait duration
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
     * The seconds of the health check stable duration
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
     * The milliseconds of the health check retry timeout
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.upgradeTimeoutInMilliseconds] The
     * milliseconds of the upgrade timeout
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
     * The milliseconds of the upgrade domain timeout
     *
     * @param {object} [updateClusterUpgrade.clusterHealthPolicy] The policy of the
     * cluster health
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.rollingUpgradeMode] The mode of
     * the rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     *
     * @param {boolean} [updateClusterUpgrade.clusterHealthPolicy.forceRestart] The
     * flag of the force restart
     *
     * @param {string} [updateClusterUpgrade.clusterHealthPolicy.failureAction] The
     * action of the failure
     *
     * @param {number}
     * [updateClusterUpgrade.clusterHealthPolicy.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.healthCheckWaitDurationInMilliseconds]
     * The milliseconds of the health check wait duration
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.healthCheckStableDurationInMilliseconds]
     * The milliseconds of the health check stable duration
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.healthCheckRetryTimeoutInMilliseconds]
     * The milliseconds of the health check retry timeout
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.upgradeTimeoutInMilliseconds] The
     * milliseconds of the upgrade timeout
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.upgradeDomainTimeoutInMilliseconds]
     * The milliseconds of the upgrade domain timeout
     *
     * @param {boolean} [updateClusterUpgrade.enableDeltaHealthEvaluations] The
     * evaluations of the enable delta health
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(updateClusterUpgrade: models.UpdateClusterUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Update cluster upgrades
     *
     * @param {object} updateClusterUpgrade The description of the update cluster
     * upgrade
     *
     * @param {string} [updateClusterUpgrade.upgradeKind] The kind of the upgrade
     *
     * @param {object} [updateClusterUpgrade.updateDescription] The description of
     * the update
     *
     * @param {string} [updateClusterUpgrade.updateDescription.rollingUpgradeMode]
     * The mode of the rolling upgrade. Possible values include: 'Invalid',
     * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
     *
     * @param {boolean} [updateClusterUpgrade.updateDescription.forceRestart] The
     * flag of the force restart
     *
     * @param {string} [updateClusterUpgrade.updateDescription.failureAction] The
     * action of the failure
     *
     * @param {number}
     * [updateClusterUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
     * The seconds of the health check wait duration
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
     * The seconds of the health check stable duration
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
     * The milliseconds of the health check retry timeout
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.upgradeTimeoutInMilliseconds] The
     * milliseconds of the upgrade timeout
     *
     * @param {string}
     * [updateClusterUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
     * The milliseconds of the upgrade domain timeout
     *
     * @param {object} [updateClusterUpgrade.clusterHealthPolicy] The policy of the
     * cluster health
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.rollingUpgradeMode] The mode of
     * the rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     *
     * @param {boolean} [updateClusterUpgrade.clusterHealthPolicy.forceRestart] The
     * flag of the force restart
     *
     * @param {string} [updateClusterUpgrade.clusterHealthPolicy.failureAction] The
     * action of the failure
     *
     * @param {number}
     * [updateClusterUpgrade.clusterHealthPolicy.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.healthCheckWaitDurationInMilliseconds]
     * The milliseconds of the health check wait duration
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.healthCheckStableDurationInMilliseconds]
     * The milliseconds of the health check stable duration
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.healthCheckRetryTimeoutInMilliseconds]
     * The milliseconds of the health check retry timeout
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.upgradeTimeoutInMilliseconds] The
     * milliseconds of the upgrade timeout
     *
     * @param {string}
     * [updateClusterUpgrade.clusterHealthPolicy.upgradeDomainTimeoutInMilliseconds]
     * The milliseconds of the upgrade domain timeout
     *
     * @param {boolean} [updateClusterUpgrade.enableDeltaHealthEvaluations] The
     * evaluations of the enable delta health
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(updateClusterUpgrade: models.UpdateClusterUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    update(updateClusterUpgrade: models.UpdateClusterUpgrade, callback: ServiceCallback<string>): void;
    update(updateClusterUpgrade: models.UpdateClusterUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Resume cluster upgrades
     *
     * @param {object} resumeClusterUpgrade The upgrade of the cluster
     *
     * @param {string} [resumeClusterUpgrade.upgradeDomain]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resumeWithHttpOperationResponse(resumeClusterUpgrade: models.ResumeClusterUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Resume cluster upgrades
     *
     * @param {object} resumeClusterUpgrade The upgrade of the cluster
     *
     * @param {string} [resumeClusterUpgrade.upgradeDomain]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resume(resumeClusterUpgrade: models.ResumeClusterUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    resume(resumeClusterUpgrade: models.ResumeClusterUpgrade, callback: ServiceCallback<string>): void;
    resume(resumeClusterUpgrade: models.ResumeClusterUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Rollback cluster upgrades
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rollbackWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Rollback cluster upgrades
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    rollback(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    rollback(callback: ServiceCallback<string>): void;
    rollback(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ClusterPackages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterPackages {


    /**
     * Register cluster packages
     *
     * @param {object} registerClusterPackage The package of the register cluster
     *
     * @param {string} [registerClusterPackage.codeFilePath] The path of the code
     * file
     *
     * @param {string} [registerClusterPackage.clusterManifestFilePath] The
     * relative path of the cluster manifest file
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    registerWithHttpOperationResponse(registerClusterPackage: models.RegisterClusterPackage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Register cluster packages
     *
     * @param {object} registerClusterPackage The package of the register cluster
     *
     * @param {string} [registerClusterPackage.codeFilePath] The path of the code
     * file
     *
     * @param {string} [registerClusterPackage.clusterManifestFilePath] The
     * relative path of the cluster manifest file
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    register(registerClusterPackage: models.RegisterClusterPackage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    register(registerClusterPackage: models.RegisterClusterPackage, callback: ServiceCallback<string>): void;
    register(registerClusterPackage: models.RegisterClusterPackage, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Unregister cluster packages
     *
     * @param {object} unregisterClusterPackage The package of the unregister
     * cluster
     *
     * @param {string} [unregisterClusterPackage.codeVersion] The version of the
     * code
     *
     * @param {string} [unregisterClusterPackage.configVersion] The version of the
     * config
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    unregisterWithHttpOperationResponse(unregisterClusterPackage: models.UnregisterClusterPackage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Unregister cluster packages
     *
     * @param {object} unregisterClusterPackage The package of the unregister
     * cluster
     *
     * @param {string} [unregisterClusterPackage.codeVersion] The version of the
     * code
     *
     * @param {string} [unregisterClusterPackage.configVersion] The version of the
     * config
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    unregister(unregisterClusterPackage: models.UnregisterClusterPackage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    unregister(unregisterClusterPackage: models.UnregisterClusterPackage, callback: ServiceCallback<string>): void;
    unregister(unregisterClusterPackage: models.UnregisterClusterPackage, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Nodes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Nodes {


    /**
     * List nodes
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.continuationToken] The token of the continuation
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeList>>;

    /**
     * List nodes
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.continuationToken] The token of the continuation
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeList>;
    list(callback: ServiceCallback<models.NodeList>): void;
    list(options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeList>): void;


    /**
     * Get nodes
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Node>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Node>>;

    /**
     * Get nodes
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Node} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Node} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Node} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Node>;
    get(nodeName: string, callback: ServiceCallback<models.Node>): void;
    get(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Node>): void;


    /**
     * Enable nodes
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    enableWithHttpOperationResponse(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Enable nodes
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    enable(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    enable(nodeName: string, callback: ServiceCallback<string>): void;
    enable(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Disable nodes
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} disableNode The node
     *
     * @param {string} [disableNode.deactivationIntent] Possible values include:
     * 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableWithHttpOperationResponse(nodeName: string, disableNode: models.DisableNode, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Disable nodes
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} disableNode The node
     *
     * @param {string} [disableNode.deactivationIntent] Possible values include:
     * 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disable(nodeName: string, disableNode: models.DisableNode, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    disable(nodeName: string, disableNode: models.DisableNode, callback: ServiceCallback<string>): void;
    disable(nodeName: string, disableNode: models.DisableNode, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * NodeStates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface NodeStates {


    /**
     * Remove node states
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeWithHttpOperationResponse(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Remove node states
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    remove(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    remove(nodeName: string, callback: ServiceCallback<string>): void;
    remove(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * NodeHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface NodeHealths {


    /**
     * Get node healths
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, options?: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeHealth>>;

    /**
     * Get node healths
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeHealth} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, options?: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeHealth>;
    get(nodeName: string, callback: ServiceCallback<models.NodeHealth>): void;
    get(nodeName: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeHealth>): void;


    /**
     * Send node health
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} nodeHealthReport The report of the node health
     *
     * @param {string} [nodeHealthReport.sourceId]
     *
     * @param {string} [nodeHealthReport.property]
     *
     * @param {string} [nodeHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [nodeHealthReport.description]
     *
     * @param {string} [nodeHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [nodeHealthReport.sequenceNumber]
     *
     * @param {boolean} [nodeHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(nodeName: string, nodeHealthReport: models.NodeHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Send node health
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} nodeHealthReport The report of the node health
     *
     * @param {string} [nodeHealthReport.sourceId]
     *
     * @param {string} [nodeHealthReport.property]
     *
     * @param {string} [nodeHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [nodeHealthReport.description]
     *
     * @param {string} [nodeHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [nodeHealthReport.sequenceNumber]
     *
     * @param {boolean} [nodeHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(nodeName: string, nodeHealthReport: models.NodeHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(nodeName: string, nodeHealthReport: models.NodeHealthReport, callback: ServiceCallback<string>): void;
    send(nodeName: string, nodeHealthReport: models.NodeHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * DeployedApplications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedApplications {


    /**
     * List deployed applications
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedApplication[]>>;

    /**
     * List deployed applications
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedApplication[]>;
    list(nodeName: string, callback: ServiceCallback<models.DeployedApplication[]>): void;
    list(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplication[]>): void;


    /**
     * Get deployed applications
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeployedApplication>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedApplication>>;

    /**
     * Get deployed applications
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeployedApplication} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeployedApplication} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeployedApplication} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedApplication>;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedApplication>): void;
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplication>): void;
}

/**
 * @class
 * DeployedApplicationHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedApplicationHealths {


    /**
     * Get deployed application healths
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.deployedServicePackagesHealthStateFilter] The
     * filter of the deployed service packages health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeployedApplicationHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, applicationName: string, options?: { eventsHealthStateFilter? : string, deployedServicePackagesHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedApplicationHealth>>;

    /**
     * Get deployed application healths
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.deployedServicePackagesHealthStateFilter] The
     * filter of the deployed service packages health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeployedApplicationHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeployedApplicationHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeployedApplicationHealth} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, applicationName: string, options?: { eventsHealthStateFilter? : string, deployedServicePackagesHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedApplicationHealth>;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedApplicationHealth>): void;
    get(nodeName: string, applicationName: string, options: { eventsHealthStateFilter? : string, deployedServicePackagesHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplicationHealth>): void;


    /**
     * Send deployed application health
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} deployedApplicationHealthReport The report of the deployed
     * application health
     *
     * @param {string} [deployedApplicationHealthReport.sourceId]
     *
     * @param {string} [deployedApplicationHealthReport.property]
     *
     * @param {string} [deployedApplicationHealthReport.healthState] Possible
     * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [deployedApplicationHealthReport.description]
     *
     * @param {string} [deployedApplicationHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [deployedApplicationHealthReport.sequenceNumber]
     *
     * @param {boolean} [deployedApplicationHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Send deployed application health
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} deployedApplicationHealthReport The report of the deployed
     * application health
     *
     * @param {string} [deployedApplicationHealthReport.sourceId]
     *
     * @param {string} [deployedApplicationHealthReport.property]
     *
     * @param {string} [deployedApplicationHealthReport.healthState] Possible
     * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [deployedApplicationHealthReport.description]
     *
     * @param {string} [deployedApplicationHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [deployedApplicationHealthReport.sequenceNumber]
     *
     * @param {boolean} [deployedApplicationHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, callback: ServiceCallback<string>): void;
    send(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * NodeLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface NodeLoadInformations {


    /**
     * Get node load informations
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeLoadInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeLoadInformation>>;

    /**
     * Get node load informations
     *
     * @param {string} nodeName The name of the node
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeLoadInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeLoadInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeLoadInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeLoadInformation>;
    get(nodeName: string, callback: ServiceCallback<models.NodeLoadInformation>): void;
    get(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeLoadInformation>): void;
}

/**
 * @class
 * DeployedCodePackages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedCodePackages {


    /**
     * Get deployed code packages
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedCodePackage[]>>;

    /**
     * Get deployed code packages
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedCodePackage[]>;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedCodePackage[]>): void;
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedCodePackage[]>): void;
}

/**
 * @class
 * DeployedReplicas
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedReplicas {


    /**
     * Get deployed replicas
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedReplica[]>>;

    /**
     * Get deployed replicas
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedReplica[]>;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedReplica[]>): void;
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedReplica[]>): void;
}

/**
 * @class
 * DeployedReplicaDetails
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedReplicaDetails {


    /**
     * Get deployed replica details
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} partitionName The name of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeployedReplicaDetail>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, partitionName: string, replicaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedReplicaDetail>>;

    /**
     * Get deployed replica details
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} partitionName The name of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeployedReplicaDetail} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeployedReplicaDetail} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeployedReplicaDetail} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, partitionName: string, replicaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedReplicaDetail>;
    get(nodeName: string, partitionName: string, replicaId: string, callback: ServiceCallback<models.DeployedReplicaDetail>): void;
    get(nodeName: string, partitionName: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedReplicaDetail>): void;
}

/**
 * @class
 * DeployedServicePackages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedServicePackages {


    /**
     * Get deployed service packages
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedServicePackage[]>>;

    /**
     * Get deployed service packages
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedServicePackage[]>;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedServicePackage[]>): void;
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServicePackage[]>): void;
}

/**
 * @class
 * DeployedServicePackageHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedServicePackageHealths {


    /**
     * Get deployed service package healths
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} servicePackageName The name of the service package
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeployedServicePackageHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, applicationName: string, servicePackageName: string, options?: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedServicePackageHealth>>;

    /**
     * Get deployed service package healths
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} servicePackageName The name of the service package
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeployedServicePackageHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeployedServicePackageHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeployedServicePackageHealth} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, applicationName: string, servicePackageName: string, options?: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedServicePackageHealth>;
    get(nodeName: string, applicationName: string, servicePackageName: string, callback: ServiceCallback<models.DeployedServicePackageHealth>): void;
    get(nodeName: string, applicationName: string, servicePackageName: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServicePackageHealth>): void;


    /**
     * Send deployed service package health
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceManifestName The name of the service manifest
     *
     * @param {object} deployedServicePackageHealthReport The report of the
     * deployed service package health
     *
     * @param {string} [deployedServicePackageHealthReport.sourceId]
     *
     * @param {string} [deployedServicePackageHealthReport.property]
     *
     * @param {string} [deployedServicePackageHealthReport.healthState] Possible
     * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [deployedServicePackageHealthReport.description]
     *
     * @param {string}
     * [deployedServicePackageHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [deployedServicePackageHealthReport.sequenceNumber]
     *
     * @param {boolean} [deployedServicePackageHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServiceHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Send deployed service package health
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceManifestName The name of the service manifest
     *
     * @param {object} deployedServicePackageHealthReport The report of the
     * deployed service package health
     *
     * @param {string} [deployedServicePackageHealthReport.sourceId]
     *
     * @param {string} [deployedServicePackageHealthReport.property]
     *
     * @param {string} [deployedServicePackageHealthReport.healthState] Possible
     * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [deployedServicePackageHealthReport.description]
     *
     * @param {string}
     * [deployedServicePackageHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [deployedServicePackageHealthReport.sequenceNumber]
     *
     * @param {boolean} [deployedServicePackageHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServiceHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServiceHealthReport, callback: ServiceCallback<string>): void;
    send(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServiceHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * DeployedServiceTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedServiceTypes {


    /**
     * Get deployed service types
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeployedServiceType[]>>;

    /**
     * Get deployed service types
     *
     * @param {string} nodeName The name of the node
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(nodeName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeployedServiceType[]>;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedServiceType[]>): void;
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServiceType[]>): void;
}

/**
 * @class
 * ApplicationTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationTypes {


    /**
     * List application types
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationType[]>>;

    /**
     * List application types
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationType[]>;
    list(callback: ServiceCallback<models.ApplicationType[]>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationType[]>): void;


    /**
     * Get application types
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationType[]>>;

    /**
     * Get application types
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationType[]>;
    get(applicationTypeName: string, callback: ServiceCallback<models.ApplicationType[]>): void;
    get(applicationTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationType[]>): void;


    /**
     * Register application types
     *
     * @param {object} registerApplicationType The type of the register application
     *
     * @param {string} [registerApplicationType.applicationTypeBuildPath]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    registerWithHttpOperationResponse(registerApplicationType: models.RegisterApplicationType, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Register application types
     *
     * @param {object} registerApplicationType The type of the register application
     *
     * @param {string} [registerApplicationType.applicationTypeBuildPath]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    register(registerApplicationType: models.RegisterApplicationType, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    register(registerApplicationType: models.RegisterApplicationType, callback: ServiceCallback<string>): void;
    register(registerApplicationType: models.RegisterApplicationType, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Unregister application types
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {object} unregisterApplicationType The type of the unregister
     * application
     *
     * @param {string} [unregisterApplicationType.applicationTypeVersion]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    unregisterWithHttpOperationResponse(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Unregister application types
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {object} unregisterApplicationType The type of the unregister
     * application
     *
     * @param {string} [unregisterApplicationType.applicationTypeVersion]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    unregister(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    unregister(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, callback: ServiceCallback<string>): void;
    unregister(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceManifests
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceManifests {


    /**
     * Get service manifests
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {string} applicationTypeVersion The version of the application type
     *
     * @param {string} serviceManifestName The name of the service manifest
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceManifest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceManifest>>;

    /**
     * Get service manifests
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {string} applicationTypeVersion The version of the application type
     *
     * @param {string} serviceManifestName The name of the service manifest
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceManifest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceManifest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceManifest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceManifest>;
    get(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, callback: ServiceCallback<models.ServiceManifest>): void;
    get(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceManifest>): void;
}

/**
 * @class
 * ServiceTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceTypes {


    /**
     * Get service types
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {string} applicationTypeVersion The version of the application type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationTypeName: string, applicationTypeVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceType[]>>;

    /**
     * Get service types
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {string} applicationTypeVersion The version of the application type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationTypeName: string, applicationTypeVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceType[]>;
    get(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<models.ServiceType[]>): void;
    get(applicationTypeName: string, applicationTypeVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceType[]>): void;
}

/**
 * @class
 * ApplicationManifests
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationManifests {


    /**
     * Get application manifests
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {string} applicationTypeVersion The version of the application type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationManifest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationTypeName: string, applicationTypeVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationManifest>>;

    /**
     * Get application manifests
     *
     * @param {string} applicationTypeName The name of the application type
     *
     * @param {string} applicationTypeVersion The version of the application type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationManifest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationManifest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationManifest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationTypeName: string, applicationTypeVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationManifest>;
    get(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<models.ApplicationManifest>): void;
    get(applicationTypeName: string, applicationTypeVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationManifest>): void;
}

/**
 * @class
 * Applications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Applications {


    /**
     * List applications
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.continuationToken] The token of the continuation
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationList>>;

    /**
     * List applications
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.continuationToken] The token of the continuation
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationList>;
    list(callback: ServiceCallback<models.ApplicationList>): void;
    list(options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationList>): void;


    /**
     * Get applications
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Application>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Application>>;

    /**
     * Get applications
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Application} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Application} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Application} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Application>;
    get(applicationName: string, callback: ServiceCallback<models.Application>): void;
    get(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;


    /**
     * Create applications
     *
     * @param {object} applicationDescription The description of the application
     *
     * @param {string} [applicationDescription.name]
     *
     * @param {string} [applicationDescription.typeName]
     *
     * @param {string} [applicationDescription.typeVersion]
     *
     * @param {array} [applicationDescription.parameterList]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(applicationDescription: models.ApplicationDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Create applications
     *
     * @param {object} applicationDescription The description of the application
     *
     * @param {string} [applicationDescription.name]
     *
     * @param {string} [applicationDescription.typeName]
     *
     * @param {string} [applicationDescription.typeVersion]
     *
     * @param {array} [applicationDescription.parameterList]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(applicationDescription: models.ApplicationDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    create(applicationDescription: models.ApplicationDescription, callback: ServiceCallback<string>): void;
    create(applicationDescription: models.ApplicationDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Remove applications
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceRemove] The force remove flag to skip
     * services check
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeWithHttpOperationResponse(applicationName: string, options?: { forceRemove? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Remove applications
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceRemove] The force remove flag to skip
     * services check
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    remove(applicationName: string, options?: { forceRemove? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    remove(applicationName: string, callback: ServiceCallback<string>): void;
    remove(applicationName: string, options: { forceRemove? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Services
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Services {


    /**
     * List services
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceList>>;

    /**
     * List services
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceList>;
    list(applicationName: string, callback: ServiceCallback<models.ServiceList>): void;
    list(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceList>): void;


    /**
     * Get services
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Service>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Service>>;

    /**
     * Get services
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Service} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Service} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Service} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Service>;
    get(applicationName: string, serviceName: string, callback: ServiceCallback<models.Service>): void;
    get(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Service>): void;


    /**
     * Create services
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} createServiceDescription The description of the service
     *
     * @param {string} [createServiceDescription.applicationName]
     *
     * @param {string} [createServiceDescription.serviceName]
     *
     * @param {string} [createServiceDescription.serviceTypeName]
     *
     * @param {object} [createServiceDescription.partitionDescription]
     *
     * @param {string}
     * [createServiceDescription.partitionDescription.partitionScheme] Possible
     * values include: 'Invalid', 'Singleton', 'UniformInt64', 'Named'
     *
     * @param {number} [createServiceDescription.partitionDescription.count]
     *
     * @param {array} [createServiceDescription.partitionDescription.names]
     *
     * @param {string} [createServiceDescription.partitionDescription.lowKey]
     *
     * @param {string} [createServiceDescription.partitionDescription.highKey]
     *
     * @param {string} [createServiceDescription.placementConstraints]
     *
     * @param {object} [createServiceDescription.correlationScheme]
     *
     * @param {object} [createServiceDescription.serviceLoadMetrics]
     *
     * @param {object} [createServiceDescription.servicePlacementPolicies]
     *
     * @param {string}
     * [createServiceDescription.servicePlacementPolicies.serviceName]
     *
     * @param {string}
     * [createServiceDescription.servicePlacementPolicies.serviceCorrelationScheme]
     * Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
     * 'NonAlignedAffinity'
     *
     * @param {number} [createServiceDescription.flags]
     *
     * @param {string} createServiceDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(applicationName: string, createServiceDescription: models.CreateServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Create services
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} createServiceDescription The description of the service
     *
     * @param {string} [createServiceDescription.applicationName]
     *
     * @param {string} [createServiceDescription.serviceName]
     *
     * @param {string} [createServiceDescription.serviceTypeName]
     *
     * @param {object} [createServiceDescription.partitionDescription]
     *
     * @param {string}
     * [createServiceDescription.partitionDescription.partitionScheme] Possible
     * values include: 'Invalid', 'Singleton', 'UniformInt64', 'Named'
     *
     * @param {number} [createServiceDescription.partitionDescription.count]
     *
     * @param {array} [createServiceDescription.partitionDescription.names]
     *
     * @param {string} [createServiceDescription.partitionDescription.lowKey]
     *
     * @param {string} [createServiceDescription.partitionDescription.highKey]
     *
     * @param {string} [createServiceDescription.placementConstraints]
     *
     * @param {object} [createServiceDescription.correlationScheme]
     *
     * @param {object} [createServiceDescription.serviceLoadMetrics]
     *
     * @param {object} [createServiceDescription.servicePlacementPolicies]
     *
     * @param {string}
     * [createServiceDescription.servicePlacementPolicies.serviceName]
     *
     * @param {string}
     * [createServiceDescription.servicePlacementPolicies.serviceCorrelationScheme]
     * Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
     * 'NonAlignedAffinity'
     *
     * @param {number} [createServiceDescription.flags]
     *
     * @param {string} createServiceDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(applicationName: string, createServiceDescription: models.CreateServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    create(applicationName: string, createServiceDescription: models.CreateServiceDescription, callback: ServiceCallback<string>): void;
    create(applicationName: string, createServiceDescription: models.CreateServiceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Update services
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} updateServiceDescription The description of the service
     * update
     *
     * @param {number} [updateServiceDescription.flags]
     *
     * @param {string} updateServiceDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(serviceName: string, updateServiceDescription: models.UpdateServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Update services
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} updateServiceDescription The description of the service
     * update
     *
     * @param {number} [updateServiceDescription.flags]
     *
     * @param {string} updateServiceDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(serviceName: string, updateServiceDescription: models.UpdateServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    update(serviceName: string, updateServiceDescription: models.UpdateServiceDescription, callback: ServiceCallback<string>): void;
    update(serviceName: string, updateServiceDescription: models.UpdateServiceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Remove services
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeWithHttpOperationResponse(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Remove services
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    remove(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    remove(serviceName: string, callback: ServiceCallback<string>): void;
    remove(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Resolve services
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.partitionKeyType] The type of the partition key
     *
     * @param {string} [options.partitionKeyValue] The value of the partition key
     *
     * @param {string} [options.previousRspVersion] The version of the previous rsp
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResolvedServicePartition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resolveWithHttpOperationResponse(serviceName: string, options?: { partitionKeyType? : number, partitionKeyValue? : string, previousRspVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResolvedServicePartition>>;

    /**
     * Resolve services
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.partitionKeyType] The type of the partition key
     *
     * @param {string} [options.partitionKeyValue] The value of the partition key
     *
     * @param {string} [options.previousRspVersion] The version of the previous rsp
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResolvedServicePartition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResolvedServicePartition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResolvedServicePartition} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resolve(serviceName: string, options?: { partitionKeyType? : number, partitionKeyValue? : string, previousRspVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResolvedServicePartition>;
    resolve(serviceName: string, callback: ServiceCallback<models.ResolvedServicePartition>): void;
    resolve(serviceName: string, options: { partitionKeyType? : number, partitionKeyValue? : string, previousRspVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResolvedServicePartition>): void;
}

/**
 * @class
 * ServiceGroupDescriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroupDescriptions {


    /**
     * Get service group descriptions
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceGroupDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceGroupDescription>>;

    /**
     * Get service group descriptions
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceGroupDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceGroupDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceGroupDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceGroupDescription>;
    get(applicationName: string, serviceName: string, callback: ServiceCallback<models.ServiceGroupDescription>): void;
    get(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceGroupDescription>): void;
}

/**
 * @class
 * ServiceGroupMembers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroupMembers {


    /**
     * Get service group members
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceGroupMember>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceGroupMember>>;

    /**
     * Get service group members
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceGroupMember} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceGroupMember} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceGroupMember} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceGroupMember>;
    get(applicationName: string, serviceName: string, callback: ServiceCallback<models.ServiceGroupMember>): void;
    get(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceGroupMember>): void;
}

/**
 * @class
 * ApplicationHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationHealths {


    /**
     * Get application healths
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.deployedApplicationsHealthStateFilter] The filter
     * of the deployed application health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationName: string, options?: { eventsHealthStateFilter? : string, deployedApplicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationHealth>>;

    /**
     * Get application healths
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.deployedApplicationsHealthStateFilter] The filter
     * of the deployed application health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationHealth} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationName: string, options?: { eventsHealthStateFilter? : string, deployedApplicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationHealth>;
    get(applicationName: string, callback: ServiceCallback<models.ApplicationHealth>): void;
    get(applicationName: string, options: { eventsHealthStateFilter? : string, deployedApplicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationHealth>): void;


    /**
     * Send application health
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} applicationHealthReport The report of the application health
     *
     * @param {string} [applicationHealthReport.sourceId]
     *
     * @param {string} [applicationHealthReport.property]
     *
     * @param {string} [applicationHealthReport.healthState] Possible values
     * include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [applicationHealthReport.description]
     *
     * @param {string} [applicationHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [applicationHealthReport.sequenceNumber]
     *
     * @param {boolean} [applicationHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Send application health
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} applicationHealthReport The report of the application health
     *
     * @param {string} [applicationHealthReport.sourceId]
     *
     * @param {string} [applicationHealthReport.property]
     *
     * @param {string} [applicationHealthReport.healthState] Possible values
     * include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [applicationHealthReport.description]
     *
     * @param {string} [applicationHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [applicationHealthReport.sequenceNumber]
     *
     * @param {boolean} [applicationHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, callback: ServiceCallback<string>): void;
    send(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ApplicationUpgrades
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationUpgrades {


    /**
     * Get application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationUpgrade>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationUpgrade>>;

    /**
     * Get application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationUpgrade} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationUpgrade} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationUpgrade} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationUpgrade>;
    get(applicationName: string, callback: ServiceCallback<models.ApplicationUpgrade>): void;
    get(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationUpgrade>): void;


    /**
     * Start application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} startApplicationUpgrade The description of the start
     * application upgrade
     *
     * @param {string} [startApplicationUpgrade.name]
     *
     * @param {string} [startApplicationUpgrade.targetApplicationTypeVersion]
     *
     * @param {array} [startApplicationUpgrade.parameters]
     *
     * @param {string} [startApplicationUpgrade.upgradeKind] Possible values
     * include: 'Invalid', 'Rolling'
     *
     * @param {string} [startApplicationUpgrade.rollingUpgradeMode] Possible values
     * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
     *
     * @param {number}
     * [startApplicationUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
     *
     * @param {boolean} [startApplicationUpgrade.forceRestart]
     *
     * @param {object} [startApplicationUpgrade.monitoringPolicy]
     *
     * @param {string} [startApplicationUpgrade.monitoringPolicy.failureAction]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.healthCheckStableDurationInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.upgradeTimeoutInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
     *
     * @param {object} [startApplicationUpgrade.applicationHealthPolicy]
     *
     * @param {boolean}
     * [startApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     *
     * @param {object}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(applicationName: string, startApplicationUpgrade: models.StartApplicationUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Start application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} startApplicationUpgrade The description of the start
     * application upgrade
     *
     * @param {string} [startApplicationUpgrade.name]
     *
     * @param {string} [startApplicationUpgrade.targetApplicationTypeVersion]
     *
     * @param {array} [startApplicationUpgrade.parameters]
     *
     * @param {string} [startApplicationUpgrade.upgradeKind] Possible values
     * include: 'Invalid', 'Rolling'
     *
     * @param {string} [startApplicationUpgrade.rollingUpgradeMode] Possible values
     * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
     *
     * @param {number}
     * [startApplicationUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
     *
     * @param {boolean} [startApplicationUpgrade.forceRestart]
     *
     * @param {object} [startApplicationUpgrade.monitoringPolicy]
     *
     * @param {string} [startApplicationUpgrade.monitoringPolicy.failureAction]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.healthCheckStableDurationInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.upgradeTimeoutInMilliseconds]
     *
     * @param {string}
     * [startApplicationUpgrade.monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
     *
     * @param {object} [startApplicationUpgrade.applicationHealthPolicy]
     *
     * @param {boolean}
     * [startApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     *
     * @param {object}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     *
     * @param {number}
     * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(applicationName: string, startApplicationUpgrade: models.StartApplicationUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    start(applicationName: string, startApplicationUpgrade: models.StartApplicationUpgrade, callback: ServiceCallback<string>): void;
    start(applicationName: string, startApplicationUpgrade: models.StartApplicationUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Update application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} updateApplicationUpgrade The description of the update
     * application upgrade
     *
     * @param {string} [updateApplicationUpgrade.name]
     *
     * @param {string} [updateApplicationUpgrade.upgradeKind]
     *
     * @param {object} [updateApplicationUpgrade.updateDescription]
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.rollingUpgradeMode] The mode of
     * the rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     *
     * @param {boolean} [updateApplicationUpgrade.updateDescription.forceRestart]
     * The flag of the force restart
     *
     * @param {string} [updateApplicationUpgrade.updateDescription.failureAction]
     * The action of the failure
     *
     * @param {number}
     * [updateApplicationUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
     * The seconds of the health check wait duration
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
     * The seconds of the health check stable duration
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
     * The milliseconds of the health check retry timeout
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.upgradeTimeoutInMilliseconds]
     * The milliseconds of the upgrade timeout
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
     * The milliseconds of the upgrade domain timeout
     *
     * @param {object} [updateApplicationUpgrade.applicationHealthPolicy]
     *
     * @param {boolean}
     * [updateApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     *
     * @param {object}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(applicationName: string, updateApplicationUpgrade: models.UpdateApplicationUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Update application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} updateApplicationUpgrade The description of the update
     * application upgrade
     *
     * @param {string} [updateApplicationUpgrade.name]
     *
     * @param {string} [updateApplicationUpgrade.upgradeKind]
     *
     * @param {object} [updateApplicationUpgrade.updateDescription]
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.rollingUpgradeMode] The mode of
     * the rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     *
     * @param {boolean} [updateApplicationUpgrade.updateDescription.forceRestart]
     * The flag of the force restart
     *
     * @param {string} [updateApplicationUpgrade.updateDescription.failureAction]
     * The action of the failure
     *
     * @param {number}
     * [updateApplicationUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
     * The seconds of the upgrade replica set check timeout
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
     * The seconds of the health check wait duration
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
     * The seconds of the health check stable duration
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
     * The milliseconds of the health check retry timeout
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.upgradeTimeoutInMilliseconds]
     * The milliseconds of the upgrade timeout
     *
     * @param {string}
     * [updateApplicationUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
     * The milliseconds of the upgrade domain timeout
     *
     * @param {object} [updateApplicationUpgrade.applicationHealthPolicy]
     *
     * @param {boolean}
     * [updateApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     *
     * @param {object}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     *
     * @param {number}
     * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(applicationName: string, updateApplicationUpgrade: models.UpdateApplicationUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    update(applicationName: string, updateApplicationUpgrade: models.UpdateApplicationUpgrade, callback: ServiceCallback<string>): void;
    update(applicationName: string, updateApplicationUpgrade: models.UpdateApplicationUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Resume application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} resumeApplicationUpgrade The upgrade of the resume
     * application
     *
     * @param {string} [resumeApplicationUpgrade.upgradeDomainName]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resumeWithHttpOperationResponse(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Resume application upgrades
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} resumeApplicationUpgrade The upgrade of the resume
     * application
     *
     * @param {string} [resumeApplicationUpgrade.upgradeDomainName]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resume(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    resume(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, callback: ServiceCallback<string>): void;
    resume(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceFromTemplates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceFromTemplates {


    /**
     * Create service from templates
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} serviceDescriptionTemplate The template of the service
     * description
     *
     * @param {string} [serviceDescriptionTemplate.serviceName]
     *
     * @param {string} [serviceDescriptionTemplate.serviceTypeName]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Create service from templates
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} serviceDescriptionTemplate The template of the service
     * description
     *
     * @param {string} [serviceDescriptionTemplate.serviceName]
     *
     * @param {string} [serviceDescriptionTemplate.serviceTypeName]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, callback: ServiceCallback<string>): void;
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroups {


    /**
     * Create service groups
     *
     * @param {string} applicationName The name of the service group
     *
     * @param {object} createServiceGroupDescription The description of the service
     * group
     *
     * @param {string} [createServiceGroupDescription.applicationName]
     *
     * @param {string} [createServiceGroupDescription.serviceName]
     *
     * @param {string} [createServiceGroupDescription.serviceTypeName]
     *
     * @param {object} [createServiceGroupDescription.partitionDescription]
     *
     * @param {string}
     * [createServiceGroupDescription.partitionDescription.partitionScheme]
     * Possible values include: 'Invalid', 'Singleton', 'UniformInt64', 'Named'
     *
     * @param {number} [createServiceGroupDescription.partitionDescription.count]
     *
     * @param {array} [createServiceGroupDescription.partitionDescription.names]
     *
     * @param {string} [createServiceGroupDescription.partitionDescription.lowKey]
     *
     * @param {string} [createServiceGroupDescription.partitionDescription.highKey]
     *
     * @param {string} [createServiceGroupDescription.placementConstraints]
     *
     * @param {object} [createServiceGroupDescription.correlationScheme]
     *
     * @param {object} [createServiceGroupDescription.serviceLoadMetrics]
     *
     * @param {object} [createServiceGroupDescription.servicePlacementPolicies]
     *
     * @param {string}
     * [createServiceGroupDescription.servicePlacementPolicies.serviceName]
     *
     * @param {string}
     * [createServiceGroupDescription.servicePlacementPolicies.serviceCorrelationScheme]
     * Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
     * 'NonAlignedAffinity'
     *
     * @param {number} [createServiceGroupDescription.flags]
     *
     * @param {array} [createServiceGroupDescription.serviceGroupMemberDescription]
     *
     * @param {string} createServiceGroupDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(applicationName: string, createServiceGroupDescription: models.CreateServiceGroupDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Create service groups
     *
     * @param {string} applicationName The name of the service group
     *
     * @param {object} createServiceGroupDescription The description of the service
     * group
     *
     * @param {string} [createServiceGroupDescription.applicationName]
     *
     * @param {string} [createServiceGroupDescription.serviceName]
     *
     * @param {string} [createServiceGroupDescription.serviceTypeName]
     *
     * @param {object} [createServiceGroupDescription.partitionDescription]
     *
     * @param {string}
     * [createServiceGroupDescription.partitionDescription.partitionScheme]
     * Possible values include: 'Invalid', 'Singleton', 'UniformInt64', 'Named'
     *
     * @param {number} [createServiceGroupDescription.partitionDescription.count]
     *
     * @param {array} [createServiceGroupDescription.partitionDescription.names]
     *
     * @param {string} [createServiceGroupDescription.partitionDescription.lowKey]
     *
     * @param {string} [createServiceGroupDescription.partitionDescription.highKey]
     *
     * @param {string} [createServiceGroupDescription.placementConstraints]
     *
     * @param {object} [createServiceGroupDescription.correlationScheme]
     *
     * @param {object} [createServiceGroupDescription.serviceLoadMetrics]
     *
     * @param {object} [createServiceGroupDescription.servicePlacementPolicies]
     *
     * @param {string}
     * [createServiceGroupDescription.servicePlacementPolicies.serviceName]
     *
     * @param {string}
     * [createServiceGroupDescription.servicePlacementPolicies.serviceCorrelationScheme]
     * Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
     * 'NonAlignedAffinity'
     *
     * @param {number} [createServiceGroupDescription.flags]
     *
     * @param {array} [createServiceGroupDescription.serviceGroupMemberDescription]
     *
     * @param {string} createServiceGroupDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(applicationName: string, createServiceGroupDescription: models.CreateServiceGroupDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    create(applicationName: string, createServiceGroupDescription: models.CreateServiceGroupDescription, callback: ServiceCallback<string>): void;
    create(applicationName: string, createServiceGroupDescription: models.CreateServiceGroupDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Update service groups
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} updateServiceGroupDescription The description of the service
     * group update
     *
     * @param {number} [updateServiceGroupDescription.flags]
     *
     * @param {string} updateServiceGroupDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(applicationName: string, serviceName: string, updateServiceGroupDescription: models.UpdateServiceGroupDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Update service groups
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} updateServiceGroupDescription The description of the service
     * group update
     *
     * @param {number} [updateServiceGroupDescription.flags]
     *
     * @param {string} updateServiceGroupDescription.serviceKind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(applicationName: string, serviceName: string, updateServiceGroupDescription: models.UpdateServiceGroupDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    update(applicationName: string, serviceName: string, updateServiceGroupDescription: models.UpdateServiceGroupDescription, callback: ServiceCallback<string>): void;
    update(applicationName: string, serviceName: string, updateServiceGroupDescription: models.UpdateServiceGroupDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Remove service groups
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeWithHttpOperationResponse(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Remove service groups
     *
     * @param {string} applicationName The name of the application
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    remove(applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    remove(applicationName: string, serviceName: string, callback: ServiceCallback<string>): void;
    remove(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceGroupFromTemplates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroupFromTemplates {


    /**
     * Create service group from templates
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} serviceDescriptionTemplate The template of the service
     * description
     *
     * @param {string} [serviceDescriptionTemplate.serviceName]
     *
     * @param {string} [serviceDescriptionTemplate.serviceTypeName]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Create service group from templates
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} serviceDescriptionTemplate The template of the service
     * description
     *
     * @param {string} [serviceDescriptionTemplate.serviceName]
     *
     * @param {string} [serviceDescriptionTemplate.serviceTypeName]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, callback: ServiceCallback<string>): void;
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ApplicationUpgradeRollbacks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationUpgradeRollbacks {


    /**
     * Start application upgrade rollbacks
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Start application upgrade rollbacks
     *
     * @param {string} applicationName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    start(applicationName: string, callback: ServiceCallback<string>): void;
    start(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceDescriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceDescriptions {


    /**
     * Get service descriptions
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceDescription>>;

    /**
     * Get service descriptions
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceDescription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceDescription>;
    get(serviceName: string, callback: ServiceCallback<models.ServiceDescription>): void;
    get(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceDescription>): void;
}

/**
 * @class
 * ServiceHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceHealths {


    /**
     * Get service healths
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceHealth>>;

    /**
     * Get service healths
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceHealth} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceHealth>;
    get(serviceName: string, callback: ServiceCallback<models.ServiceHealth>): void;
    get(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceHealth>): void;


    /**
     * Send service healths
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} serviceHealthReport The report of the service health
     *
     * @param {string} [serviceHealthReport.sourceId]
     *
     * @param {string} [serviceHealthReport.property]
     *
     * @param {string} [serviceHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [serviceHealthReport.description]
     *
     * @param {string} [serviceHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [serviceHealthReport.sequenceNumber]
     *
     * @param {boolean} [serviceHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(serviceName: string, serviceHealthReport: models.ServiceHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Send service healths
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} serviceHealthReport The report of the service health
     *
     * @param {string} [serviceHealthReport.sourceId]
     *
     * @param {string} [serviceHealthReport.property]
     *
     * @param {string} [serviceHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [serviceHealthReport.description]
     *
     * @param {string} [serviceHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [serviceHealthReport.sequenceNumber]
     *
     * @param {boolean} [serviceHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(serviceName: string, serviceHealthReport: models.ServiceHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(serviceName: string, serviceHealthReport: models.ServiceHealthReport, callback: ServiceCallback<string>): void;
    send(serviceName: string, serviceHealthReport: models.ServiceHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Partitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Partitions {


    /**
     * List partitions
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionList>>;

    /**
     * List partitions
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionList>;
    list(serviceName: string, callback: ServiceCallback<models.PartitionList>): void;
    list(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionList>): void;


    /**
     * Get partitions
     *
     * @param {string} serviceName The name of the service
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Partition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(serviceName: string, partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Partition>>;

    /**
     * Get partitions
     *
     * @param {string} serviceName The name of the service
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Partition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Partition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Partition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(serviceName: string, partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Partition>;
    get(serviceName: string, partitionId: string, callback: ServiceCallback<models.Partition>): void;
    get(serviceName: string, partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Partition>): void;


    /**
     * Repair partitions
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    repairWithHttpOperationResponse(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Repair partitions
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    repair(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    repair(partitionId: string, callback: ServiceCallback<string>): void;
    repair(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * PartitionLists
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionLists {


    /**
     * Repair partition lists
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    repairWithHttpOperationResponse(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Repair partition lists
     *
     * @param {string} serviceName The name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    repair(serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    repair(serviceName: string, callback: ServiceCallback<string>): void;
    repair(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * PartitionLoads
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionLoads {


    /**
     * Reset partition loads
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetWithHttpOperationResponse(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Reset partition loads
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reset(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    reset(partitionId: string, callback: ServiceCallback<string>): void;
    reset(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Replicas
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Replicas {


    /**
     * List replicas
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicaList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicaList>>;

    /**
     * List replicas
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicaList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicaList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicaList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicaList>;
    list(partitionId: string, callback: ServiceCallback<models.ReplicaList>): void;
    list(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaList>): void;


    /**
     * Get replicas
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Replica>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(partitionId: string, replicaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Replica>>;

    /**
     * Get replicas
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Replica} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Replica} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Replica} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(partitionId: string, replicaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Replica>;
    get(partitionId: string, replicaId: string, callback: ServiceCallback<models.Replica>): void;
    get(partitionId: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replica>): void;
}

/**
 * @class
 * PartitionHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionHealths {


    /**
     * Get partition healths
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.replicasHealthStateFilter] The filter of the
     * replicas health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(partitionId: string, options?: { eventsHealthStateFilter? : string, replicasHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionHealth>>;

    /**
     * Get partition healths
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {string} [options.replicasHealthStateFilter] The filter of the
     * replicas health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionHealth} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(partitionId: string, options?: { eventsHealthStateFilter? : string, replicasHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionHealth>;
    get(partitionId: string, callback: ServiceCallback<models.PartitionHealth>): void;
    get(partitionId: string, options: { eventsHealthStateFilter? : string, replicasHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionHealth>): void;


    /**
     * Send partition health
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} partitionHealthReport The report of the partition health
     *
     * @param {string} [partitionHealthReport.sourceId]
     *
     * @param {string} [partitionHealthReport.property]
     *
     * @param {string} [partitionHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [partitionHealthReport.description]
     *
     * @param {string} [partitionHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [partitionHealthReport.sequenceNumber]
     *
     * @param {boolean} [partitionHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(partitionId: string, partitionHealthReport: models.PartitionHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Send partition health
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} partitionHealthReport The report of the partition health
     *
     * @param {string} [partitionHealthReport.sourceId]
     *
     * @param {string} [partitionHealthReport.property]
     *
     * @param {string} [partitionHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [partitionHealthReport.description]
     *
     * @param {string} [partitionHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [partitionHealthReport.sequenceNumber]
     *
     * @param {boolean} [partitionHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(partitionId: string, partitionHealthReport: models.PartitionHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(partitionId: string, partitionHealthReport: models.PartitionHealthReport, callback: ServiceCallback<string>): void;
    send(partitionId: string, partitionHealthReport: models.PartitionHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ReplicaHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ReplicaHealths {


    /**
     * Get replica healths
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicaHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(partitionId: string, replicaId: string, options?: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicaHealth>>;

    /**
     * Get replica healths
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicaHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicaHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicaHealth} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(partitionId: string, replicaId: string, options?: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicaHealth>;
    get(partitionId: string, replicaId: string, callback: ServiceCallback<models.ReplicaHealth>): void;
    get(partitionId: string, replicaId: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaHealth>): void;


    /**
     * Send replica healths
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} replicaHealthReport The report of the replica health
     *
     * @param {string} [replicaHealthReport.sourceId]
     *
     * @param {string} [replicaHealthReport.property]
     *
     * @param {string} [replicaHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [replicaHealthReport.description]
     *
     * @param {string} [replicaHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [replicaHealthReport.sequenceNumber]
     *
     * @param {boolean} [replicaHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Send replica healths
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} replicaHealthReport The report of the replica health
     *
     * @param {string} [replicaHealthReport.sourceId]
     *
     * @param {string} [replicaHealthReport.property]
     *
     * @param {string} [replicaHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     *
     * @param {string} [replicaHealthReport.description]
     *
     * @param {string} [replicaHealthReport.timeToLiveInMilliSeconds]
     *
     * @param {string} [replicaHealthReport.sequenceNumber]
     *
     * @param {boolean} [replicaHealthReport.removeWhenExpired]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    send(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, callback: ServiceCallback<string>): void;
    send(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * PartitionLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionLoadInformations {


    /**
     * Get partition load informations
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionLoadInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionLoadInformation>>;

    /**
     * Get partition load informations
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionLoadInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionLoadInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionLoadInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(partitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionLoadInformation>;
    get(partitionId: string, callback: ServiceCallback<models.PartitionLoadInformation>): void;
    get(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionLoadInformation>): void;
}

/**
 * @class
 * ReplicaLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ReplicaLoadInformations {


    /**
     * Get replica load informations
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicaLoadInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(partitionId: string, replicaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicaLoadInformation>>;

    /**
     * Get replica load informations
     *
     * @param {string} partitionId The id of the partition
     *
     * @param {string} replicaId The id of the replica
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicaLoadInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicaLoadInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicaLoadInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(partitionId: string, replicaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicaLoadInformation>;
    get(partitionId: string, replicaId: string, callback: ServiceCallback<models.ReplicaLoadInformation>): void;
    get(partitionId: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaLoadInformation>): void;
}

/**
 * @class
 * ClusterLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterLoadInformations {


    /**
     * Get cluster load informations
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterLoadInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterLoadInformation>>;

    /**
     * Get cluster load informations
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterLoadInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterLoadInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterLoadInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterLoadInformation>;
    get(callback: ServiceCallback<models.ClusterLoadInformation>): void;
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterLoadInformation>): void;
}

/**
 * @class
 * UpgradeProgresses
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface UpgradeProgresses {


    /**
     * Get upgrade progresses
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterUpgradeProgress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterUpgradeProgress>>;

    /**
     * Get upgrade progresses
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterUpgradeProgress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterUpgradeProgress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterUpgradeProgress} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterUpgradeProgress>;
    get(callback: ServiceCallback<models.ClusterUpgradeProgress>): void;
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterUpgradeProgress>): void;
}
