/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the Cluster class.
 * @constructor
 * The cluster resource
 *
 * @member {array} [availableClusterVersions] The available cluster code
 * version which the cluster can upgrade to, note that you must choose
 * upgradeMode to manual to upgrade to
 *
 * @member {string} [clusterId] The cluster id used internally by ServiceFabirc
 *
 * @member {string} [clusterState] The state for the cluster. Possible values
 * include: 'Default', 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
 * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
 * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
 * 'UpgradeServiceUnreachable', 'Deleting', 'ScaleUp', 'ScaleDown',
 * 'AutoScale', 'Ready', 'Failed'
 *
 * @member {string} [clusterEndpoint] The endpoint for the cluster connecting
 * to servicefabric resource provider
 *
 * @member {string} [clusterCodeVersion] The ServiceFabric code version, you
 * don't need to set it, when you choose upgradeMode as Automatic
 *
 * @member {object} [certificate] The cluster certificate
 *
 * @member {string} [certificate.thumbprint] Primary certificate thumbprint
 *
 * @member {string} [certificate.thumbprintSecondary] Secondary certificate
 * thumbprint
 *
 * @member {string} [certificate.x509StoreName] Certificate x509 store
 * location. Possible values include: 'AddressBook', 'AuthRoot',
 * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
 * 'TrustedPublisher'
 *
 * @member {string} reliabilityLevel The reliability level for the cluster.
 * Possible values include: 'Bronze', 'Silver', 'Gold', 'Platinum'
 *
 * @member {string} upgradeMode The cluster upgrade mode. Possible values
 * include: 'Automatic', 'Manual'
 *
 * @member {array} [clientCertificateThumbprints] The client certificate
 * thumbprints
 *
 * @member {array} [clientCertificateCommonNames] The certificate common name
 * and issurer thumprint for the client certificate
 *
 * @member {array} [fabricSettings] The faric setting collection
 *
 * @member {object} [reverseProxyCertificate] The certificate for the reverse
 * proxy
 *
 * @member {string} [reverseProxyCertificate.thumbprint] Primary certificate
 * thumbprint
 *
 * @member {string} [reverseProxyCertificate.thumbprintSecondary] Secondary
 * certificate thumbprint
 *
 * @member {string} [reverseProxyCertificate.x509StoreName] Certificate x509
 * store location. Possible values include: 'AddressBook', 'AuthRoot',
 * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
 * 'TrustedPublisher'
 *
 * @member {string} managementEndpoint The cluster management endpoint address
 *
 * @member {array} nodeTypes The arary of the nodeType
 *
 * @member {string} [provisioningState] The provisioning state of the cluster.
 * Possible values include: 'Default', 'Updating', 'Succeeded', 'Failed',
 * 'Canceled'
 *
 * @member {string} vmImage The OS type
 *
 * @member {object} diagnosticsStorageAccountConfig The storage diagnostics
 * account configuration
 *
 * @member {string} [diagnosticsStorageAccountConfig.storageAccountName]
 * Diagnostics storage account name
 *
 * @member {string} [diagnosticsStorageAccountConfig.primaryAccessKey] Primary
 * diagnostics storage access key
 *
 * @member {string} [diagnosticsStorageAccountConfig.secondaryAccessKey]
 * Secondary diagnostics storage access key
 *
 * @member {string} [diagnosticsStorageAccountConfig.protectedAccountKeyName]
 * Protected Diagnostics storage key name
 *
 * @member {string} [diagnosticsStorageAccountConfig.blobEndpoint] Diagnostics
 * storage account blob endpoint
 *
 * @member {string} [diagnosticsStorageAccountConfig.queueEndpoint] Diagnostics
 * storage account queue endpoint
 *
 * @member {string} [diagnosticsStorageAccountConfig.tableEndpoint] Diagnostics
 * storage account table endpoint
 *
 * @member {object} [upgradeDescription] The upgrade policy
 *
 * @member {boolean} [upgradeDescription.overrideUserUpgradePolicy] Override
 * user upgrade policy
 *
 * @member {boolean} [upgradeDescription.forceRestart] Force restart or not
 *
 * @member {string} [upgradeDescription.upgradeReplicaSetCheckTimeout] Upgrade
 * replica set check timeout
 *
 * @member {string} [upgradeDescription.healthCheckWaitDuration] Health check
 * wait duration
 *
 * @member {string} [upgradeDescription.healthCheckStableDuration] Health check
 * stable duration
 *
 * @member {string} [upgradeDescription.healthCheckRetryTimeout] Health check
 * retry timeout
 *
 * @member {string} [upgradeDescription.upgradeTimeout] Upgrade Timeout
 *
 * @member {string} [upgradeDescription.upgradeDomainTimeout] upgrade domain
 * timeout
 *
 * @member {object} [upgradeDescription.healthPolicy] Health Policy
 *
 * @member {number} [upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
 * Max percent of unhealthy nodes
 *
 * @member {number}
 * [upgradeDescription.healthPolicy.maxPercentUnhealthyApplications] Max
 * percent of unhealthy applications
 *
 * @member {object} [upgradeDescription.healthPolicy.applicationHealthPolicies]
 * Application health policies
 *
 * @member {object} [upgradeDescription.deltaHealthPolicy] Delta health policy
 *
 * @member {number}
 * [upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes] Max of
 * percent of delta unhealthy nodes
 *
 * @member {number}
 * [upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
 * Max of percent upgrade domain delta unhealthy nodes
 *
 * @member {number}
 * [upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
 * Max percent of delta unhealthy applications
 *
 * @member {object}
 * [upgradeDescription.deltaHealthPolicy.applicationHealthPolicies] Application
 * health policies
 *
 */
class Cluster extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Cluster
   *
   * @returns {object} metadata of Cluster
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Cluster',
      type: {
        name: 'Composite',
        className: 'Cluster',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          availableClusterVersions: {
            required: false,
            readOnly: true,
            serializedName: 'properties.availableClusterVersions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClusterVersionDetailsElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClusterVersionDetails'
                  }
              }
            }
          },
          clusterId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.clusterId',
            type: {
              name: 'String'
            }
          },
          clusterState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.clusterState',
            type: {
              name: 'String'
            }
          },
          clusterEndpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.clusterEndpoint',
            type: {
              name: 'String'
            }
          },
          clusterCodeVersion: {
            required: false,
            serializedName: 'properties.clusterCodeVersion',
            type: {
              name: 'String'
            }
          },
          certificate: {
            required: false,
            serializedName: 'properties.certificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          reliabilityLevel: {
            required: true,
            serializedName: 'properties.reliabilityLevel',
            type: {
              name: 'String'
            }
          },
          upgradeMode: {
            required: true,
            serializedName: 'properties.upgradeMode',
            type: {
              name: 'String'
            }
          },
          clientCertificateThumbprints: {
            required: false,
            serializedName: 'properties.clientCertificateThumbprints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientCertificateThumbprintElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientCertificateThumbprint'
                  }
              }
            }
          },
          clientCertificateCommonNames: {
            required: false,
            serializedName: 'properties.clientCertificateCommonNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientCertificateCommonNameElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientCertificateCommonName'
                  }
              }
            }
          },
          fabricSettings: {
            required: false,
            serializedName: 'properties.fabricSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SettingsSectionDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'SettingsSectionDescription'
                  }
              }
            }
          },
          reverseProxyCertificate: {
            required: false,
            serializedName: 'properties.reverseProxyCertificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          managementEndpoint: {
            required: true,
            serializedName: 'properties.managementEndpoint',
            type: {
              name: 'String'
            }
          },
          nodeTypes: {
            required: true,
            serializedName: 'properties.nodeTypes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeTypeDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeTypeDescription'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          vmImage: {
            required: true,
            serializedName: 'properties.vmImage',
            type: {
              name: 'String'
            }
          },
          diagnosticsStorageAccountConfig: {
            required: true,
            serializedName: 'properties.diagnosticsStorageAccountConfig',
            type: {
              name: 'Composite',
              className: 'DiagnosticsStorageAccountConfig'
            }
          },
          upgradeDescription: {
            required: false,
            serializedName: 'properties.upgradeDescription',
            type: {
              name: 'Composite',
              className: 'PaasClusterUpgradePolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = Cluster;
