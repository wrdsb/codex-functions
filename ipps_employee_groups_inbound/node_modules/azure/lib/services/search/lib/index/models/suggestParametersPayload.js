/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the SuggestParametersPayload class.
 * @constructor
 * Parameters for filtering, sorting, fuzzy matching, and other suggestions
 * query behaviors.
 *
 * @member {string} [filter] The OData $filter expression to apply to the
 * suggestions query.
 *
 * @member {boolean} [fuzzy] A value indicating whether to use fuzzy matching
 * for the suggestion query. Default is false. when set to true, the query will
 * find suggestions even if there's a substituted or missing character in the
 * search text. While this provides a better experience in some scenarios it
 * comes at a performance cost as fuzzy suggestion searches are slower and
 * consume more resources.
 *
 * @member {string} [highlightPostTag] A string tag that is appended to hit
 * highlights. Must be set with HighlightPreTag. If omitted, hit highlighting
 * of suggestions is disabled.
 *
 * @member {string} [highlightPreTag] A string tag that is prepended to hit
 * highlights. Must be set with HighlightPostTag. If omitted, hit highlighting
 * of suggestions is disabled.
 *
 * @member {number} [minimumCoverage] A number between 0 and 100 indicating the
 * percentage of the index that must be covered by a suggestion query in order
 * for the query to be reported as a success. This parameter can be useful for
 * ensuring search availability even for services with only one replica. The
 * default is 80.
 *
 * @member {string} [orderBy] The comma-separated list of OData $orderby
 * expressions by which to sort the results. Each expression can be either a
 * field name or a call to the geo.distance() function. Each expression can be
 * followed by asc to indicate ascending, and desc to indicate descending. The
 * default is ascending order. Ties will be broken by the match scores of
 * documents. If no OrderBy is specified, the default sort order is descending
 * by document match score. There can be at most 32 Orderby clauses.
 *
 * @member {string} [search] The search text on which to base suggestions.
 *
 * @member {string} [searchFields] The comma-separated list of field names to
 * consider when querying for suggestions.
 *
 * @member {string} [select] The comma-separated list of fields to retrieve. If
 * unspecified, all fields marked as retrievable in the schema are included.
 *
 * @member {string} [suggesterName] The name of the suggester as specified in
 * the suggesters collection that's part of the index definition.
 *
 * @member {number} [top] The number of suggestions to retrieve. This must be a
 * value between 1 and 100. The default is to 5.
 *
 */
class SuggestParametersPayload {
  constructor() {
  }

  /**
   * Defines the metadata of SuggestParametersPayload
   *
   * @returns {object} metadata of SuggestParametersPayload
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SuggestParametersPayload',
      type: {
        name: 'Composite',
        className: 'SuggestParametersPayload',
        modelProperties: {
          filter: {
            required: false,
            serializedName: 'filter',
            type: {
              name: 'String'
            }
          },
          fuzzy: {
            required: false,
            serializedName: 'fuzzy',
            type: {
              name: 'Boolean'
            }
          },
          highlightPostTag: {
            required: false,
            serializedName: 'highlightPostTag',
            type: {
              name: 'String'
            }
          },
          highlightPreTag: {
            required: false,
            serializedName: 'highlightPreTag',
            type: {
              name: 'String'
            }
          },
          minimumCoverage: {
            required: false,
            serializedName: 'minimumCoverage',
            type: {
              name: 'Number'
            }
          },
          orderBy: {
            required: false,
            serializedName: 'orderby',
            type: {
              name: 'String'
            }
          },
          search: {
            required: false,
            serializedName: 'search',
            type: {
              name: 'String'
            }
          },
          searchFields: {
            required: false,
            serializedName: 'searchFields',
            type: {
              name: 'String'
            }
          },
          select: {
            required: false,
            serializedName: 'select',
            type: {
              name: 'String'
            }
          },
          suggesterName: {
            required: false,
            serializedName: 'suggesterName',
            type: {
              name: 'String'
            }
          },
          top: {
            required: false,
            serializedName: 'top',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = SuggestParametersPayload;
