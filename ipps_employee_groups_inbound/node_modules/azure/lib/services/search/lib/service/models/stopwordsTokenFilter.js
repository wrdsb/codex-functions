/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the StopwordsTokenFilter class.
 * @constructor
 * Removes stop words from a token stream. This token filter is implemented
 * using Apache Lucene.
 *
 * @member {array} [stopwords] The list of stopwords. This property and the
 * stopwords list property cannot both be set.
 *
 * @member {string} [stopwordsList] A predefined list of stopwords to use. This
 * property and the stopwords property cannot both be set. Default is English.
 * Possible values include: 'arabic', 'armenian', 'basque', 'brazilian',
 * 'bulgarian', 'catalan', 'czech', 'danish', 'dutch', 'english', 'finnish',
 * 'french', 'galician', 'german', 'greek', 'hindi', 'hungarian', 'indonesian',
 * 'irish', 'italian', 'latvian', 'norwegian', 'persian', 'portuguese',
 * 'romanian', 'russian', 'sorani', 'spanish', 'swedish', 'thai', 'turkish'
 *
 * @member {boolean} [ignoreCase] A value indicating whether to ignore case. If
 * true, all words are converted to lower case first. Default is false. Default
 * value: false .
 *
 * @member {boolean} [removeTrailingStopWords] A value indicating whether to
 * ignore the last search term if it's a stop word. Default is true. Default
 * value: true .
 *
 */
class StopwordsTokenFilter extends models['TokenFilter'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StopwordsTokenFilter
   *
   * @returns {object} metadata of StopwordsTokenFilter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.StopwordsTokenFilter',
      type: {
        name: 'Composite',
        className: 'StopwordsTokenFilter',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          stopwords: {
            required: false,
            serializedName: 'stopwords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          stopwordsList: {
            required: false,
            serializedName: 'stopwordsList',
            type: {
              name: 'Enum',
              allowedValues: [ 'arabic', 'armenian', 'basque', 'brazilian', 'bulgarian', 'catalan', 'czech', 'danish', 'dutch', 'english', 'finnish', 'french', 'galician', 'german', 'greek', 'hindi', 'hungarian', 'indonesian', 'irish', 'italian', 'latvian', 'norwegian', 'persian', 'portuguese', 'romanian', 'russian', 'sorani', 'spanish', 'swedish', 'thai', 'turkish' ]
            }
          },
          ignoreCase: {
            required: false,
            serializedName: 'ignoreCase',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          removeTrailingStopWords: {
            required: false,
            serializedName: 'removeTrailing',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = StopwordsTokenFilter;
