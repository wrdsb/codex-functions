/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the PhoneticTokenFilter class.
 * @constructor
 * Create tokens for phonetic matches. This token filter is implemented using
 * Apache Lucene.
 *
 * @member {string} [encoder] The phonetic encoder to use. Default is
 * "metaphone". Possible values include: 'metaphone', 'doubleMetaphone',
 * 'soundex', 'refinedSoundex', 'caverphone1', 'caverphone2', 'cologne',
 * 'nysiis', 'koelnerPhonetik', 'haasePhonetik', 'beiderMorse'
 *
 * @member {boolean} [replaceOriginalTokens] A value indicating whether encoded
 * tokens should replace original tokens. If false, encoded tokens are added as
 * synonyms. Default is true. Default value: true .
 *
 */
class PhoneticTokenFilter extends models['TokenFilter'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PhoneticTokenFilter
   *
   * @returns {object} metadata of PhoneticTokenFilter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.PhoneticTokenFilter',
      type: {
        name: 'Composite',
        className: 'PhoneticTokenFilter',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          encoder: {
            required: false,
            serializedName: 'encoder',
            type: {
              name: 'Enum',
              allowedValues: [ 'metaphone', 'doubleMetaphone', 'soundex', 'refinedSoundex', 'caverphone1', 'caverphone2', 'cologne', 'nysiis', 'koelnerPhonetik', 'haasePhonetik', 'beiderMorse' ]
            }
          },
          replaceOriginalTokens: {
            required: false,
            serializedName: 'replace',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = PhoneticTokenFilter;
