/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Get application upgrades
 *
 * @param {string} applicationName The name of the application
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationUpgrade} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(applicationName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Applications/{applicationName}/$/GetUpgradeProgress';
  requestUrl = requestUrl.replace('{applicationName}', applicationName);
  let queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationUpgrade']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Start application upgrades
 *
 * @param {string} applicationName The name of the application
 *
 * @param {object} startApplicationUpgrade The description of the start
 * application upgrade
 *
 * @param {string} [startApplicationUpgrade.name]
 *
 * @param {string} [startApplicationUpgrade.targetApplicationTypeVersion]
 *
 * @param {array} [startApplicationUpgrade.parameters]
 *
 * @param {string} [startApplicationUpgrade.upgradeKind] Possible values
 * include: 'Invalid', 'Rolling'
 *
 * @param {string} [startApplicationUpgrade.rollingUpgradeMode] Possible values
 * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
 *
 * @param {number}
 * [startApplicationUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
 *
 * @param {boolean} [startApplicationUpgrade.forceRestart]
 *
 * @param {object} [startApplicationUpgrade.monitoringPolicy]
 *
 * @param {string} [startApplicationUpgrade.monitoringPolicy.failureAction]
 *
 * @param {string}
 * [startApplicationUpgrade.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 *
 * @param {string}
 * [startApplicationUpgrade.monitoringPolicy.healthCheckStableDurationInMilliseconds]
 *
 * @param {string}
 * [startApplicationUpgrade.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 *
 * @param {string}
 * [startApplicationUpgrade.monitoringPolicy.upgradeTimeoutInMilliseconds]
 *
 * @param {string}
 * [startApplicationUpgrade.monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
 *
 * @param {object} [startApplicationUpgrade.applicationHealthPolicy]
 *
 * @param {boolean}
 * [startApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
 *
 * @param {number}
 * [startApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 *
 * @param {object}
 * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The policy of the default service type health
 *
 * @param {number}
 * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 *
 * @param {number}
 * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 *
 * @param {number}
 * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {string} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _start(applicationName, startApplicationUpgrade, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (startApplicationUpgrade === null || startApplicationUpgrade === undefined) {
      throw new Error('startApplicationUpgrade cannot be null or undefined.');
    }
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Applications/{applicationName}/$/Upgrade';
  requestUrl = requestUrl.replace('{applicationName}', applicationName);
  let queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (startApplicationUpgrade !== null && startApplicationUpgrade !== undefined) {
      let requestModelMapper = new client.models['StartApplicationUpgrade']().mapper();
      requestModel = client.serialize(requestModelMapper, startApplicationUpgrade, 'startApplicationUpgrade');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(startApplicationUpgrade, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Update application upgrades
 *
 * @param {string} applicationName The name of the application
 *
 * @param {object} updateApplicationUpgrade The description of the update
 * application upgrade
 *
 * @param {string} [updateApplicationUpgrade.name]
 *
 * @param {string} [updateApplicationUpgrade.upgradeKind]
 *
 * @param {object} [updateApplicationUpgrade.updateDescription]
 *
 * @param {string}
 * [updateApplicationUpgrade.updateDescription.rollingUpgradeMode] The mode of
 * the rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'
 *
 * @param {boolean} [updateApplicationUpgrade.updateDescription.forceRestart]
 * The flag of the force restart
 *
 * @param {string} [updateApplicationUpgrade.updateDescription.failureAction]
 * The action of the failure
 *
 * @param {number}
 * [updateApplicationUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
 * The seconds of the upgrade replica set check timeout
 *
 * @param {string}
 * [updateApplicationUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
 * The seconds of the health check wait duration
 *
 * @param {string}
 * [updateApplicationUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
 * The seconds of the health check stable duration
 *
 * @param {string}
 * [updateApplicationUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
 * The milliseconds of the health check retry timeout
 *
 * @param {string}
 * [updateApplicationUpgrade.updateDescription.upgradeTimeoutInMilliseconds]
 * The milliseconds of the upgrade timeout
 *
 * @param {string}
 * [updateApplicationUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
 * The milliseconds of the upgrade domain timeout
 *
 * @param {object} [updateApplicationUpgrade.applicationHealthPolicy]
 *
 * @param {boolean}
 * [updateApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
 *
 * @param {number}
 * [updateApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 *
 * @param {object}
 * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The policy of the default service type health
 *
 * @param {number}
 * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 *
 * @param {number}
 * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 *
 * @param {number}
 * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {string} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(applicationName, updateApplicationUpgrade, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (updateApplicationUpgrade === null || updateApplicationUpgrade === undefined) {
      throw new Error('updateApplicationUpgrade cannot be null or undefined.');
    }
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Applications/{applicationName}/$/UpdateUpgrade';
  requestUrl = requestUrl.replace('{applicationName}', applicationName);
  let queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (updateApplicationUpgrade !== null && updateApplicationUpgrade !== undefined) {
      let requestModelMapper = new client.models['UpdateApplicationUpgrade']().mapper();
      requestModel = client.serialize(requestModelMapper, updateApplicationUpgrade, 'updateApplicationUpgrade');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(updateApplicationUpgrade, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Resume application upgrades
 *
 * @param {string} applicationName The name of the application
 *
 * @param {object} resumeApplicationUpgrade The upgrade of the resume
 * application
 *
 * @param {string} [resumeApplicationUpgrade.upgradeDomainName]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {string} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _resume(applicationName, resumeApplicationUpgrade, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (resumeApplicationUpgrade === null || resumeApplicationUpgrade === undefined) {
      throw new Error('resumeApplicationUpgrade cannot be null or undefined.');
    }
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Applications/{applicationName}/$/MoveNextUpgradeDomain';
  requestUrl = requestUrl.replace('{applicationName}', applicationName);
  let queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (resumeApplicationUpgrade !== null && resumeApplicationUpgrade !== undefined) {
      let requestModelMapper = new client.models['ResumeApplicationUpgrade']().mapper();
      requestModel = client.serialize(requestModelMapper, resumeApplicationUpgrade, 'resumeApplicationUpgrade');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(resumeApplicationUpgrade, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * ApplicationUpgrades
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 * Initializes a new instance of the ApplicationUpgrades class.
 * @constructor
 *
 * @param {ServiceFabricClient} client Reference to the service client.
 */
class ApplicationUpgrades {
  constructor(client) {
    this.client = client;
    this._get = _get;
    this._start = _start;
    this._update = _update;
    this._resume = _resume;
  }

  /**
   * Get application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationUpgrade>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(applicationName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(applicationName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationUpgrade} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationUpgrade} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(applicationName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(applicationName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(applicationName, options, optionalCallback);
    }
  }

  /**
   * Start application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} startApplicationUpgrade The description of the start
   * application upgrade
   *
   * @param {string} [startApplicationUpgrade.name]
   *
   * @param {string} [startApplicationUpgrade.targetApplicationTypeVersion]
   *
   * @param {array} [startApplicationUpgrade.parameters]
   *
   * @param {string} [startApplicationUpgrade.upgradeKind] Possible values
   * include: 'Invalid', 'Rolling'
   *
   * @param {string} [startApplicationUpgrade.rollingUpgradeMode] Possible values
   * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
   *
   * @param {number}
   * [startApplicationUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
   *
   * @param {boolean} [startApplicationUpgrade.forceRestart]
   *
   * @param {object} [startApplicationUpgrade.monitoringPolicy]
   *
   * @param {string} [startApplicationUpgrade.monitoringPolicy.failureAction]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.healthCheckStableDurationInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.upgradeTimeoutInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
   *
   * @param {object} [startApplicationUpgrade.applicationHealthPolicy]
   *
   * @param {boolean}
   * [startApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   *
   * @param {object}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The policy of the default service type health
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<String>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  startWithHttpOperationResponse(applicationName, startApplicationUpgrade, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._start(applicationName, startApplicationUpgrade, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Start application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} startApplicationUpgrade The description of the start
   * application upgrade
   *
   * @param {string} [startApplicationUpgrade.name]
   *
   * @param {string} [startApplicationUpgrade.targetApplicationTypeVersion]
   *
   * @param {array} [startApplicationUpgrade.parameters]
   *
   * @param {string} [startApplicationUpgrade.upgradeKind] Possible values
   * include: 'Invalid', 'Rolling'
   *
   * @param {string} [startApplicationUpgrade.rollingUpgradeMode] Possible values
   * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
   *
   * @param {number}
   * [startApplicationUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
   *
   * @param {boolean} [startApplicationUpgrade.forceRestart]
   *
   * @param {object} [startApplicationUpgrade.monitoringPolicy]
   *
   * @param {string} [startApplicationUpgrade.monitoringPolicy.failureAction]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.healthCheckStableDurationInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.upgradeTimeoutInMilliseconds]
   *
   * @param {string}
   * [startApplicationUpgrade.monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
   *
   * @param {object} [startApplicationUpgrade.applicationHealthPolicy]
   *
   * @param {boolean}
   * [startApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   *
   * @param {object}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The policy of the default service type health
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
   *
   * @param {number}
   * [startApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {String} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  start(applicationName, startApplicationUpgrade, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._start(applicationName, startApplicationUpgrade, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._start(applicationName, startApplicationUpgrade, options, optionalCallback);
    }
  }

  /**
   * Update application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} updateApplicationUpgrade The description of the update
   * application upgrade
   *
   * @param {string} [updateApplicationUpgrade.name]
   *
   * @param {string} [updateApplicationUpgrade.upgradeKind]
   *
   * @param {object} [updateApplicationUpgrade.updateDescription]
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.rollingUpgradeMode] The mode of
   * the rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
   * 'UnmonitoredManual', 'Monitored'
   *
   * @param {boolean} [updateApplicationUpgrade.updateDescription.forceRestart]
   * The flag of the force restart
   *
   * @param {string} [updateApplicationUpgrade.updateDescription.failureAction]
   * The action of the failure
   *
   * @param {number}
   * [updateApplicationUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
   * The seconds of the upgrade replica set check timeout
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
   * The seconds of the health check wait duration
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
   * The seconds of the health check stable duration
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
   * The milliseconds of the health check retry timeout
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.upgradeTimeoutInMilliseconds]
   * The milliseconds of the upgrade timeout
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
   * The milliseconds of the upgrade domain timeout
   *
   * @param {object} [updateApplicationUpgrade.applicationHealthPolicy]
   *
   * @param {boolean}
   * [updateApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   *
   * @param {object}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The policy of the default service type health
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<String>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(applicationName, updateApplicationUpgrade, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(applicationName, updateApplicationUpgrade, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} updateApplicationUpgrade The description of the update
   * application upgrade
   *
   * @param {string} [updateApplicationUpgrade.name]
   *
   * @param {string} [updateApplicationUpgrade.upgradeKind]
   *
   * @param {object} [updateApplicationUpgrade.updateDescription]
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.rollingUpgradeMode] The mode of
   * the rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
   * 'UnmonitoredManual', 'Monitored'
   *
   * @param {boolean} [updateApplicationUpgrade.updateDescription.forceRestart]
   * The flag of the force restart
   *
   * @param {string} [updateApplicationUpgrade.updateDescription.failureAction]
   * The action of the failure
   *
   * @param {number}
   * [updateApplicationUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
   * The seconds of the upgrade replica set check timeout
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
   * The seconds of the health check wait duration
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
   * The seconds of the health check stable duration
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
   * The milliseconds of the health check retry timeout
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.upgradeTimeoutInMilliseconds]
   * The milliseconds of the upgrade timeout
   *
   * @param {string}
   * [updateApplicationUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
   * The milliseconds of the upgrade domain timeout
   *
   * @param {object} [updateApplicationUpgrade.applicationHealthPolicy]
   *
   * @param {boolean}
   * [updateApplicationUpgrade.applicationHealthPolicy.considerWarningAsError]
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   *
   * @param {object}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The policy of the default service type health
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
   *
   * @param {number}
   * [updateApplicationUpgrade.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {String} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(applicationName, updateApplicationUpgrade, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(applicationName, updateApplicationUpgrade, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(applicationName, updateApplicationUpgrade, options, optionalCallback);
    }
  }

  /**
   * Resume application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} resumeApplicationUpgrade The upgrade of the resume
   * application
   *
   * @param {string} [resumeApplicationUpgrade.upgradeDomainName]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<String>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  resumeWithHttpOperationResponse(applicationName, resumeApplicationUpgrade, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._resume(applicationName, resumeApplicationUpgrade, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Resume application upgrades
   *
   * @param {string} applicationName The name of the application
   *
   * @param {object} resumeApplicationUpgrade The upgrade of the resume
   * application
   *
   * @param {string} [resumeApplicationUpgrade.upgradeDomainName]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {String} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  resume(applicationName, resumeApplicationUpgrade, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._resume(applicationName, resumeApplicationUpgrade, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._resume(applicationName, resumeApplicationUpgrade, options, optionalCallback);
    }
  }

}

module.exports = ApplicationUpgrades;
