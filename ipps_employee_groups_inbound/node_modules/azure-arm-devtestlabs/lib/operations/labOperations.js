/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * List labs in a subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] The filter to apply on the operation.
 *
 * @param {number} [options.top] The maximum number of resources to return from
 * the operation.
 *
 * @param {string} [options.orderBy] The ordering expression for the results,
 * using OData notation.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationLab} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBySubscription(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let orderBy = (options && options.orderBy !== undefined) ? options.orderBy : undefined;
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (orderBy !== null && orderBy !== undefined && typeof orderBy.valueOf() !== 'string') {
      throw new Error('orderBy must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (orderBy !== null && orderBy !== undefined) {
    queryParameters.push('$orderBy=' + encodeURIComponent(orderBy));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationLab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List labs in a resource group.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] The filter to apply on the operation.
 *
 * @param {number} [options.top] The maximum number of resources to return from
 * the operation.
 *
 * @param {string} [options.orderBy] The ordering expression for the results,
 * using OData notation.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationLab} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let orderBy = (options && options.orderBy !== undefined) ? options.orderBy : undefined;
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (orderBy !== null && orderBy !== undefined && typeof orderBy.valueOf() !== 'string') {
      throw new Error('orderBy must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (orderBy !== null && orderBy !== undefined) {
    queryParameters.push('$orderBy=' + encodeURIComponent(orderBy));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationLab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get lab.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Lab} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getResource(resourceGroupName, name, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Lab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Create or replace an existing Lab. This operation can take a while to
 * complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} lab
 *
 * @param {string} [lab.defaultStorageAccount] The lab's default storage
 * account.
 *
 * @param {string} [lab.artifactsStorageAccount] The artifact storage account
 * of the lab.
 *
 * @param {string} [lab.vaultName] The name of the key vault of the lab.
 *
 * @param {string} [lab.labStorageType] The type of the lab storage. Possible
 * values include: 'Standard', 'Premium'
 *
 * @param {date} [lab.createdDate] The creation date of the lab.
 *
 * @param {string} [lab.provisioningState] The provisioning status of the
 * resource.
 *
 * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 *
 * @param {string} [lab.id] The identifier of the resource.
 *
 * @param {string} [lab.name] The name of the resource.
 *
 * @param {string} [lab.type] The type of the resource.
 *
 * @param {string} [lab.location] The location of the resource.
 *
 * @param {object} [lab.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Lab} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdateResource(resourceGroupName, name, lab, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdateResource(resourceGroupName, name, lab, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Lab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Delete lab. This operation can take a while to complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteResource(resourceGroupName, name, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteResource(resourceGroupName, name, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Modify properties of labs.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} lab
 *
 * @param {string} [lab.defaultStorageAccount] The lab's default storage
 * account.
 *
 * @param {string} [lab.artifactsStorageAccount] The artifact storage account
 * of the lab.
 *
 * @param {string} [lab.vaultName] The name of the key vault of the lab.
 *
 * @param {string} [lab.labStorageType] The type of the lab storage. Possible
 * values include: 'Standard', 'Premium'
 *
 * @param {date} [lab.createdDate] The creation date of the lab.
 *
 * @param {string} [lab.provisioningState] The provisioning status of the
 * resource.
 *
 * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 *
 * @param {string} [lab.id] The identifier of the resource.
 *
 * @param {string} [lab.name] The name of the resource.
 *
 * @param {string} [lab.type] The type of the resource.
 *
 * @param {string} [lab.location] The location of the resource.
 *
 * @param {object} [lab.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Lab} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchResource(resourceGroupName, name, lab, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (lab === null || lab === undefined) {
      throw new Error('lab cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (lab !== null && lab !== undefined) {
      let requestModelMapper = new client.models['Lab']().mapper();
      requestModel = client.serialize(requestModelMapper, lab, 'lab');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(lab, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Lab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Create virtual machines in a Lab. This operation can take a while to
 * complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} labVirtualMachine
 *
 * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
 *
 * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
 * the owner of the virtual machine.
 *
 * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
 * the creator of the virtual machine.
 *
 * @param {string} [labVirtualMachine.createdByUser] The email address of
 * creator of the virtual machine.
 *
 * @param {string} [labVirtualMachine.computeId] The resource identifier
 * (Microsoft.Compute) of the virtual machine.
 *
 * @param {string} [labVirtualMachine.customImageId] The custom image
 * identifier of the virtual machine.
 *
 * @param {string} [labVirtualMachine.osType] The OS type of the virtual
 * machine.
 *
 * @param {string} [labVirtualMachine.size] The size of the virtual machine.
 *
 * @param {string} [labVirtualMachine.userName] The user name of the virtual
 * machine.
 *
 * @param {string} [labVirtualMachine.password] The password of the virtual
 * machine administrator.
 *
 * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
 * machine administrator.
 *
 * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] A value
 * indicating whether this virtual machine uses an SSH key for authentication.
 *
 * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
 * the virtual machine.
 *
 * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
 * virtual machine.
 *
 * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
 * network identifier of the virtual machine.
 *
 * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
 * whether the virtual machine is to be created without a public IP address.
 *
 * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
 * on the virtual machine.
 *
 * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
 * deployment status for the virtual machine.
 *
 * @param {string}
 * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
 * status of the artifact.
 *
 * @param {number}
 * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
 * count of the artifacts that were successfully applied.
 *
 * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
 * The total count of the artifacts that were tentatively applied.
 *
 * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
 * Azure Marketplace image reference of the virtual machine.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
 * the gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
 * publisher of the gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
 * gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
 * of the gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.version] The
 * version of the gallery image.
 *
 * @param {string} [labVirtualMachine.provisioningState] The provisioning
 * status of the resource.
 *
 * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
 * identifier of a resource (Guid).
 *
 * @param {string} [labVirtualMachine.id] The identifier of the resource.
 *
 * @param {string} [labVirtualMachine.name] The name of the resource.
 *
 * @param {string} [labVirtualMachine.type] The type of the resource.
 *
 * @param {string} [labVirtualMachine.location] The location of the resource.
 *
 * @param {object} [labVirtualMachine.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createEnvironment(resourceGroupName, name, labVirtualMachine, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateEnvironment(resourceGroupName, name, labVirtualMachine, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Generate a URI for uploading custom disk images to a Lab.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} generateUploadUriParameter
 *
 * @param {string} [generateUploadUriParameter.blobName] The blob name of the
 * upload URI.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GenerateUploadUriResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _generateUploadUri(resourceGroupName, name, generateUploadUriParameter, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (generateUploadUriParameter === null || generateUploadUriParameter === undefined) {
      throw new Error('generateUploadUriParameter cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (generateUploadUriParameter !== null && generateUploadUriParameter !== undefined) {
      let requestModelMapper = new client.models['GenerateUploadUriParameter']().mapper();
      requestModel = client.serialize(requestModelMapper, generateUploadUriParameter, 'generateUploadUriParameter');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(generateUploadUriParameter, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GenerateUploadUriResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List disk images available for custom image creation.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationLabVhd} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listVhds(resourceGroupName, name, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationLabVhd']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Create or replace an existing Lab. This operation can take a while to
 * complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} lab
 *
 * @param {string} [lab.defaultStorageAccount] The lab's default storage
 * account.
 *
 * @param {string} [lab.artifactsStorageAccount] The artifact storage account
 * of the lab.
 *
 * @param {string} [lab.vaultName] The name of the key vault of the lab.
 *
 * @param {string} [lab.labStorageType] The type of the lab storage. Possible
 * values include: 'Standard', 'Premium'
 *
 * @param {date} [lab.createdDate] The creation date of the lab.
 *
 * @param {string} [lab.provisioningState] The provisioning status of the
 * resource.
 *
 * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 *
 * @param {string} [lab.id] The identifier of the resource.
 *
 * @param {string} [lab.name] The name of the resource.
 *
 * @param {string} [lab.type] The type of the resource.
 *
 * @param {string} [lab.location] The location of the resource.
 *
 * @param {object} [lab.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Lab} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdateResource(resourceGroupName, name, lab, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (lab === null || lab === undefined) {
      throw new Error('lab cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (lab !== null && lab !== undefined) {
      let requestModelMapper = new client.models['Lab']().mapper();
      requestModel = client.serialize(requestModelMapper, lab, 'lab');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(lab, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Lab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Lab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Delete lab. This operation can take a while to complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteResource(resourceGroupName, name, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Create virtual machines in a Lab. This operation can take a while to
 * complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} name The name of the lab.
 *
 * @param {object} labVirtualMachine
 *
 * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
 *
 * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
 * the owner of the virtual machine.
 *
 * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
 * the creator of the virtual machine.
 *
 * @param {string} [labVirtualMachine.createdByUser] The email address of
 * creator of the virtual machine.
 *
 * @param {string} [labVirtualMachine.computeId] The resource identifier
 * (Microsoft.Compute) of the virtual machine.
 *
 * @param {string} [labVirtualMachine.customImageId] The custom image
 * identifier of the virtual machine.
 *
 * @param {string} [labVirtualMachine.osType] The OS type of the virtual
 * machine.
 *
 * @param {string} [labVirtualMachine.size] The size of the virtual machine.
 *
 * @param {string} [labVirtualMachine.userName] The user name of the virtual
 * machine.
 *
 * @param {string} [labVirtualMachine.password] The password of the virtual
 * machine administrator.
 *
 * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
 * machine administrator.
 *
 * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] A value
 * indicating whether this virtual machine uses an SSH key for authentication.
 *
 * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
 * the virtual machine.
 *
 * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
 * virtual machine.
 *
 * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
 * network identifier of the virtual machine.
 *
 * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
 * whether the virtual machine is to be created without a public IP address.
 *
 * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
 * on the virtual machine.
 *
 * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
 * deployment status for the virtual machine.
 *
 * @param {string}
 * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
 * status of the artifact.
 *
 * @param {number}
 * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
 * count of the artifacts that were successfully applied.
 *
 * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
 * The total count of the artifacts that were tentatively applied.
 *
 * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
 * Azure Marketplace image reference of the virtual machine.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
 * the gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
 * publisher of the gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
 * gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
 * of the gallery image.
 *
 * @param {string} [labVirtualMachine.galleryImageReference.version] The
 * version of the gallery image.
 *
 * @param {string} [labVirtualMachine.provisioningState] The provisioning
 * status of the resource.
 *
 * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
 * identifier of a resource (Guid).
 *
 * @param {string} [labVirtualMachine.id] The identifier of the resource.
 *
 * @param {string} [labVirtualMachine.name] The name of the resource.
 *
 * @param {string} [labVirtualMachine.type] The type of the resource.
 *
 * @param {string} [labVirtualMachine.location] The location of the resource.
 *
 * @param {object} [labVirtualMachine.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateEnvironment(resourceGroupName, name, labVirtualMachine, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (labVirtualMachine === null || labVirtualMachine === undefined) {
      throw new Error('labVirtualMachine cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (labVirtualMachine !== null && labVirtualMachine !== undefined) {
      let requestModelMapper = new client.models['LabVirtualMachine']().mapper();
      requestModel = client.serialize(requestModelMapper, labVirtualMachine, 'labVirtualMachine');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(labVirtualMachine, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List labs in a subscription.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationLab} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBySubscriptionNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationLab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List labs in a resource group.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationLab} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationLab']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List disk images available for custom image creation.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationLabVhd} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listVhdsNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationLabVhd']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * LabOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 * Initializes a new instance of the LabOperations class.
 * @constructor
 *
 * @param {DevTestLabsClient} client Reference to the service client.
 */
class LabOperations {
  constructor(client) {
    this.client = client;
    this._listBySubscription = _listBySubscription;
    this._listByResourceGroup = _listByResourceGroup;
    this._getResource = _getResource;
    this._createOrUpdateResource = _createOrUpdateResource;
    this._deleteResource = _deleteResource;
    this._patchResource = _patchResource;
    this._createEnvironment = _createEnvironment;
    this._generateUploadUri = _generateUploadUri;
    this._listVhds = _listVhds;
    this._beginCreateOrUpdateResource = _beginCreateOrUpdateResource;
    this._beginDeleteResource = _beginDeleteResource;
    this._beginCreateEnvironment = _beginCreateEnvironment;
    this._listBySubscriptionNext = _listBySubscriptionNext;
    this._listByResourceGroupNext = _listByResourceGroupNext;
    this._listVhdsNext = _listVhdsNext;
  }

  /**
   * List labs in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] The filter to apply on the operation.
   *
   * @param {number} [options.top] The maximum number of resources to return from
   * the operation.
   *
   * @param {string} [options.orderBy] The ordering expression for the results,
   * using OData notation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBySubscriptionWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBySubscription(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List labs in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] The filter to apply on the operation.
   *
   * @param {number} [options.top] The maximum number of resources to return from
   * the operation.
   *
   * @param {string} [options.orderBy] The ordering expression for the results,
   * using OData notation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationLab} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBySubscription(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBySubscription(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBySubscription(options, optionalCallback);
    }
  }

  /**
   * List labs in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] The filter to apply on the operation.
   *
   * @param {number} [options.top] The maximum number of resources to return from
   * the operation.
   *
   * @param {string} [options.orderBy] The ordering expression for the results,
   * using OData notation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List labs in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] The filter to apply on the operation.
   *
   * @param {number} [options.top] The maximum number of resources to return from
   * the operation.
   *
   * @param {string} [options.orderBy] The ordering expression for the results,
   * using OData notation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationLab} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Get lab.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getResourceWithHttpOperationResponse(resourceGroupName, name, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getResource(resourceGroupName, name, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get lab.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Lab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Lab} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getResource(resourceGroupName, name, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getResource(resourceGroupName, name, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getResource(resourceGroupName, name, options, optionalCallback);
    }
  }

  /**
   * Create or replace an existing Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} lab
   *
   * @param {string} [lab.defaultStorageAccount] The lab's default storage
   * account.
   *
   * @param {string} [lab.artifactsStorageAccount] The artifact storage account
   * of the lab.
   *
   * @param {string} [lab.vaultName] The name of the key vault of the lab.
   *
   * @param {string} [lab.labStorageType] The type of the lab storage. Possible
   * values include: 'Standard', 'Premium'
   *
   * @param {date} [lab.createdDate] The creation date of the lab.
   *
   * @param {string} [lab.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   *
   * @param {string} [lab.id] The identifier of the resource.
   *
   * @param {string} [lab.name] The name of the resource.
   *
   * @param {string} [lab.type] The type of the resource.
   *
   * @param {string} [lab.location] The location of the resource.
   *
   * @param {object} [lab.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateResourceWithHttpOperationResponse(resourceGroupName, name, lab, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdateResource(resourceGroupName, name, lab, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or replace an existing Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} lab
   *
   * @param {string} [lab.defaultStorageAccount] The lab's default storage
   * account.
   *
   * @param {string} [lab.artifactsStorageAccount] The artifact storage account
   * of the lab.
   *
   * @param {string} [lab.vaultName] The name of the key vault of the lab.
   *
   * @param {string} [lab.labStorageType] The type of the lab storage. Possible
   * values include: 'Standard', 'Premium'
   *
   * @param {date} [lab.createdDate] The creation date of the lab.
   *
   * @param {string} [lab.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   *
   * @param {string} [lab.id] The identifier of the resource.
   *
   * @param {string} [lab.name] The name of the resource.
   *
   * @param {string} [lab.type] The type of the resource.
   *
   * @param {string} [lab.location] The location of the resource.
   *
   * @param {object} [lab.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Lab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Lab} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateResource(resourceGroupName, name, lab, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdateResource(resourceGroupName, name, lab, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdateResource(resourceGroupName, name, lab, options, optionalCallback);
    }
  }

  /**
   * Delete lab. This operation can take a while to complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteResourceWithHttpOperationResponse(resourceGroupName, name, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteResource(resourceGroupName, name, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete lab. This operation can take a while to complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteResource(resourceGroupName, name, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteResource(resourceGroupName, name, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteResource(resourceGroupName, name, options, optionalCallback);
    }
  }

  /**
   * Modify properties of labs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} lab
   *
   * @param {string} [lab.defaultStorageAccount] The lab's default storage
   * account.
   *
   * @param {string} [lab.artifactsStorageAccount] The artifact storage account
   * of the lab.
   *
   * @param {string} [lab.vaultName] The name of the key vault of the lab.
   *
   * @param {string} [lab.labStorageType] The type of the lab storage. Possible
   * values include: 'Standard', 'Premium'
   *
   * @param {date} [lab.createdDate] The creation date of the lab.
   *
   * @param {string} [lab.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   *
   * @param {string} [lab.id] The identifier of the resource.
   *
   * @param {string} [lab.name] The name of the resource.
   *
   * @param {string} [lab.type] The type of the resource.
   *
   * @param {string} [lab.location] The location of the resource.
   *
   * @param {object} [lab.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchResourceWithHttpOperationResponse(resourceGroupName, name, lab, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchResource(resourceGroupName, name, lab, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Modify properties of labs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} lab
   *
   * @param {string} [lab.defaultStorageAccount] The lab's default storage
   * account.
   *
   * @param {string} [lab.artifactsStorageAccount] The artifact storage account
   * of the lab.
   *
   * @param {string} [lab.vaultName] The name of the key vault of the lab.
   *
   * @param {string} [lab.labStorageType] The type of the lab storage. Possible
   * values include: 'Standard', 'Premium'
   *
   * @param {date} [lab.createdDate] The creation date of the lab.
   *
   * @param {string} [lab.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   *
   * @param {string} [lab.id] The identifier of the resource.
   *
   * @param {string} [lab.name] The name of the resource.
   *
   * @param {string} [lab.type] The type of the resource.
   *
   * @param {string} [lab.location] The location of the resource.
   *
   * @param {object} [lab.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Lab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Lab} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchResource(resourceGroupName, name, lab, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchResource(resourceGroupName, name, lab, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchResource(resourceGroupName, name, lab, options, optionalCallback);
    }
  }

  /**
   * Create virtual machines in a Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} labVirtualMachine
   *
   * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
   *
   * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
   * the owner of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
   * the creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.computeId] The resource identifier
   * (Microsoft.Compute) of the virtual machine.
   *
   * @param {string} [labVirtualMachine.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [labVirtualMachine.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.size] The size of the virtual machine.
   *
   * @param {string} [labVirtualMachine.userName] The user name of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.password] The password of the virtual
   * machine administrator.
   *
   * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] A value
   * indicating whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
   * the virtual machine.
   *
   * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
   * virtual machine.
   *
   * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
   * on the virtual machine.
   *
   * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
   * deployment status for the virtual machine.
   *
   * @param {string}
   * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
   * status of the artifact.
   *
   * @param {number}
   * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
   * The total count of the artifacts that were tentatively applied.
   *
   * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
   * the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
   * gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
   * of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {string} [labVirtualMachine.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
   * identifier of a resource (Guid).
   *
   * @param {string} [labVirtualMachine.id] The identifier of the resource.
   *
   * @param {string} [labVirtualMachine.name] The name of the resource.
   *
   * @param {string} [labVirtualMachine.type] The type of the resource.
   *
   * @param {string} [labVirtualMachine.location] The location of the resource.
   *
   * @param {object} [labVirtualMachine.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createEnvironmentWithHttpOperationResponse(resourceGroupName, name, labVirtualMachine, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createEnvironment(resourceGroupName, name, labVirtualMachine, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create virtual machines in a Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} labVirtualMachine
   *
   * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
   *
   * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
   * the owner of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
   * the creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.computeId] The resource identifier
   * (Microsoft.Compute) of the virtual machine.
   *
   * @param {string} [labVirtualMachine.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [labVirtualMachine.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.size] The size of the virtual machine.
   *
   * @param {string} [labVirtualMachine.userName] The user name of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.password] The password of the virtual
   * machine administrator.
   *
   * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] A value
   * indicating whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
   * the virtual machine.
   *
   * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
   * virtual machine.
   *
   * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
   * on the virtual machine.
   *
   * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
   * deployment status for the virtual machine.
   *
   * @param {string}
   * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
   * status of the artifact.
   *
   * @param {number}
   * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
   * The total count of the artifacts that were tentatively applied.
   *
   * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
   * the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
   * gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
   * of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {string} [labVirtualMachine.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
   * identifier of a resource (Guid).
   *
   * @param {string} [labVirtualMachine.id] The identifier of the resource.
   *
   * @param {string} [labVirtualMachine.name] The name of the resource.
   *
   * @param {string} [labVirtualMachine.type] The type of the resource.
   *
   * @param {string} [labVirtualMachine.location] The location of the resource.
   *
   * @param {object} [labVirtualMachine.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createEnvironment(resourceGroupName, name, labVirtualMachine, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createEnvironment(resourceGroupName, name, labVirtualMachine, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createEnvironment(resourceGroupName, name, labVirtualMachine, options, optionalCallback);
    }
  }

  /**
   * Generate a URI for uploading custom disk images to a Lab.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} generateUploadUriParameter
   *
   * @param {string} [generateUploadUriParameter.blobName] The blob name of the
   * upload URI.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GenerateUploadUriResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  generateUploadUriWithHttpOperationResponse(resourceGroupName, name, generateUploadUriParameter, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._generateUploadUri(resourceGroupName, name, generateUploadUriParameter, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Generate a URI for uploading custom disk images to a Lab.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} generateUploadUriParameter
   *
   * @param {string} [generateUploadUriParameter.blobName] The blob name of the
   * upload URI.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GenerateUploadUriResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GenerateUploadUriResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  generateUploadUri(resourceGroupName, name, generateUploadUriParameter, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._generateUploadUri(resourceGroupName, name, generateUploadUriParameter, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._generateUploadUri(resourceGroupName, name, generateUploadUriParameter, options, optionalCallback);
    }
  }

  /**
   * List disk images available for custom image creation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationLabVhd>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listVhdsWithHttpOperationResponse(resourceGroupName, name, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listVhds(resourceGroupName, name, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List disk images available for custom image creation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationLabVhd} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationLabVhd} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listVhds(resourceGroupName, name, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listVhds(resourceGroupName, name, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listVhds(resourceGroupName, name, options, optionalCallback);
    }
  }

  /**
   * Create or replace an existing Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} lab
   *
   * @param {string} [lab.defaultStorageAccount] The lab's default storage
   * account.
   *
   * @param {string} [lab.artifactsStorageAccount] The artifact storage account
   * of the lab.
   *
   * @param {string} [lab.vaultName] The name of the key vault of the lab.
   *
   * @param {string} [lab.labStorageType] The type of the lab storage. Possible
   * values include: 'Standard', 'Premium'
   *
   * @param {date} [lab.createdDate] The creation date of the lab.
   *
   * @param {string} [lab.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   *
   * @param {string} [lab.id] The identifier of the resource.
   *
   * @param {string} [lab.name] The name of the resource.
   *
   * @param {string} [lab.type] The type of the resource.
   *
   * @param {string} [lab.location] The location of the resource.
   *
   * @param {object} [lab.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateResourceWithHttpOperationResponse(resourceGroupName, name, lab, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdateResource(resourceGroupName, name, lab, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or replace an existing Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} lab
   *
   * @param {string} [lab.defaultStorageAccount] The lab's default storage
   * account.
   *
   * @param {string} [lab.artifactsStorageAccount] The artifact storage account
   * of the lab.
   *
   * @param {string} [lab.vaultName] The name of the key vault of the lab.
   *
   * @param {string} [lab.labStorageType] The type of the lab storage. Possible
   * values include: 'Standard', 'Premium'
   *
   * @param {date} [lab.createdDate] The creation date of the lab.
   *
   * @param {string} [lab.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   *
   * @param {string} [lab.id] The identifier of the resource.
   *
   * @param {string} [lab.name] The name of the resource.
   *
   * @param {string} [lab.type] The type of the resource.
   *
   * @param {string} [lab.location] The location of the resource.
   *
   * @param {object} [lab.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Lab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Lab} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdateResource(resourceGroupName, name, lab, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdateResource(resourceGroupName, name, lab, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdateResource(resourceGroupName, name, lab, options, optionalCallback);
    }
  }

  /**
   * Delete lab. This operation can take a while to complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteResourceWithHttpOperationResponse(resourceGroupName, name, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteResource(resourceGroupName, name, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete lab. This operation can take a while to complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteResource(resourceGroupName, name, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteResource(resourceGroupName, name, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteResource(resourceGroupName, name, options, optionalCallback);
    }
  }

  /**
   * Create virtual machines in a Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} labVirtualMachine
   *
   * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
   *
   * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
   * the owner of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
   * the creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.computeId] The resource identifier
   * (Microsoft.Compute) of the virtual machine.
   *
   * @param {string} [labVirtualMachine.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [labVirtualMachine.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.size] The size of the virtual machine.
   *
   * @param {string} [labVirtualMachine.userName] The user name of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.password] The password of the virtual
   * machine administrator.
   *
   * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] A value
   * indicating whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
   * the virtual machine.
   *
   * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
   * virtual machine.
   *
   * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
   * on the virtual machine.
   *
   * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
   * deployment status for the virtual machine.
   *
   * @param {string}
   * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
   * status of the artifact.
   *
   * @param {number}
   * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
   * The total count of the artifacts that were tentatively applied.
   *
   * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
   * the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
   * gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
   * of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {string} [labVirtualMachine.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
   * identifier of a resource (Guid).
   *
   * @param {string} [labVirtualMachine.id] The identifier of the resource.
   *
   * @param {string} [labVirtualMachine.name] The name of the resource.
   *
   * @param {string} [labVirtualMachine.type] The type of the resource.
   *
   * @param {string} [labVirtualMachine.location] The location of the resource.
   *
   * @param {object} [labVirtualMachine.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateEnvironmentWithHttpOperationResponse(resourceGroupName, name, labVirtualMachine, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateEnvironment(resourceGroupName, name, labVirtualMachine, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create virtual machines in a Lab. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} name The name of the lab.
   *
   * @param {object} labVirtualMachine
   *
   * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
   *
   * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
   * the owner of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
   * the creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {string} [labVirtualMachine.computeId] The resource identifier
   * (Microsoft.Compute) of the virtual machine.
   *
   * @param {string} [labVirtualMachine.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [labVirtualMachine.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.size] The size of the virtual machine.
   *
   * @param {string} [labVirtualMachine.userName] The user name of the virtual
   * machine.
   *
   * @param {string} [labVirtualMachine.password] The password of the virtual
   * machine administrator.
   *
   * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] A value
   * indicating whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
   * the virtual machine.
   *
   * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
   * virtual machine.
   *
   * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
   * on the virtual machine.
   *
   * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
   * deployment status for the virtual machine.
   *
   * @param {string}
   * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
   * status of the artifact.
   *
   * @param {number}
   * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
   * The total count of the artifacts that were tentatively applied.
   *
   * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
   * the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
   * gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
   * of the gallery image.
   *
   * @param {string} [labVirtualMachine.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {string} [labVirtualMachine.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
   * identifier of a resource (Guid).
   *
   * @param {string} [labVirtualMachine.id] The identifier of the resource.
   *
   * @param {string} [labVirtualMachine.name] The name of the resource.
   *
   * @param {string} [labVirtualMachine.type] The type of the resource.
   *
   * @param {string} [labVirtualMachine.location] The location of the resource.
   *
   * @param {object} [labVirtualMachine.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateEnvironment(resourceGroupName, name, labVirtualMachine, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateEnvironment(resourceGroupName, name, labVirtualMachine, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateEnvironment(resourceGroupName, name, labVirtualMachine, options, optionalCallback);
    }
  }

  /**
   * List labs in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBySubscriptionNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBySubscriptionNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List labs in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationLab} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBySubscriptionNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBySubscriptionNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBySubscriptionNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * List labs in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List labs in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationLab} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * List disk images available for custom image creation.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationLabVhd>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listVhdsNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listVhdsNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List disk images available for custom image creation.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationLabVhd} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationLabVhd} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listVhdsNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listVhdsNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listVhdsNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = LabOperations;
