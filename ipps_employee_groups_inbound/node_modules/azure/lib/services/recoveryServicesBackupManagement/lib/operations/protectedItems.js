/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Provides a pageable list of all items in a subscription, that can be
 * protected.
 *
 * @param {string} vaultName The name of the Recovery Services vault.
 *
 * @param {string} resourceGroupName The name of the resource group associated
 * with the Recovery Services vault.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter]  itemType eq { VM , FileFolder , AzureSqlDb
 * , SQLDB , Exchange , Sharepoint , DPMUnknown } and providerType eq {
 * AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql } and policyName eq
 * {policyname} and containerName eq {containername} and backupManagementType
 * eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
 *
 * @param {string} [options.skipToken]  The Skip Token filter.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ProtectedItemResourceList} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(vaultName, resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let skipToken = (options && options.skipToken !== undefined) ? options.skipToken : undefined;
  let apiVersion = '2016-06-01';
  // Validate
  try {
    if (vaultName === null || vaultName === undefined || typeof vaultName.valueOf() !== 'string') {
      throw new Error('vaultName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (skipToken !== null && skipToken !== undefined && typeof skipToken.valueOf() !== 'string') {
      throw new Error('skipToken must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupProtectedItems';
  requestUrl = requestUrl.replace('{vaultName}', encodeURIComponent(vaultName));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (skipToken !== null && skipToken !== undefined) {
    queryParameters.push('$skipToken=' + encodeURIComponent(skipToken));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ProtectedItemResourceList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Provides the details of the backup item. This is an asynchronous operation.
 * To know the status of the operation, call the GetItemOperationResult API.
 *
 * @param {string} vaultName The name of the Recovery Services vault.
 *
 * @param {string} resourceGroupName The name of the resource group associated
 * with the Recovery Services vault.
 *
 * @param {string} fabricName The fabric name associated with the backup item.
 *
 * @param {string} containerName The container name associated with the backup
 * item.
 *
 * @param {string} protectedItemName The backup item name used in this GET
 * operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] expand eq {extendedinfo}. This filter
 * enables you to choose (or filter) specific items in the list of backup
 * items.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ProtectedItemResource} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let apiVersion = '2016-06-01';
  // Validate
  try {
    if (vaultName === null || vaultName === undefined || typeof vaultName.valueOf() !== 'string') {
      throw new Error('vaultName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (fabricName === null || fabricName === undefined || typeof fabricName.valueOf() !== 'string') {
      throw new Error('fabricName cannot be null or undefined and it must be of type string.');
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (protectedItemName === null || protectedItemName === undefined || typeof protectedItemName.valueOf() !== 'string') {
      throw new Error('protectedItemName cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}';
  requestUrl = requestUrl.replace('{vaultName}', encodeURIComponent(vaultName));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{fabricName}', encodeURIComponent(fabricName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{protectedItemName}', encodeURIComponent(protectedItemName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ProtectedItemResource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * This operation enables an item to be backed up, or modifies the existing
 * backup policy information for an item that has been backed up. This is an
 * asynchronous operation. To learn the status of the operation, call the
 * GetItemOperationResult API.
 *
 * @param {string} vaultName The name of the Recovery Services vault.
 *
 * @param {string} resourceGroupName The name of the resource group associated
 * with the Recovery Services vault.
 *
 * @param {string} fabricName The fabric name associated with the backup item.
 *
 * @param {string} containerName The container name associated with the backup
 * item.
 *
 * @param {string} protectedItemName The name of the backup item.
 *
 * @param {object} resourceProtectedItem The resource backup item.
 *
 * @param {object} [resourceProtectedItem.properties]
 *
 * @param {string} [resourceProtectedItem.properties.backupManagementType] The
 * backup managemenent type associated with the backup item. Possible values
 * include: 'Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer',
 * 'AzureSql'
 *
 * @param {string} [resourceProtectedItem.properties.workloadType] The workload
 * type for this item. Possible values include: 'Invalid', 'VM', 'FileFolder',
 * 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'DPMUnknown'
 *
 * @param {string} [resourceProtectedItem.properties.sourceResourceId] The ID
 * of the resource to be backed up.
 *
 * @param {string} [resourceProtectedItem.properties.policyId] The ID of the
 * backup policy associated with this backup item.
 *
 * @param {date} [resourceProtectedItem.properties.lastRecoveryPoint] The
 * timestamp when the most recent backup copy was created for this backup item.
 *
 * @param {string} resourceProtectedItem.properties.protectedItemType
 * Polymorphic Discriminator
 *
 * @param {string} [resourceProtectedItem.id] Resource ID represents the
 * complete path to the resource.
 *
 * @param {string} [resourceProtectedItem.name] Resource name associated with
 * the resource.
 *
 * @param {string} [resourceProtectedItem.type] Resource type represents the
 * complete path of the form Namespace/ResourceType/ResourceType/...
 *
 * @param {string} [resourceProtectedItem.location] Resource location.
 *
 * @param {object} [resourceProtectedItem.tags] Resource tags.
 *
 * @param {string} [resourceProtectedItem.eTag] Optional ETag.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, resourceProtectedItem, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2016-06-01';
  // Validate
  try {
    if (vaultName === null || vaultName === undefined || typeof vaultName.valueOf() !== 'string') {
      throw new Error('vaultName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (fabricName === null || fabricName === undefined || typeof fabricName.valueOf() !== 'string') {
      throw new Error('fabricName cannot be null or undefined and it must be of type string.');
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (protectedItemName === null || protectedItemName === undefined || typeof protectedItemName.valueOf() !== 'string') {
      throw new Error('protectedItemName cannot be null or undefined and it must be of type string.');
    }
    if (resourceProtectedItem === null || resourceProtectedItem === undefined) {
      throw new Error('resourceProtectedItem cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}';
  requestUrl = requestUrl.replace('{vaultName}', encodeURIComponent(vaultName));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{fabricName}', encodeURIComponent(fabricName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{protectedItemName}', encodeURIComponent(protectedItemName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (resourceProtectedItem !== null && resourceProtectedItem !== undefined) {
      let requestModelMapper = new client.models['ProtectedItemResource']().mapper();
      requestModel = client.serialize(requestModelMapper, resourceProtectedItem, 'resourceProtectedItem');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(resourceProtectedItem, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Used to disable the backup job for an item within a container. This is an
 * asynchronous operation. To learn the status of the request, call the
 * GetItemOperationResult API.
 *
 * @param {string} vaultName The name of the Recovery Services vault.
 *
 * @param {string} resourceGroupName The name of the resource group associated
 * with the Recovery Services vault.
 *
 * @param {string} fabricName  The fabric name associated with the backup item.
 *
 * @param {string} containerName The container name associated with the backup
 * item.
 *
 * @param {string} protectedItemName The backup item to be deleted.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2016-06-01';
  // Validate
  try {
    if (vaultName === null || vaultName === undefined || typeof vaultName.valueOf() !== 'string') {
      throw new Error('vaultName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (fabricName === null || fabricName === undefined || typeof fabricName.valueOf() !== 'string') {
      throw new Error('fabricName cannot be null or undefined and it must be of type string.');
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (protectedItemName === null || protectedItemName === undefined || typeof protectedItemName.valueOf() !== 'string') {
      throw new Error('protectedItemName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}';
  requestUrl = requestUrl.replace('{vaultName}', encodeURIComponent(vaultName));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{fabricName}', encodeURIComponent(fabricName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{protectedItemName}', encodeURIComponent(protectedItemName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Provides a pageable list of all items in a subscription, that can be
 * protected.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ProtectedItemResourceList} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ProtectedItemResourceList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * ProtectedItems
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesBackupClient.
 * Initializes a new instance of the ProtectedItems class.
 * @constructor
 *
 * @param {RecoveryServicesBackupClient} client Reference to the service client.
 */
class ProtectedItems {
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._listNext = _listNext;
  }

  /**
   * Provides a pageable list of all items in a subscription, that can be
   * protected.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter]  itemType eq { VM , FileFolder , AzureSqlDb
   * , SQLDB , Exchange , Sharepoint , DPMUnknown } and providerType eq {
   * AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql } and policyName eq
   * {policyname} and containerName eq {containername} and backupManagementType
   * eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
   *
   * @param {string} [options.skipToken]  The Skip Token filter.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ProtectedItemResourceList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(vaultName, resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(vaultName, resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Provides a pageable list of all items in a subscription, that can be
   * protected.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter]  itemType eq { VM , FileFolder , AzureSqlDb
   * , SQLDB , Exchange , Sharepoint , DPMUnknown } and providerType eq {
   * AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql } and policyName eq
   * {policyname} and containerName eq {containername} and backupManagementType
   * eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }.
   *
   * @param {string} [options.skipToken]  The Skip Token filter.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ProtectedItemResourceList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ProtectedItemResourceList} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(vaultName, resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(vaultName, resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(vaultName, resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Provides the details of the backup item. This is an asynchronous operation.
   * To know the status of the operation, call the GetItemOperationResult API.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {string} fabricName The fabric name associated with the backup item.
   *
   * @param {string} containerName The container name associated with the backup
   * item.
   *
   * @param {string} protectedItemName The backup item name used in this GET
   * operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] expand eq {extendedinfo}. This filter
   * enables you to choose (or filter) specific items in the list of backup
   * items.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ProtectedItemResource>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Provides the details of the backup item. This is an asynchronous operation.
   * To know the status of the operation, call the GetItemOperationResult API.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {string} fabricName The fabric name associated with the backup item.
   *
   * @param {string} containerName The container name associated with the backup
   * item.
   *
   * @param {string} protectedItemName The backup item name used in this GET
   * operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] expand eq {extendedinfo}. This filter
   * enables you to choose (or filter) specific items in the list of backup
   * items.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ProtectedItemResource} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ProtectedItemResource} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, optionalCallback);
    }
  }

  /**
   * This operation enables an item to be backed up, or modifies the existing
   * backup policy information for an item that has been backed up. This is an
   * asynchronous operation. To learn the status of the operation, call the
   * GetItemOperationResult API.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {string} fabricName The fabric name associated with the backup item.
   *
   * @param {string} containerName The container name associated with the backup
   * item.
   *
   * @param {string} protectedItemName The name of the backup item.
   *
   * @param {object} resourceProtectedItem The resource backup item.
   *
   * @param {object} [resourceProtectedItem.properties]
   *
   * @param {string} [resourceProtectedItem.properties.backupManagementType] The
   * backup managemenent type associated with the backup item. Possible values
   * include: 'Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer',
   * 'AzureSql'
   *
   * @param {string} [resourceProtectedItem.properties.workloadType] The workload
   * type for this item. Possible values include: 'Invalid', 'VM', 'FileFolder',
   * 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'DPMUnknown'
   *
   * @param {string} [resourceProtectedItem.properties.sourceResourceId] The ID
   * of the resource to be backed up.
   *
   * @param {string} [resourceProtectedItem.properties.policyId] The ID of the
   * backup policy associated with this backup item.
   *
   * @param {date} [resourceProtectedItem.properties.lastRecoveryPoint] The
   * timestamp when the most recent backup copy was created for this backup item.
   *
   * @param {string} resourceProtectedItem.properties.protectedItemType
   * Polymorphic Discriminator
   *
   * @param {string} [resourceProtectedItem.id] Resource ID represents the
   * complete path to the resource.
   *
   * @param {string} [resourceProtectedItem.name] Resource name associated with
   * the resource.
   *
   * @param {string} [resourceProtectedItem.type] Resource type represents the
   * complete path of the form Namespace/ResourceType/ResourceType/...
   *
   * @param {string} [resourceProtectedItem.location] Resource location.
   *
   * @param {object} [resourceProtectedItem.tags] Resource tags.
   *
   * @param {string} [resourceProtectedItem.eTag] Optional ETag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, resourceProtectedItem, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, resourceProtectedItem, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This operation enables an item to be backed up, or modifies the existing
   * backup policy information for an item that has been backed up. This is an
   * asynchronous operation. To learn the status of the operation, call the
   * GetItemOperationResult API.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {string} fabricName The fabric name associated with the backup item.
   *
   * @param {string} containerName The container name associated with the backup
   * item.
   *
   * @param {string} protectedItemName The name of the backup item.
   *
   * @param {object} resourceProtectedItem The resource backup item.
   *
   * @param {object} [resourceProtectedItem.properties]
   *
   * @param {string} [resourceProtectedItem.properties.backupManagementType] The
   * backup managemenent type associated with the backup item. Possible values
   * include: 'Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer',
   * 'AzureSql'
   *
   * @param {string} [resourceProtectedItem.properties.workloadType] The workload
   * type for this item. Possible values include: 'Invalid', 'VM', 'FileFolder',
   * 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'DPMUnknown'
   *
   * @param {string} [resourceProtectedItem.properties.sourceResourceId] The ID
   * of the resource to be backed up.
   *
   * @param {string} [resourceProtectedItem.properties.policyId] The ID of the
   * backup policy associated with this backup item.
   *
   * @param {date} [resourceProtectedItem.properties.lastRecoveryPoint] The
   * timestamp when the most recent backup copy was created for this backup item.
   *
   * @param {string} resourceProtectedItem.properties.protectedItemType
   * Polymorphic Discriminator
   *
   * @param {string} [resourceProtectedItem.id] Resource ID represents the
   * complete path to the resource.
   *
   * @param {string} [resourceProtectedItem.name] Resource name associated with
   * the resource.
   *
   * @param {string} [resourceProtectedItem.type] Resource type represents the
   * complete path of the form Namespace/ResourceType/ResourceType/...
   *
   * @param {string} [resourceProtectedItem.location] Resource location.
   *
   * @param {object} [resourceProtectedItem.tags] Resource tags.
   *
   * @param {string} [resourceProtectedItem.eTag] Optional ETag.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, resourceProtectedItem, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, resourceProtectedItem, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, resourceProtectedItem, options, optionalCallback);
    }
  }

  /**
   * Used to disable the backup job for an item within a container. This is an
   * asynchronous operation. To learn the status of the request, call the
   * GetItemOperationResult API.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {string} fabricName  The fabric name associated with the backup item.
   *
   * @param {string} containerName The container name associated with the backup
   * item.
   *
   * @param {string} protectedItemName The backup item to be deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Used to disable the backup job for an item within a container. This is an
   * asynchronous operation. To learn the status of the request, call the
   * GetItemOperationResult API.
   *
   * @param {string} vaultName The name of the Recovery Services vault.
   *
   * @param {string} resourceGroupName The name of the resource group associated
   * with the Recovery Services vault.
   *
   * @param {string} fabricName  The fabric name associated with the backup item.
   *
   * @param {string} containerName The container name associated with the backup
   * item.
   *
   * @param {string} protectedItemName The backup item to be deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, optionalCallback);
    }
  }

  /**
   * Provides a pageable list of all items in a subscription, that can be
   * protected.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ProtectedItemResourceList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Provides a pageable list of all items in a subscription, that can be
   * protected.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ProtectedItemResourceList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ProtectedItemResourceList} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = ProtectedItems;
