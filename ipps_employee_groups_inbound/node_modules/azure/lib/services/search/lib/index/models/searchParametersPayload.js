/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the SearchParametersPayload class.
 * @constructor
 * Parameters for filtering, sorting, faceting, paging, and other search query
 * behaviors.
 *
 * @member {boolean} [count] A value that specifies whether to fetch the total
 * count of results. Default is false. Setting this value to true may have a
 * performance impact. Note that the count returned is an approximation.
 *
 * @member {array} [facets] The list of facet expressions to apply to the
 * search query. Each facet expression contains a field name, optionally
 * followed by a comma-separated list of name:value pairs.
 *
 * @member {string} [filter] The OData $filter expression to apply to the
 * search query.
 *
 * @member {string} [highlight] The comma-separated list of field names to use
 * for hit highlights. Only searchable fields can be used for hit highlighting.
 *
 * @member {string} [highlightPostTag] A string tag that is appended to hit
 * highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.
 *
 * @member {string} [highlightPreTag] A string tag that is prepended to hit
 * highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.
 *
 * @member {number} [minimumCoverage] A number between 0 and 100 indicating the
 * percentage of the index that must be covered by a search query in order for
 * the query to be reported as a success. This parameter can be useful for
 * ensuring search availability even for services with only one replica. The
 * default is 100.
 *
 * @member {string} [orderBy] The comma-separated list of OData $orderby
 * expressions by which to sort the results. Each expression can be either a
 * field name or a call to the geo.distance() function. Each expression can be
 * followed by asc to indicate ascending, and desc to indicate descending. The
 * default is ascending order. Ties will be broken by the match scores of
 * documents. If no OrderBy is specified, the default sort order is descending
 * by document match score. There can be at most 32 Orderby clauses.
 *
 * @member {string} [queryType] Gets or sets a value that specifies the syntax
 * of the search query. The default is 'simple'. Use 'full' if your query uses
 * the Lucene query syntax. Possible values include: 'simple', 'full'
 *
 * @member {array} [scoringParameters] The list of parameter values to be used
 * in scoring functions (for example, referencePointParameter) using the format
 * name:value. For example, if the scoring profile defines a function with a
 * parameter called 'mylocation' the parameter string would be
 * "mylocation:-122.2,44.8"(without the quotes).
 *
 * @member {string} [scoringProfile] The name of a scoring profile to evaluate
 * match scores for matching documents in order to sort the results.
 *
 * @member {string} [search] A full-text search query expression; Use null or
 * "*" to match all documents.
 *
 * @member {string} [searchFields] The comma-separated list of field names to
 * include in the full-text search.
 *
 * @member {string} [searchMode] A value that specifies whether any or all of
 * the search terms must be matched in order to count the document as a match.
 * Possible values include: 'any', 'all'
 *
 * @member {string} [select] The comma-separated list of fields to retrieve. If
 * unspecified, all fields marked as retrievable in the schema are included.
 *
 * @member {number} [skip] The number of search results to skip. This value
 * cannot be greater than 100,000. If you need to scan documents in sequence,
 * but cannot use Skip due to this limitation, consider using OrderBy on a
 * totally-ordered key and Filter with a range query instead.
 *
 * @member {number} [top] The number of search results to retrieve. This can be
 * used in conjunction with Skip to implement client-side paging of search
 * results. If results are truncated due to server-side paging, the response
 * will include a continuation token that can be passed to ContinueSearch to
 * retrieve the next page of results. See
 * DocumentSearchResponse.ContinuationToken for more information.
 *
 */
class SearchParametersPayload {
  constructor() {
  }

  /**
   * Defines the metadata of SearchParametersPayload
   *
   * @returns {object} metadata of SearchParametersPayload
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SearchParametersPayload',
      type: {
        name: 'Composite',
        className: 'SearchParametersPayload',
        modelProperties: {
          count: {
            required: false,
            serializedName: 'count',
            type: {
              name: 'Boolean'
            }
          },
          facets: {
            required: false,
            serializedName: 'facets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          filter: {
            required: false,
            serializedName: 'filter',
            type: {
              name: 'String'
            }
          },
          highlight: {
            required: false,
            serializedName: 'highlight',
            type: {
              name: 'String'
            }
          },
          highlightPostTag: {
            required: false,
            serializedName: 'highlightPostTag',
            type: {
              name: 'String'
            }
          },
          highlightPreTag: {
            required: false,
            serializedName: 'highlightPreTag',
            type: {
              name: 'String'
            }
          },
          minimumCoverage: {
            required: false,
            serializedName: 'minimumCoverage',
            type: {
              name: 'Number'
            }
          },
          orderBy: {
            required: false,
            serializedName: 'orderby',
            type: {
              name: 'String'
            }
          },
          queryType: {
            required: false,
            serializedName: 'queryType',
            type: {
              name: 'Enum',
              allowedValues: [ 'simple', 'full' ]
            }
          },
          scoringParameters: {
            required: false,
            serializedName: 'scoringParameters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          scoringProfile: {
            required: false,
            serializedName: 'scoringProfile',
            type: {
              name: 'String'
            }
          },
          search: {
            required: false,
            serializedName: 'search',
            type: {
              name: 'String'
            }
          },
          searchFields: {
            required: false,
            serializedName: 'searchFields',
            type: {
              name: 'String'
            }
          },
          searchMode: {
            required: false,
            serializedName: 'searchMode',
            type: {
              name: 'Enum',
              allowedValues: [ 'any', 'all' ]
            }
          },
          select: {
            required: false,
            serializedName: 'select',
            type: {
              name: 'String'
            }
          },
          skip: {
            required: false,
            serializedName: 'skip',
            type: {
              name: 'Number'
            }
          },
          top: {
            required: false,
            serializedName: 'top',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = SearchParametersPayload;
