/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the CommonGramTokenFilter class.
 * @constructor
 * Construct bigrams for frequently occurring terms while indexing. Single
 * terms are still indexed too, with bigrams overlaid. This token filter is
 * implemented using Apache Lucene.
 *
 * @member {array} commonWords The set of common words.
 *
 * @member {boolean} [ignoreCase] A value indicating whether common words
 * matching will be case insensitive. Default is false. Default value: false .
 *
 * @member {boolean} [useQueryMode] A value that indicates whether the token
 * filter is in query mode. When in query mode, the token filter generates
 * bigrams and then removes common words and single terms followed by a common
 * word. Default is false. Default value: false .
 *
 */
class CommonGramTokenFilter extends models['TokenFilter'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of CommonGramTokenFilter
   *
   * @returns {object} metadata of CommonGramTokenFilter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.CommonGramTokenFilter',
      type: {
        name: 'Composite',
        className: 'CommonGramTokenFilter',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          commonWords: {
            required: true,
            serializedName: 'commonWords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          ignoreCase: {
            required: false,
            serializedName: 'ignoreCase',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          useQueryMode: {
            required: false,
            serializedName: 'queryMode',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = CommonGramTokenFilter;
