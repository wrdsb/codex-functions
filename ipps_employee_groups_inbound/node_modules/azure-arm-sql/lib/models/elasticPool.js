/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ElasticPool class.
 * @constructor
 * Represents a database elastic pool.
 *
 * @member {date} [creationDate] The creation date of the elastic pool (ISO8601
 * format).
 *
 * @member {string} [state] The state of the elastic pool. Possible values
 * include: 'Creating', 'Ready', 'Disabled'
 *
 * @member {string} [edition] The edition of the elastic pool. Possible values
 * include: 'Basic', 'Standard', 'Premium'
 *
 * @member {number} [dtu] The total shared DTU for the database elastic pool.
 *
 * @member {number} [databaseDtuMax] The maximum DTU any one database can
 * consume.
 *
 * @member {number} [databaseDtuMin] The minimum DTU all databases are
 * guaranteed.
 *
 * @member {number} [storageMB] Gets storage limit for the database elastic
 * pool in MB.
 *
 * @member {string} [kind] Kind of elastic pool.  This is metadata used for the
 * Azure portal experience.
 *
 */
class ElasticPool extends models['TrackedResource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ElasticPool
   *
   * @returns {object} metadata of ElasticPool
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ElasticPool',
      type: {
        name: 'Composite',
        className: 'ElasticPool',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'properties.state',
            type: {
              name: 'String'
            }
          },
          edition: {
            required: false,
            serializedName: 'properties.edition',
            type: {
              name: 'String'
            }
          },
          dtu: {
            required: false,
            serializedName: 'properties.dtu',
            type: {
              name: 'Number'
            }
          },
          databaseDtuMax: {
            required: false,
            serializedName: 'properties.databaseDtuMax',
            type: {
              name: 'Number'
            }
          },
          databaseDtuMin: {
            required: false,
            serializedName: 'properties.databaseDtuMin',
            type: {
              name: 'Number'
            }
          },
          storageMB: {
            required: false,
            serializedName: 'properties.storageMB',
            type: {
              name: 'Number'
            }
          },
          kind: {
            required: false,
            readOnly: true,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ElasticPool;
