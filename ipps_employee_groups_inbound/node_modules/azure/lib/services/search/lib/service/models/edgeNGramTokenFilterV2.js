/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the EdgeNGramTokenFilterV2 class.
 * @constructor
 * Generates n-grams of the given size(s) starting from the front or the back
 * of an input token. This token filter is implemented using Apache Lucene.
 *
 * @member {number} [minGram] The minimum n-gram length. Default is 1. Maximum
 * is 300. Must be less than the value of maxGram. Default value: 1 .
 *
 * @member {number} [maxGram] The maximum n-gram length. Default is 2. Maximum
 * is 300. Default value: 2 .
 *
 * @member {string} [side] Specifies which side of the input the n-gram should
 * be generated from. Default is "front". Possible values include: 'front',
 * 'back'
 *
 */
class EdgeNGramTokenFilterV2 extends models['TokenFilter'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of EdgeNGramTokenFilterV2
   *
   * @returns {object} metadata of EdgeNGramTokenFilterV2
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.EdgeNGramTokenFilterV2',
      type: {
        name: 'Composite',
        className: 'EdgeNGramTokenFilterV2',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          minGram: {
            required: false,
            serializedName: 'minGram',
            defaultValue: 1,
            constraints: {
              InclusiveMaximum: 300
            },
            type: {
              name: 'Number'
            }
          },
          maxGram: {
            required: false,
            serializedName: 'maxGram',
            defaultValue: 2,
            constraints: {
              InclusiveMaximum: 300
            },
            type: {
              name: 'Number'
            }
          },
          side: {
            required: false,
            serializedName: 'side',
            type: {
              name: 'Enum',
              allowedValues: [ 'front', 'back' ]
            }
          }
        }
      }
    };
  }
}

module.exports = EdgeNGramTokenFilterV2;
