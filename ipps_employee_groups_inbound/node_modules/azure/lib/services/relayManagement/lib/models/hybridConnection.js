/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the HybridConnection class.
 * @constructor
 * Description of HybridConnection Resource.
 *
 * @member {date} [createdAt] The time the HybridConnection was created.
 *
 * @member {date} [updatedAt] The time the namespace was updated.
 *
 * @member {number} [listenerCount] The number of listeners for this
 * HybridConnection. min : 1 and max:25 supported
 *
 * @member {boolean} [requiresClientAuthorization] true if client authorization
 * is needed for this HybridConnection; otherwise, false.
 *
 * @member {string} [userMetadata] usermetadata is a placeholder to store
 * user-defined string data for the HybridConnection endpoint.e.g. it can be
 * used to store  descriptive data, such as list of teams and their contact
 * information also user-defined configuration settings can be stored.
 *
 * @member {string} [path] The path of the HybridConnection.
 *
 */
class HybridConnection extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of HybridConnection
   *
   * @returns {object} metadata of HybridConnection
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'HybridConnection',
      type: {
        name: 'Composite',
        className: 'HybridConnection',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          createdAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.createdAt',
            type: {
              name: 'DateTime'
            }
          },
          updatedAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.updatedAt',
            type: {
              name: 'DateTime'
            }
          },
          listenerCount: {
            required: false,
            readOnly: true,
            serializedName: 'properties.listenerCount',
            constraints: {
              InclusiveMaximum: 25,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          requiresClientAuthorization: {
            required: false,
            serializedName: 'properties.requiresClientAuthorization',
            type: {
              name: 'Boolean'
            }
          },
          userMetadata: {
            required: false,
            serializedName: 'properties.userMetadata',
            type: {
              name: 'String'
            }
          },
          path: {
            required: false,
            serializedName: 'properties.path',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = HybridConnection;
