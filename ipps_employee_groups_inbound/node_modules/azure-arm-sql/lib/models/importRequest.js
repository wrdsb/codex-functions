/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ImportRequest class.
 * @constructor
 * Import database parameters.
 *
 * @member {string} databaseName The name of the database to import.
 *
 * @member {string} edition The edition for the database being created.
 * Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium',
 * 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2'
 *
 * @member {string} serviceObjectiveName The name of the service objective to
 * assign to the database. Possible values include: 'Basic', 'S0', 'S1', 'S2',
 * 'S3', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'System', 'System2',
 * 'ElasticPool'
 *
 * @member {string} maxSizeBytes The maximum size for the newly imported
 * database.
 *
 */
class ImportRequest extends models['ExportRequest'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ImportRequest
   *
   * @returns {object} metadata of ImportRequest
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImportRequest',
      type: {
        name: 'Composite',
        className: 'ImportRequest',
        modelProperties: {
          storageKeyType: {
            required: true,
            serializedName: 'storageKeyType',
            type: {
              name: 'Enum',
              allowedValues: [ 'StorageAccessKey', 'SharedAccessKey' ]
            }
          },
          storageKey: {
            required: true,
            serializedName: 'storageKey',
            type: {
              name: 'String'
            }
          },
          storageUri: {
            required: true,
            serializedName: 'storageUri',
            type: {
              name: 'String'
            }
          },
          administratorLogin: {
            required: true,
            serializedName: 'administratorLogin',
            type: {
              name: 'String'
            }
          },
          administratorLoginPassword: {
            required: true,
            serializedName: 'administratorLoginPassword',
            type: {
              name: 'String'
            }
          },
          authenticationType: {
            required: false,
            serializedName: 'authenticationType',
            defaultValue: 'SQL',
            type: {
              name: 'Enum',
              allowedValues: [ 'SQL', 'ADPassword' ]
            }
          },
          databaseName: {
            required: true,
            serializedName: 'databaseName',
            type: {
              name: 'String'
            }
          },
          edition: {
            required: true,
            serializedName: 'edition',
            type: {
              name: 'String'
            }
          },
          serviceObjectiveName: {
            required: true,
            serializedName: 'serviceObjectiveName',
            type: {
              name: 'String'
            }
          },
          maxSizeBytes: {
            required: true,
            serializedName: 'maxSizeBytes',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ImportRequest;
