/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Clusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Clusters {


    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterUpdateParameters The parameters which contains the
     * property value and property name which used to update the cluster
     * configuration
     *
     * @param {string} [clusterUpdateParameters.reliabilityLevel] Cluster
     * reliability level. Possible values include: 'Invalid', 'Bronze', 'Silver',
     * 'Gold', 'Platinum'
     *
     * @param {string} [clusterUpdateParameters.upgradeMode] Cluster upgrade mode.
     * Possible values include: 'Default', 'Automatic', 'Manual'
     *
     * @param {string} [clusterUpdateParameters.clusterCodeVersion] The
     * ServiceFabric code version, if set it, please make sure you have set
     * upgradeMode to Manual, otherwise ,it will fail
     *
     * @param {object} [clusterUpdateParameters.certificate] The cluster
     * certificate settings, the new certificate should exist in Vmss or
     * KeyVault,before you add it, it will override original value
     *
     * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
     * cluster client thumbprints, it will override existing collection
     *
     * @param {array} [clusterUpdateParameters.fabricSettings] The new fabric
     * settings for the cluster, Be noted, it will overwrite existing collection
     *
     * @param {object} [clusterUpdateParameters.reverseProxyCertificate]
     * Certificate for the reverse proxy
     *
     * @param {string} [clusterUpdateParameters.reverseProxyCertificate.thumbprint]
     * Primary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
     * Secondary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] Certificate
     * x509 store location. Possible values include: 'AddressBook', 'AuthRoot',
     * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
     * 'TrustedPublisher'
     *
     * @param {array} [clusterUpdateParameters.nodeTypes] The settings for
     * NodeTypes, it will override
     *
     * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterUpdateParameters The parameters which contains the
     * property value and property name which used to update the cluster
     * configuration
     *
     * @param {string} [clusterUpdateParameters.reliabilityLevel] Cluster
     * reliability level. Possible values include: 'Invalid', 'Bronze', 'Silver',
     * 'Gold', 'Platinum'
     *
     * @param {string} [clusterUpdateParameters.upgradeMode] Cluster upgrade mode.
     * Possible values include: 'Default', 'Automatic', 'Manual'
     *
     * @param {string} [clusterUpdateParameters.clusterCodeVersion] The
     * ServiceFabric code version, if set it, please make sure you have set
     * upgradeMode to Manual, otherwise ,it will fail
     *
     * @param {object} [clusterUpdateParameters.certificate] The cluster
     * certificate settings, the new certificate should exist in Vmss or
     * KeyVault,before you add it, it will override original value
     *
     * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
     * cluster client thumbprints, it will override existing collection
     *
     * @param {array} [clusterUpdateParameters.fabricSettings] The new fabric
     * settings for the cluster, Be noted, it will overwrite existing collection
     *
     * @param {object} [clusterUpdateParameters.reverseProxyCertificate]
     * Certificate for the reverse proxy
     *
     * @param {string} [clusterUpdateParameters.reverseProxyCertificate.thumbprint]
     * Primary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
     * Secondary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] Certificate
     * x509 store location. Possible values include: 'AddressBook', 'AuthRoot',
     * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
     * 'TrustedPublisher'
     *
     * @param {array} [clusterUpdateParameters.nodeTypes] The settings for
     * NodeTypes, it will override
     *
     * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    update(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, callback: ServiceCallback<models.Cluster>): void;
    update(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Get cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Get cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterResource Put Request
     *
     * @param {string} [clusterResource.clusterCodeVersion] The ServiceFabric code
     * version, you don't need to set it, when you choose upgradeMode as Automatic
     *
     * @param {object} [clusterResource.certificate] The cluster certificate
     *
     * @param {string} clusterResource.reliabilityLevel The reliability level for
     * the cluster. Possible values include: 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} clusterResource.upgradeMode The cluster upgrade mode.
     * Possible values include: 'Automatic', 'Manual'
     *
     * @param {array} [clusterResource.clientCertificateThumbprints] The client
     * certificate thumbprints
     *
     * @param {array} [clusterResource.clientCertificateCommonNames] The
     * certificate common name and issurer thumprint for the client certificate
     *
     * @param {array} [clusterResource.fabricSettings] The faric setting collection
     *
     * @param {object} [clusterResource.reverseProxyCertificate] The certificate
     * for the reverse proxy
     *
     * @param {string} [clusterResource.reverseProxyCertificate.thumbprint] Primary
     * certificate thumbprint
     *
     * @param {string}
     * [clusterResource.reverseProxyCertificate.thumbprintSecondary] Secondary
     * certificate thumbprint
     *
     * @param {string} [clusterResource.reverseProxyCertificate.x509StoreName]
     * Certificate x509 store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} clusterResource.managementEndpoint The cluster management
     * endpoint address
     *
     * @param {array} clusterResource.nodeTypes The arary of the nodeType
     *
     * @param {string} clusterResource.vmImage The OS type
     *
     * @param {object} clusterResource.diagnosticsStorageAccountConfig The storage
     * diagnostics account configuration
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.storageAccountName]
     * Diagnostics storage account name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.primaryAccessKey] Primary
     * diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.secondaryAccessKey]
     * Secondary diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.protectedAccountKeyName]
     * Protected Diagnostics storage key name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.blobEndpoint] Diagnostics
     * storage account blob endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.queueEndpoint] Diagnostics
     * storage account queue endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.tableEndpoint] Diagnostics
     * storage account table endpoint
     *
     * @param {object} [clusterResource.upgradeDescription] The upgrade policy
     *
     * @param {boolean}
     * [clusterResource.upgradeDescription.overrideUserUpgradePolicy] Override user
     * upgrade policy
     *
     * @param {boolean} [clusterResource.upgradeDescription.forceRestart] Force
     * restart or not
     *
     * @param {string}
     * [clusterResource.upgradeDescription.upgradeReplicaSetCheckTimeout] Upgrade
     * replica set check timeout
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckWaitDuration]
     * Health check wait duration
     *
     * @param {string}
     * [clusterResource.upgradeDescription.healthCheckStableDuration] Health check
     * stable duration
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckRetryTimeout]
     * Health check retry timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeTimeout] Upgrade
     * Timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeDomainTimeout]
     * upgrade domain timeout
     *
     * @param {object} [clusterResource.upgradeDescription.healthPolicy] Health
     * Policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
     * Max percent of unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * Max percent of unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {object} [clusterResource.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes]
     * Max of percent of delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
     * Max of percent upgrade domain delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
     * Max percent of delta unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {string} clusterResource.location Resource location.
     *
     * @param {object} [clusterResource.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterResource Put Request
     *
     * @param {string} [clusterResource.clusterCodeVersion] The ServiceFabric code
     * version, you don't need to set it, when you choose upgradeMode as Automatic
     *
     * @param {object} [clusterResource.certificate] The cluster certificate
     *
     * @param {string} clusterResource.reliabilityLevel The reliability level for
     * the cluster. Possible values include: 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} clusterResource.upgradeMode The cluster upgrade mode.
     * Possible values include: 'Automatic', 'Manual'
     *
     * @param {array} [clusterResource.clientCertificateThumbprints] The client
     * certificate thumbprints
     *
     * @param {array} [clusterResource.clientCertificateCommonNames] The
     * certificate common name and issurer thumprint for the client certificate
     *
     * @param {array} [clusterResource.fabricSettings] The faric setting collection
     *
     * @param {object} [clusterResource.reverseProxyCertificate] The certificate
     * for the reverse proxy
     *
     * @param {string} [clusterResource.reverseProxyCertificate.thumbprint] Primary
     * certificate thumbprint
     *
     * @param {string}
     * [clusterResource.reverseProxyCertificate.thumbprintSecondary] Secondary
     * certificate thumbprint
     *
     * @param {string} [clusterResource.reverseProxyCertificate.x509StoreName]
     * Certificate x509 store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} clusterResource.managementEndpoint The cluster management
     * endpoint address
     *
     * @param {array} clusterResource.nodeTypes The arary of the nodeType
     *
     * @param {string} clusterResource.vmImage The OS type
     *
     * @param {object} clusterResource.diagnosticsStorageAccountConfig The storage
     * diagnostics account configuration
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.storageAccountName]
     * Diagnostics storage account name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.primaryAccessKey] Primary
     * diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.secondaryAccessKey]
     * Secondary diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.protectedAccountKeyName]
     * Protected Diagnostics storage key name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.blobEndpoint] Diagnostics
     * storage account blob endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.queueEndpoint] Diagnostics
     * storage account queue endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.tableEndpoint] Diagnostics
     * storage account table endpoint
     *
     * @param {object} [clusterResource.upgradeDescription] The upgrade policy
     *
     * @param {boolean}
     * [clusterResource.upgradeDescription.overrideUserUpgradePolicy] Override user
     * upgrade policy
     *
     * @param {boolean} [clusterResource.upgradeDescription.forceRestart] Force
     * restart or not
     *
     * @param {string}
     * [clusterResource.upgradeDescription.upgradeReplicaSetCheckTimeout] Upgrade
     * replica set check timeout
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckWaitDuration]
     * Health check wait duration
     *
     * @param {string}
     * [clusterResource.upgradeDescription.healthCheckStableDuration] Health check
     * stable duration
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckRetryTimeout]
     * Health check retry timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeTimeout] Upgrade
     * Timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeDomainTimeout]
     * upgrade domain timeout
     *
     * @param {object} [clusterResource.upgradeDescription.healthPolicy] Health
     * Policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
     * Max percent of unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * Max percent of unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {object} [clusterResource.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes]
     * Max of percent of delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
     * Max of percent upgrade domain delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
     * Max percent of delta unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {string} clusterResource.location Resource location.
     *
     * @param {object} [clusterResource.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    create(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, callback: ServiceCallback<models.Cluster>): void;
    create(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Delete cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List cluster resource by resource group
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource by resource group
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * List cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    list(callback: ServiceCallback<models.ClusterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterUpdateParameters The parameters which contains the
     * property value and property name which used to update the cluster
     * configuration
     *
     * @param {string} [clusterUpdateParameters.reliabilityLevel] Cluster
     * reliability level. Possible values include: 'Invalid', 'Bronze', 'Silver',
     * 'Gold', 'Platinum'
     *
     * @param {string} [clusterUpdateParameters.upgradeMode] Cluster upgrade mode.
     * Possible values include: 'Default', 'Automatic', 'Manual'
     *
     * @param {string} [clusterUpdateParameters.clusterCodeVersion] The
     * ServiceFabric code version, if set it, please make sure you have set
     * upgradeMode to Manual, otherwise ,it will fail
     *
     * @param {object} [clusterUpdateParameters.certificate] The cluster
     * certificate settings, the new certificate should exist in Vmss or
     * KeyVault,before you add it, it will override original value
     *
     * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
     * cluster client thumbprints, it will override existing collection
     *
     * @param {array} [clusterUpdateParameters.fabricSettings] The new fabric
     * settings for the cluster, Be noted, it will overwrite existing collection
     *
     * @param {object} [clusterUpdateParameters.reverseProxyCertificate]
     * Certificate for the reverse proxy
     *
     * @param {string} [clusterUpdateParameters.reverseProxyCertificate.thumbprint]
     * Primary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
     * Secondary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] Certificate
     * x509 store location. Possible values include: 'AddressBook', 'AuthRoot',
     * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
     * 'TrustedPublisher'
     *
     * @param {array} [clusterUpdateParameters.nodeTypes] The settings for
     * NodeTypes, it will override
     *
     * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterUpdateParameters The parameters which contains the
     * property value and property name which used to update the cluster
     * configuration
     *
     * @param {string} [clusterUpdateParameters.reliabilityLevel] Cluster
     * reliability level. Possible values include: 'Invalid', 'Bronze', 'Silver',
     * 'Gold', 'Platinum'
     *
     * @param {string} [clusterUpdateParameters.upgradeMode] Cluster upgrade mode.
     * Possible values include: 'Default', 'Automatic', 'Manual'
     *
     * @param {string} [clusterUpdateParameters.clusterCodeVersion] The
     * ServiceFabric code version, if set it, please make sure you have set
     * upgradeMode to Manual, otherwise ,it will fail
     *
     * @param {object} [clusterUpdateParameters.certificate] The cluster
     * certificate settings, the new certificate should exist in Vmss or
     * KeyVault,before you add it, it will override original value
     *
     * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
     * cluster client thumbprints, it will override existing collection
     *
     * @param {array} [clusterUpdateParameters.fabricSettings] The new fabric
     * settings for the cluster, Be noted, it will overwrite existing collection
     *
     * @param {object} [clusterUpdateParameters.reverseProxyCertificate]
     * Certificate for the reverse proxy
     *
     * @param {string} [clusterUpdateParameters.reverseProxyCertificate.thumbprint]
     * Primary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
     * Secondary certificate thumbprint
     *
     * @param {string}
     * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] Certificate
     * x509 store location. Possible values include: 'AddressBook', 'AuthRoot',
     * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
     * 'TrustedPublisher'
     *
     * @param {array} [clusterUpdateParameters.nodeTypes] The settings for
     * NodeTypes, it will override
     *
     * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginUpdate(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, callback: ServiceCallback<models.Cluster>): void;
    beginUpdate(resourceGroupName: string, clusterName: string, clusterUpdateParameters: models.ClusterUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterResource Put Request
     *
     * @param {string} [clusterResource.clusterCodeVersion] The ServiceFabric code
     * version, you don't need to set it, when you choose upgradeMode as Automatic
     *
     * @param {object} [clusterResource.certificate] The cluster certificate
     *
     * @param {string} clusterResource.reliabilityLevel The reliability level for
     * the cluster. Possible values include: 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} clusterResource.upgradeMode The cluster upgrade mode.
     * Possible values include: 'Automatic', 'Manual'
     *
     * @param {array} [clusterResource.clientCertificateThumbprints] The client
     * certificate thumbprints
     *
     * @param {array} [clusterResource.clientCertificateCommonNames] The
     * certificate common name and issurer thumprint for the client certificate
     *
     * @param {array} [clusterResource.fabricSettings] The faric setting collection
     *
     * @param {object} [clusterResource.reverseProxyCertificate] The certificate
     * for the reverse proxy
     *
     * @param {string} [clusterResource.reverseProxyCertificate.thumbprint] Primary
     * certificate thumbprint
     *
     * @param {string}
     * [clusterResource.reverseProxyCertificate.thumbprintSecondary] Secondary
     * certificate thumbprint
     *
     * @param {string} [clusterResource.reverseProxyCertificate.x509StoreName]
     * Certificate x509 store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} clusterResource.managementEndpoint The cluster management
     * endpoint address
     *
     * @param {array} clusterResource.nodeTypes The arary of the nodeType
     *
     * @param {string} clusterResource.vmImage The OS type
     *
     * @param {object} clusterResource.diagnosticsStorageAccountConfig The storage
     * diagnostics account configuration
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.storageAccountName]
     * Diagnostics storage account name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.primaryAccessKey] Primary
     * diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.secondaryAccessKey]
     * Secondary diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.protectedAccountKeyName]
     * Protected Diagnostics storage key name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.blobEndpoint] Diagnostics
     * storage account blob endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.queueEndpoint] Diagnostics
     * storage account queue endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.tableEndpoint] Diagnostics
     * storage account table endpoint
     *
     * @param {object} [clusterResource.upgradeDescription] The upgrade policy
     *
     * @param {boolean}
     * [clusterResource.upgradeDescription.overrideUserUpgradePolicy] Override user
     * upgrade policy
     *
     * @param {boolean} [clusterResource.upgradeDescription.forceRestart] Force
     * restart or not
     *
     * @param {string}
     * [clusterResource.upgradeDescription.upgradeReplicaSetCheckTimeout] Upgrade
     * replica set check timeout
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckWaitDuration]
     * Health check wait duration
     *
     * @param {string}
     * [clusterResource.upgradeDescription.healthCheckStableDuration] Health check
     * stable duration
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckRetryTimeout]
     * Health check retry timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeTimeout] Upgrade
     * Timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeDomainTimeout]
     * upgrade domain timeout
     *
     * @param {object} [clusterResource.upgradeDescription.healthPolicy] Health
     * Policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
     * Max percent of unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * Max percent of unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {object} [clusterResource.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes]
     * Max of percent of delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
     * Max of percent upgrade domain delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
     * Max percent of delta unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {string} clusterResource.location Resource location.
     *
     * @param {object} [clusterResource.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the Resource Group to which
     * the server belongs.
     *
     * @param {string} clusterName The name of the cluster
     *
     * @param {object} clusterResource Put Request
     *
     * @param {string} [clusterResource.clusterCodeVersion] The ServiceFabric code
     * version, you don't need to set it, when you choose upgradeMode as Automatic
     *
     * @param {object} [clusterResource.certificate] The cluster certificate
     *
     * @param {string} clusterResource.reliabilityLevel The reliability level for
     * the cluster. Possible values include: 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} clusterResource.upgradeMode The cluster upgrade mode.
     * Possible values include: 'Automatic', 'Manual'
     *
     * @param {array} [clusterResource.clientCertificateThumbprints] The client
     * certificate thumbprints
     *
     * @param {array} [clusterResource.clientCertificateCommonNames] The
     * certificate common name and issurer thumprint for the client certificate
     *
     * @param {array} [clusterResource.fabricSettings] The faric setting collection
     *
     * @param {object} [clusterResource.reverseProxyCertificate] The certificate
     * for the reverse proxy
     *
     * @param {string} [clusterResource.reverseProxyCertificate.thumbprint] Primary
     * certificate thumbprint
     *
     * @param {string}
     * [clusterResource.reverseProxyCertificate.thumbprintSecondary] Secondary
     * certificate thumbprint
     *
     * @param {string} [clusterResource.reverseProxyCertificate.x509StoreName]
     * Certificate x509 store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} clusterResource.managementEndpoint The cluster management
     * endpoint address
     *
     * @param {array} clusterResource.nodeTypes The arary of the nodeType
     *
     * @param {string} clusterResource.vmImage The OS type
     *
     * @param {object} clusterResource.diagnosticsStorageAccountConfig The storage
     * diagnostics account configuration
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.storageAccountName]
     * Diagnostics storage account name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.primaryAccessKey] Primary
     * diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.secondaryAccessKey]
     * Secondary diagnostics storage access key
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.protectedAccountKeyName]
     * Protected Diagnostics storage key name
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.blobEndpoint] Diagnostics
     * storage account blob endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.queueEndpoint] Diagnostics
     * storage account queue endpoint
     *
     * @param {string}
     * [clusterResource.diagnosticsStorageAccountConfig.tableEndpoint] Diagnostics
     * storage account table endpoint
     *
     * @param {object} [clusterResource.upgradeDescription] The upgrade policy
     *
     * @param {boolean}
     * [clusterResource.upgradeDescription.overrideUserUpgradePolicy] Override user
     * upgrade policy
     *
     * @param {boolean} [clusterResource.upgradeDescription.forceRestart] Force
     * restart or not
     *
     * @param {string}
     * [clusterResource.upgradeDescription.upgradeReplicaSetCheckTimeout] Upgrade
     * replica set check timeout
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckWaitDuration]
     * Health check wait duration
     *
     * @param {string}
     * [clusterResource.upgradeDescription.healthCheckStableDuration] Health check
     * stable duration
     *
     * @param {string} [clusterResource.upgradeDescription.healthCheckRetryTimeout]
     * Health check retry timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeTimeout] Upgrade
     * Timeout
     *
     * @param {string} [clusterResource.upgradeDescription.upgradeDomainTimeout]
     * upgrade domain timeout
     *
     * @param {object} [clusterResource.upgradeDescription.healthPolicy] Health
     * Policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
     * Max percent of unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * Max percent of unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {object} [clusterResource.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes]
     * Max of percent of delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
     * Max of percent upgrade domain delta unhealthy nodes
     *
     * @param {number}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
     * Max percent of delta unhealthy applications
     *
     * @param {object}
     * [clusterResource.upgradeDescription.deltaHealthPolicy.applicationHealthPolicies]
     * Application health policies
     *
     * @param {string} clusterResource.location Resource location.
     *
     * @param {object} [clusterResource.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginCreate(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, callback: ServiceCallback<models.Cluster>): void;
    beginCreate(resourceGroupName: string, clusterName: string, clusterResource: models.Cluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * List cluster resource by resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource by resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * List cluster resource
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Operations {


    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}
