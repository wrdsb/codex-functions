/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ShingleTokenFilter class.
 * @constructor
 * Creates combinations of tokens as a single token. This token filter is
 * implemented using Apache Lucene.
 *
 * @member {number} [maxShingleSize] The maximum shingle size. Default and
 * minimum value is 2. Default value: 2 .
 *
 * @member {number} [minShingleSize] The minimum shingle size. Default and
 * minimum value is 2. Must be less than the value of maxShingleSize. Default
 * value: 2 .
 *
 * @member {boolean} [outputUnigrams] A value indicating whether the output
 * stream will contain the input tokens (unigrams) as well as shingles. Default
 * is true. Default value: true .
 *
 * @member {boolean} [outputUnigramsIfNoShingles] A value indicating whether to
 * output unigrams for those times when no shingles are available. This
 * property takes precedence when outputUnigrams is set to false. Default is
 * false. Default value: false .
 *
 * @member {string} [tokenSeparator] The string to use when joining adjacent
 * tokens to form a shingle. Default is a single space (" "). Default value: ''
 * .
 *
 * @member {string} [filterToken] The string to insert for each position at
 * which there is no token. Default is an underscore ("_"). Default value: '_'
 * .
 *
 */
class ShingleTokenFilter extends models['TokenFilter'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ShingleTokenFilter
   *
   * @returns {object} metadata of ShingleTokenFilter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.ShingleTokenFilter',
      type: {
        name: 'Composite',
        className: 'ShingleTokenFilter',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          maxShingleSize: {
            required: false,
            serializedName: 'maxShingleSize',
            defaultValue: 2,
            constraints: {
              InclusiveMinimum: 2
            },
            type: {
              name: 'Number'
            }
          },
          minShingleSize: {
            required: false,
            serializedName: 'minShingleSize',
            defaultValue: 2,
            constraints: {
              InclusiveMinimum: 2
            },
            type: {
              name: 'Number'
            }
          },
          outputUnigrams: {
            required: false,
            serializedName: 'outputUnigrams',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          outputUnigramsIfNoShingles: {
            required: false,
            serializedName: 'outputUnigramsIfNoShingles',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          tokenSeparator: {
            required: false,
            serializedName: 'tokenSeparator',
            defaultValue: '',
            type: {
              name: 'String'
            }
          },
          filterToken: {
            required: false,
            serializedName: 'filterToken',
            defaultValue: '_',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ShingleTokenFilter;
