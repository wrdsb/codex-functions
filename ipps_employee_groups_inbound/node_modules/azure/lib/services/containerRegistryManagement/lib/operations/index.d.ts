/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Registries
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface Registries {


    /**
     * Checks whether the container registry name is available for use. The name
     * must contain only alphanumeric characters, be globally unique, and between 5
     * and 60 characters in length.
     *
     * @param {object} registryNameCheckRequest The object containing information
     * for the availability request.
     *
     * @param {string} registryNameCheckRequest.name The name of the container
     * registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryNameStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(registryNameCheckRequest: models.RegistryNameCheckRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryNameStatus>>;

    /**
     * Checks whether the container registry name is available for use. The name
     * must contain only alphanumeric characters, be globally unique, and between 5
     * and 60 characters in length.
     *
     * @param {object} registryNameCheckRequest The object containing information
     * for the availability request.
     *
     * @param {string} registryNameCheckRequest.name The name of the container
     * registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryNameStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryNameStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryNameStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(registryNameCheckRequest: models.RegistryNameCheckRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryNameStatus>;
    checkNameAvailability(registryNameCheckRequest: models.RegistryNameCheckRequest, callback: ServiceCallback<models.RegistryNameStatus>): void;
    checkNameAvailability(registryNameCheckRequest: models.RegistryNameCheckRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryNameStatus>): void;


    /**
     * Gets the properties of the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Gets the properties of the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    get(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.Registry>): void;
    get(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryCreateParameters The parameters for creating a
     * container registry.
     *
     * @param {object} [registryCreateParameters.tags] The tags for the container
     * registry.
     *
     * @param {string} registryCreateParameters.location The location of the
     * container registry. This cannot be changed after the resource is created.
     *
     * @param {object} registryCreateParameters.sku The SKU of the container
     * registry.
     *
     * @param {string} registryCreateParameters.sku.name The SKU name of the the
     * container registry. Required for registry creation. Allowed value: Basic.
     *
     * @param {boolean} [registryCreateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled. This value is false by default.
     *
     * @param {object} registryCreateParameters.storageAccount The parameters of a
     * storage account for the container registry. If specified, the storage
     * account must be in the same physical location as the container registry.
     *
     * @param {string} registryCreateParameters.storageAccount.name The name of the
     * storage account.
     *
     * @param {string} registryCreateParameters.storageAccount.accessKey The access
     * key to the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryCreateParameters The parameters for creating a
     * container registry.
     *
     * @param {object} [registryCreateParameters.tags] The tags for the container
     * registry.
     *
     * @param {string} registryCreateParameters.location The location of the
     * container registry. This cannot be changed after the resource is created.
     *
     * @param {object} registryCreateParameters.sku The SKU of the container
     * registry.
     *
     * @param {string} registryCreateParameters.sku.name The SKU name of the the
     * container registry. Required for registry creation. Allowed value: Basic.
     *
     * @param {boolean} [registryCreateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled. This value is false by default.
     *
     * @param {object} registryCreateParameters.storageAccount The parameters of a
     * storage account for the container registry. If specified, the storage
     * account must be in the same physical location as the container registry.
     *
     * @param {string} registryCreateParameters.storageAccount.name The name of the
     * storage account.
     *
     * @param {string} registryCreateParameters.storageAccount.accessKey The access
     * key to the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    create(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, callback: ServiceCallback<models.Registry>): void;
    create(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Deletes a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, registryName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryUpdateParameters The parameters for updating a
     * container registry.
     *
     * @param {object} [registryUpdateParameters.tags] The tags for the container
     * registry.
     *
     * @param {boolean} [registryUpdateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled. This value is false by default.
     *
     * @param {object} [registryUpdateParameters.storageAccount] The parameters of
     * a storage account for the container registry. If specified, the storage
     * account must be in the same physical location as the container registry.
     *
     * @param {string} registryUpdateParameters.storageAccount.name The name of the
     * storage account.
     *
     * @param {string} registryUpdateParameters.storageAccount.accessKey The access
     * key to the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Updates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryUpdateParameters The parameters for updating a
     * container registry.
     *
     * @param {object} [registryUpdateParameters.tags] The tags for the container
     * registry.
     *
     * @param {boolean} [registryUpdateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled. This value is false by default.
     *
     * @param {object} [registryUpdateParameters.storageAccount] The parameters of
     * a storage account for the container registry. If specified, the storage
     * account must be in the same physical location as the container registry.
     *
     * @param {string} registryUpdateParameters.storageAccount.name The name of the
     * storage account.
     *
     * @param {string} registryUpdateParameters.storageAccount.accessKey The access
     * key to the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    update(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, callback: ServiceCallback<models.Registry>): void;
    update(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RegistryListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;


    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    list(callback: ServiceCallback<models.RegistryListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;


    /**
     * Lists the login credentials for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListCredentialsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCredentialsWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListCredentialsResult>>;

    /**
     * Lists the login credentials for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListCredentialsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListCredentialsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListCredentialsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCredentials(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListCredentialsResult>;
    listCredentials(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;
    listCredentials(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;


    /**
     * Regenerates one of the login credentials for the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} regenerateCredentialParameters Specifies name of the
     * password which should be regenerated -- password or password2.
     *
     * @param {string} regenerateCredentialParameters.name Specifies name of the
     * password which should be regenerated -- password or password2. Possible
     * values include: 'password', 'password2'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListCredentialsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateCredentialWithHttpOperationResponse(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListCredentialsResult>>;

    /**
     * Regenerates one of the login credentials for the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} regenerateCredentialParameters Specifies name of the
     * password which should be regenerated -- password or password2.
     *
     * @param {string} regenerateCredentialParameters.name Specifies name of the
     * password which should be regenerated -- password or password2. Possible
     * values include: 'password', 'password2'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListCredentialsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListCredentialsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListCredentialsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListCredentialsResult>;
    regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;
    regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;


    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryCreateParameters The parameters for creating a
     * container registry.
     *
     * @param {object} [registryCreateParameters.tags] The tags for the container
     * registry.
     *
     * @param {string} registryCreateParameters.location The location of the
     * container registry. This cannot be changed after the resource is created.
     *
     * @param {object} registryCreateParameters.sku The SKU of the container
     * registry.
     *
     * @param {string} registryCreateParameters.sku.name The SKU name of the the
     * container registry. Required for registry creation. Allowed value: Basic.
     *
     * @param {boolean} [registryCreateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled. This value is false by default.
     *
     * @param {object} registryCreateParameters.storageAccount The parameters of a
     * storage account for the container registry. If specified, the storage
     * account must be in the same physical location as the container registry.
     *
     * @param {string} registryCreateParameters.storageAccount.name The name of the
     * storage account.
     *
     * @param {string} registryCreateParameters.storageAccount.accessKey The access
     * key to the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryCreateParameters The parameters for creating a
     * container registry.
     *
     * @param {object} [registryCreateParameters.tags] The tags for the container
     * registry.
     *
     * @param {string} registryCreateParameters.location The location of the
     * container registry. This cannot be changed after the resource is created.
     *
     * @param {object} registryCreateParameters.sku The SKU of the container
     * registry.
     *
     * @param {string} registryCreateParameters.sku.name The SKU name of the the
     * container registry. Required for registry creation. Allowed value: Basic.
     *
     * @param {boolean} [registryCreateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled. This value is false by default.
     *
     * @param {object} registryCreateParameters.storageAccount The parameters of a
     * storage account for the container registry. If specified, the storage
     * account must be in the same physical location as the container registry.
     *
     * @param {string} registryCreateParameters.storageAccount.name The name of the
     * storage account.
     *
     * @param {string} registryCreateParameters.storageAccount.accessKey The access
     * key to the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    beginCreate(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, callback: ServiceCallback<models.Registry>): void;
    beginCreate(resourceGroupName: string, registryName: string, registryCreateParameters: models.RegistryCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RegistryListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;


    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RegistryListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}
