/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the JobReleaseTask class.
 * @constructor
 * @summary A Job Release task to run on job completion on any compute node
 * where the job has run.
 *
 * @member {string} [id] A string that uniquely identifies the Job Release task
 * within the job. The ID can contain any combination of alphanumeric
 * characters including hyphens and underscores and cannot contain more than 64
 * characters. If you do not specify this property, the Batch service assigns a
 * default value of 'jobrelease'. No other task in the job can have the same id
 * as the Job Release task. If you try to submit a task with the same id, the
 * Batch service rejects the request with error code
 * TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the
 * HTTP status code is 409 (Conflict).
 *
 * @member {string} commandLine The command line of the Job Release task. The
 * command line does not run under a shell, and therefore cannot take advantage
 * of shell features such as environment variable expansion. If you want to
 * take advantage of such features, you should invoke the shell in the command
 * line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c
 * MyCommand" in Linux.
 *
 * @member {array} [resourceFiles] A list of files that the Batch service will
 * download to the compute node before running the command line. Files listed
 * under this element are located in the task's working directory.
 *
 * @member {array} [environmentSettings] A list of environment variable
 * settings for the Job Release task.
 *
 * @member {moment.duration} [maxWallClockTime] The maximum elapsed time that
 * the Job Release task may run on a given compute node, measured from the time
 * the task starts. If the task does not complete within the time limit, the
 * Batch service terminates it. The default value is 15 minutes. You may not
 * specify a timeout longer than 15 minutes. If you do, the Batch service
 * rejects it with an error; if you are calling the REST API directly, the HTTP
 * status code is 400 (Bad Request).
 *
 * @member {moment.duration} [retentionTime] The minimum time to retain the
 * task directory for the Job Release task on the compute node. After this
 * time, the Batch service may delete the task directory and all its contents.
 * The default is infinite, i.e. the task directory will be retained until the
 * compute node is removed or reimaged.
 *
 * @member {object} [userIdentity] The user identity under which the Job
 * Release task runs. If omitted, the task runs as a non-administrative user
 * unique to the task.
 *
 * @member {string} [userIdentity.userName] The userName and autoUser
 * properties are mutually exclusive; you must specify one but not both.
 *
 * @member {object} [userIdentity.autoUser] The userName and autoUser
 * properties are mutually exclusive; you must specify one but not both.
 *
 * @member {string} [userIdentity.autoUser.scope] pool - specifies that the
 * task runs as the common auto user account which is created on every node in
 * a pool. task - specifies that the service should create a new user for the
 * task. The default value is task. Possible values include: 'task', 'pool'
 *
 * @member {string} [userIdentity.autoUser.elevationLevel] nonAdmin - The auto
 * user is a standard user without elevated access. admin - The auto user is a
 * user with elevated access and operates with full Administrator permissions.
 * The default value is nonAdmin. Possible values include: 'nonAdmin', 'admin'
 *
 */
class JobReleaseTask {
  constructor() {
  }

  /**
   * Defines the metadata of JobReleaseTask
   *
   * @returns {object} metadata of JobReleaseTask
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobReleaseTask',
      type: {
        name: 'Composite',
        className: 'JobReleaseTask',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          commandLine: {
            required: true,
            serializedName: 'commandLine',
            type: {
              name: 'String'
            }
          },
          resourceFiles: {
            required: false,
            serializedName: 'resourceFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ResourceFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ResourceFile'
                  }
              }
            }
          },
          environmentSettings: {
            required: false,
            serializedName: 'environmentSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentSettingElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentSetting'
                  }
              }
            }
          },
          maxWallClockTime: {
            required: false,
            serializedName: 'maxWallClockTime',
            type: {
              name: 'TimeSpan'
            }
          },
          retentionTime: {
            required: false,
            serializedName: 'retentionTime',
            type: {
              name: 'TimeSpan'
            }
          },
          userIdentity: {
            required: false,
            serializedName: 'userIdentity',
            type: {
              name: 'Composite',
              className: 'UserIdentity'
            }
          }
        }
      }
    };
  }
}

module.exports = JobReleaseTask;
