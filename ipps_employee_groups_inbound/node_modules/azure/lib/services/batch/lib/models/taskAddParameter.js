/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the TaskAddParameter class.
 * @constructor
 * @summary An Azure Batch task to add.
 *
 * @member {string} id A string that uniquely identifies the task within the
 * job. The ID can contain any combination of alphanumeric characters including
 * hyphens and underscores, and cannot contain more than 64 characters. The ID
 * is case-preserving and case-insensitive (that is, you may not have two IDs
 * within a job that differ only by case).
 *
 * @member {string} [displayName] A display name for the task. The display name
 * need not be unique and can contain any Unicode characters up to a maximum
 * length of 1024.
 *
 * @member {string} commandLine The command line of the task. For
 * multi-instance tasks, the command line is executed as the primary task,
 * after the primary task and all subtasks have finished executing the
 * coordination command line. The command line does not run under a shell, and
 * therefore cannot take advantage of shell features such as environment
 * variable expansion. If you want to take advantage of such features, you
 * should invoke the shell in the command line, for example using "cmd /c
 * MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 *
 * @member {object} [exitConditions] How the Batch service should respond when
 * the task completes.
 *
 * @member {array} [exitConditions.exitCodes]
 *
 * @member {array} [exitConditions.exitCodeRanges]
 *
 * @member {object} [exitConditions.schedulingError]
 *
 * @member {string} [exitConditions.schedulingError.jobAction] The default is
 * none for exit code 0 and terminate for all other exit conditions. If the
 * job's onTaskFailed property is noAction, then specify this property returns
 * an error. The add task request fails with an invalid property value error;;
 * if you are calling the REST API directly, the HTTP status code is 400 (Bad
 * Request). Possible values include: 'none', 'disable', 'terminate'
 *
 * @member {string} [exitConditions.schedulingError.dependencyAction] The
 * default is 'satisfy' for exit code 0, and 'block' for all other exit
 * conditions. If the job's usesTaskDependencies property is set to false, then
 * specifying the dependencyAction property returns an error. The add task
 * request fails with an invalid property value error; if you are calling the
 * REST API directly, the HTTP status code is 400  (Bad Request). Possible
 * values include: 'satisfy', 'block'
 *
 * @member {object} [exitConditions.default] Note that the default condition
 * does not include exit code 0. If you want non-default behaviour on exit code
 * 0, you must list it explicitly using the exitCodes or exitCodeRanges
 * collection.
 *
 * @member {string} [exitConditions.default.jobAction] The default is none for
 * exit code 0 and terminate for all other exit conditions. If the job's
 * onTaskFailed property is noAction, then specify this property returns an
 * error. The add task request fails with an invalid property value error;; if
 * you are calling the REST API directly, the HTTP status code is 400 (Bad
 * Request). Possible values include: 'none', 'disable', 'terminate'
 *
 * @member {string} [exitConditions.default.dependencyAction] The default is
 * 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the
 * job's usesTaskDependencies property is set to false, then specifying the
 * dependencyAction property returns an error. The add task request fails with
 * an invalid property value error; if you are calling the REST API directly,
 * the HTTP status code is 400  (Bad Request). Possible values include:
 * 'satisfy', 'block'
 *
 * @member {array} [resourceFiles] A list of files that the Batch service will
 * download to the compute node before running the command line. For
 * multi-instance tasks, the resource files will only be downloaded to the
 * compute node on which the primary task is executed.
 *
 * @member {array} [environmentSettings] A list of environment variable
 * settings for the task.
 *
 * @member {object} [affinityInfo] A locality hint that can be used by the
 * Batch service to select a compute node on which to start the new task.
 *
 * @member {string} [affinityInfo.affinityId] You can pass the affinityId of a
 * compute node or task to indicate that this task needs to be placed close to
 * the node or task.
 *
 * @member {object} [constraints] The execution constraints that apply to this
 * task. If you do not specify constraints, the maxTaskRetryCount is the
 * maxTaskRetryCount specified for the job, and the maxWallClockTime and
 * retentionTime are infinite.
 *
 * @member {moment.duration} [constraints.maxWallClockTime] If this is not
 * specified, there is no time limit on how long the task may run.
 *
 * @member {moment.duration} [constraints.retentionTime] The default is
 * infinite, i.e. the task directory will be retained until the compute node is
 * removed or reimaged.
 *
 * @member {number} [constraints.maxTaskRetryCount] Note that this value
 * specifically controls the number of retries. The Batch service will try the
 * task once, and may then retry up to this limit. For example, if the maximum
 * retry count is 3, Batch tries the task up to 4 times (one initial try and 3
 * retries). If the maximum retry count is 0, the Batch service does not retry
 * the task. If the maximum retry count is -1, the Batch service retries the
 * task without limit.
 *
 * @member {object} [userIdentity] The user identity under which the task runs.
 * If omitted, the task runs as a non-administrative user unique to the task.
 *
 * @member {string} [userIdentity.userName] The userName and autoUser
 * properties are mutually exclusive; you must specify one but not both.
 *
 * @member {object} [userIdentity.autoUser] The userName and autoUser
 * properties are mutually exclusive; you must specify one but not both.
 *
 * @member {string} [userIdentity.autoUser.scope] pool - specifies that the
 * task runs as the common auto user account which is created on every node in
 * a pool. task - specifies that the service should create a new user for the
 * task. The default value is task. Possible values include: 'task', 'pool'
 *
 * @member {string} [userIdentity.autoUser.elevationLevel] nonAdmin - The auto
 * user is a standard user without elevated access. admin - The auto user is a
 * user with elevated access and operates with full Administrator permissions.
 * The default value is nonAdmin. Possible values include: 'nonAdmin', 'admin'
 *
 * @member {object} [multiInstanceSettings] An object that indicates that the
 * task is a multi-instance task, and contains information about how to run the
 * multi-instance task.
 *
 * @member {number} [multiInstanceSettings.numberOfInstances]
 *
 * @member {string} [multiInstanceSettings.coordinationCommandLine] A typical
 * coordination command line launches a background service and verifies that
 * the service is ready to process inter-node messages.
 *
 * @member {array} [multiInstanceSettings.commonResourceFiles] The difference
 * between common resource files and task resource files is that common
 * resource files are downloaded for all subtasks including the primary,
 * whereas task resource files are downloaded only for the primary.
 *
 * @member {object} [dependsOn] The tasks that this task depends on. This task
 * will not be scheduled until all tasks that it depends on have completed
 * successfully. If any of those tasks fail and exhaust their retry counts,
 * this task will never be scheduled. If the job does not have
 * usesTaskDependencies set to true, and this element is present, the request
 * fails with error code TaskDependenciesNotSpecifiedOnJob.
 *
 * @member {array} [dependsOn.taskIds]
 *
 * @member {array} [dependsOn.taskIdRanges]
 *
 * @member {array} [applicationPackageReferences] A list of application
 * packages that the Batch service will deploy to the compute node before
 * running the command line.
 *
 * @member {object} [authenticationTokenSettings] The settings for an
 * authentication token that the task can use to perform Batch service
 * operations. If this property is set, the Batch service provides the task
 * with an authentication token which can be used to authenticate Batch service
 * operations without requiring an account access key. The token is provided
 * via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations
 * that the task can carry out using the token depend on the settings. For
 * example, a task can request job permissions in order to add other tasks to
 * the job, or check the status of the job or of other tasks under the job.
 *
 * @member {array} [authenticationTokenSettings.access] The authentication
 * token grants access to a limited set of Batch service operations. Currently
 * the only supported value for the access property is 'job', which grants
 * access to all operations related to the job which contains the task.
 *
 */
class TaskAddParameter {
  constructor() {
  }

  /**
   * Defines the metadata of TaskAddParameter
   *
   * @returns {object} metadata of TaskAddParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TaskAddParameter',
      type: {
        name: 'Composite',
        className: 'TaskAddParameter',
        modelProperties: {
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          commandLine: {
            required: true,
            serializedName: 'commandLine',
            type: {
              name: 'String'
            }
          },
          exitConditions: {
            required: false,
            serializedName: 'exitConditions',
            type: {
              name: 'Composite',
              className: 'ExitConditions'
            }
          },
          resourceFiles: {
            required: false,
            serializedName: 'resourceFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ResourceFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ResourceFile'
                  }
              }
            }
          },
          environmentSettings: {
            required: false,
            serializedName: 'environmentSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentSettingElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentSetting'
                  }
              }
            }
          },
          affinityInfo: {
            required: false,
            serializedName: 'affinityInfo',
            type: {
              name: 'Composite',
              className: 'AffinityInformation'
            }
          },
          constraints: {
            required: false,
            serializedName: 'constraints',
            type: {
              name: 'Composite',
              className: 'TaskConstraints'
            }
          },
          userIdentity: {
            required: false,
            serializedName: 'userIdentity',
            type: {
              name: 'Composite',
              className: 'UserIdentity'
            }
          },
          multiInstanceSettings: {
            required: false,
            serializedName: 'multiInstanceSettings',
            type: {
              name: 'Composite',
              className: 'MultiInstanceSettings'
            }
          },
          dependsOn: {
            required: false,
            serializedName: 'dependsOn',
            type: {
              name: 'Composite',
              className: 'TaskDependencies'
            }
          },
          applicationPackageReferences: {
            required: false,
            serializedName: 'applicationPackageReferences',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationPackageReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationPackageReference'
                  }
              }
            }
          },
          authenticationTokenSettings: {
            required: false,
            serializedName: 'authenticationTokenSettings',
            type: {
              name: 'Composite',
              className: 'AuthenticationTokenSettings'
            }
          }
        }
      }
    };
  }
}

module.exports = TaskAddParameter;
