/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the TokenInfo class.
 * @constructor
 * Information about a token returned by an analyzer.
 *
 * @member {string} [token] The token returned by the analyzer.
 *
 * @member {number} [startOffset] The index of the first character of the token
 * in the input text.
 *
 * @member {number} [endOffset] The index of the last character of the token in
 * the input text.
 *
 * @member {number} [position] The position of the token in the input text
 * relative to other tokens. The first token in the input text has position 0,
 * the next has position 1, and so on. Depending on the analyzer used, some
 * tokens might have the same position, for example if they are synonyms of
 * each other.
 *
 */
class TokenInfo {
  constructor() {
  }

  /**
   * Defines the metadata of TokenInfo
   *
   * @returns {object} metadata of TokenInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TokenInfo',
      type: {
        name: 'Composite',
        className: 'TokenInfo',
        modelProperties: {
          token: {
            required: false,
            readOnly: true,
            serializedName: 'token',
            type: {
              name: 'String'
            }
          },
          startOffset: {
            required: false,
            readOnly: true,
            serializedName: 'startOffset',
            type: {
              name: 'Number'
            }
          },
          endOffset: {
            required: false,
            readOnly: true,
            serializedName: 'endOffset',
            type: {
              name: 'Number'
            }
          },
          position: {
            required: false,
            readOnly: true,
            serializedName: 'position',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = TokenInfo;
