/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the ScoringFunction class.
 * @constructor
 * Abstract base class for functions that can modify document scores during
 * ranking.
 *
 * @member {string} fieldName The name of the field used as input to the
 * scoring function.
 *
 * @member {number} boost A multiplier for the raw score. Must be a positive
 * number not equal to 1.0.
 *
 * @member {string} [interpolation] A value indicating how boosting will be
 * interpolated across document scores; defaults to "Linear". Possible values
 * include: 'linear', 'constant', 'quadratic', 'logarithmic'
 *
 * @member {string} type Polymorphic Discriminator
 *
 */
class ScoringFunction {
  constructor() {
  }

  /**
   * Defines the metadata of ScoringFunction
   *
   * @returns {object} metadata of ScoringFunction
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ScoringFunction',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'ScoringFunction',
        className: 'ScoringFunction',
        modelProperties: {
          fieldName: {
            required: true,
            serializedName: 'fieldName',
            type: {
              name: 'String'
            }
          },
          boost: {
            required: true,
            serializedName: 'boost',
            type: {
              name: 'Number'
            }
          },
          interpolation: {
            required: false,
            serializedName: 'interpolation',
            type: {
              name: 'Enum',
              allowedValues: [ 'linear', 'constant', 'quadratic', 'logarithmic' ]
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ScoringFunction;
