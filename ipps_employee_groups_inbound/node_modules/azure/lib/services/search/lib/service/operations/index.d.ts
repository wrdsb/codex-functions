/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * DataSources
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SearchServiceClient.
 */
export interface DataSources {


    /**
     * Creates a new Azure Search datasource or updates a datasource if it already
     * exists.
     *
     * @param {string} dataSourceName The name of the datasource to create or
     * update.
     *
     * @param {object} dataSource The definition of the datasource to create or
     * update.
     *
     * @param {string} dataSource.name The name of the datasource.
     *
     * @param {string} [dataSource.description] The description of the datasource.
     *
     * @param {object} dataSource.type The type of the datasource.
     *
     * @param {string} [dataSource.type.name]
     *
     * @param {object} dataSource.credentials Credentials for the datasource.
     *
     * @param {string} dataSource.credentials.connectionString The connection
     * string for the datasource.
     *
     * @param {object} dataSource.container The data container for the datasource.
     *
     * @param {string} dataSource.container.name The name of the table or view (for
     * Azure SQL data source) or collection (for DocumentDB data source) that will
     * be indexed.
     *
     * @param {string} [dataSource.container.query] A query that is applied to this
     * data container. The syntax and meaning of this parameter is
     * datasource-specific. Not supported by Azure SQL datasources.
     *
     * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {string} [dataSource.eTag] The ETag of the DataSource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(dataSourceName: string, dataSource: models.DataSource, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSource>>;

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already
     * exists.
     *
     * @param {string} dataSourceName The name of the datasource to create or
     * update.
     *
     * @param {object} dataSource The definition of the datasource to create or
     * update.
     *
     * @param {string} dataSource.name The name of the datasource.
     *
     * @param {string} [dataSource.description] The description of the datasource.
     *
     * @param {object} dataSource.type The type of the datasource.
     *
     * @param {string} [dataSource.type.name]
     *
     * @param {object} dataSource.credentials Credentials for the datasource.
     *
     * @param {string} dataSource.credentials.connectionString The connection
     * string for the datasource.
     *
     * @param {object} dataSource.container The data container for the datasource.
     *
     * @param {string} dataSource.container.name The name of the table or view (for
     * Azure SQL data source) or collection (for DocumentDB data source) that will
     * be indexed.
     *
     * @param {string} [dataSource.container.query] A query that is applied to this
     * data container. The syntax and meaning of this parameter is
     * datasource-specific. Not supported by Azure SQL datasources.
     *
     * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {string} [dataSource.eTag] The ETag of the DataSource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(dataSourceName: string, dataSource: models.DataSource, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSource>;
    createOrUpdate(dataSourceName: string, dataSource: models.DataSource, callback: ServiceCallback<models.DataSource>): void;
    createOrUpdate(dataSourceName: string, dataSource: models.DataSource, options: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSource>): void;


    /**
     * Deletes an Azure Search datasource.
     *
     * @param {string} dataSourceName The name of the datasource to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(dataSourceName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an Azure Search datasource.
     *
     * @param {string} dataSourceName The name of the datasource to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(dataSourceName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(dataSourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(dataSourceName: string, options: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param {string} dataSourceName The name of the datasource to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(dataSourceName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSource>>;

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param {string} dataSourceName The name of the datasource to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(dataSourceName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSource>;
    get(dataSourceName: string, callback: ServiceCallback<models.DataSource>): void;
    get(dataSourceName: string, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSource>): void;


    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSourceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSourceListResult>>;

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSourceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSourceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSourceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSourceListResult>;
    list(callback: ServiceCallback<models.DataSourceListResult>): void;
    list(options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSourceListResult>): void;


    /**
     * Creates a new Azure Search datasource.
     *
     * @param {object} dataSource The definition of the datasource to create.
     *
     * @param {string} dataSource.name The name of the datasource.
     *
     * @param {string} [dataSource.description] The description of the datasource.
     *
     * @param {object} dataSource.type The type of the datasource.
     *
     * @param {string} [dataSource.type.name]
     *
     * @param {object} dataSource.credentials Credentials for the datasource.
     *
     * @param {string} dataSource.credentials.connectionString The connection
     * string for the datasource.
     *
     * @param {object} dataSource.container The data container for the datasource.
     *
     * @param {string} dataSource.container.name The name of the table or view (for
     * Azure SQL data source) or collection (for DocumentDB data source) that will
     * be indexed.
     *
     * @param {string} [dataSource.container.query] A query that is applied to this
     * data container. The syntax and meaning of this parameter is
     * datasource-specific. Not supported by Azure SQL datasources.
     *
     * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {string} [dataSource.eTag] The ETag of the DataSource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(dataSource: models.DataSource, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSource>>;

    /**
     * Creates a new Azure Search datasource.
     *
     * @param {object} dataSource The definition of the datasource to create.
     *
     * @param {string} dataSource.name The name of the datasource.
     *
     * @param {string} [dataSource.description] The description of the datasource.
     *
     * @param {object} dataSource.type The type of the datasource.
     *
     * @param {string} [dataSource.type.name]
     *
     * @param {object} dataSource.credentials Credentials for the datasource.
     *
     * @param {string} dataSource.credentials.connectionString The connection
     * string for the datasource.
     *
     * @param {object} dataSource.container The data container for the datasource.
     *
     * @param {string} dataSource.container.name The name of the table or view (for
     * Azure SQL data source) or collection (for DocumentDB data source) that will
     * be indexed.
     *
     * @param {string} [dataSource.container.query] A query that is applied to this
     * data container. The syntax and meaning of this parameter is
     * datasource-specific. Not supported by Azure SQL datasources.
     *
     * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
     * detection policy for the datasource.
     *
     * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
     * Discriminator
     *
     * @param {string} [dataSource.eTag] The ETag of the DataSource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(dataSource: models.DataSource, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSource>;
    create(dataSource: models.DataSource, callback: ServiceCallback<models.DataSource>): void;
    create(dataSource: models.DataSource, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSource>): void;
}

/**
 * @class
 * Indexers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SearchServiceClient.
 */
export interface Indexers {


    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param {string} indexerName The name of the indexer to reset.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetWithHttpOperationResponse(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param {string} indexerName The name of the indexer to reset.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reset(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    reset(indexerName: string, callback: ServiceCallback<void>): void;
    reset(indexerName: string, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param {string} indexerName The name of the indexer to run.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    runWithHttpOperationResponse(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param {string} indexerName The name of the indexer to run.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    run(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    run(indexerName: string, callback: ServiceCallback<void>): void;
    run(indexerName: string, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new Azure Search indexer or updates an indexer if it already
     * exists.
     *
     * @param {string} indexerName The name of the indexer to create or update.
     *
     * @param {object} indexer The definition of the indexer to create or update.
     *
     * @param {string} indexer.name The name of the indexer.
     *
     * @param {string} [indexer.description] The description of the indexer.
     *
     * @param {string} indexer.dataSourceName The name of the datasource from which
     * this indexer reads data.
     *
     * @param {string} indexer.targetIndexName The name of the index to which this
     * indexer writes data.
     *
     * @param {object} [indexer.schedule] The schedule for this indexer.
     *
     * @param {moment.duration} indexer.schedule.interval The interval of time
     * between indexer executions.
     *
     * @param {date} [indexer.schedule.startTime] The time when an indexer should
     * start running.
     *
     * @param {object} [indexer.parameters] Parameters for indexer execution.
     *
     * @param {number} [indexer.parameters.batchSize] The number of items that are
     * read from the data source and indexed as a single batch in order to improve
     * performance. The default depends on the data source type.
     *
     * @param {number} [indexer.parameters.maxFailedItems] The maximum number of
     * items that can fail indexing for indexer execution to still be considered
     * successful. -1 means no limit. Default is 0.
     *
     * @param {number} [indexer.parameters.maxFailedItemsPerBatch] The maximum
     * number of items in a single batch that can fail indexing for the batch to
     * still be considered successful. -1 means no limit. Default is 0.
     *
     * @param {boolean} [indexer.parameters.base64EncodeKeys] Whether indexer will
     * base64-encode all values that are inserted into key field of the target
     * index. This is needed if keys can contain characters that are invalid in
     * keys (such as dot '.'). Default is false.
     *
     * @param {object} [indexer.parameters.configuration] A dictionary of
     * indexer-specific configuration properties. Each name is the name of a
     * specific property. Each value must be of a primitive type.
     *
     * @param {array} [indexer.fieldMappings] Defines mappings between fields in
     * the data source and corresponding target fields in the index.
     *
     * @param {boolean} [indexer.isDisabled] A value indicating whether the indexer
     * is disabled. Default is false.
     *
     * @param {string} [indexer.eTag] The ETag of the Indexer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Indexer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(indexerName: string, indexer: models.Indexer, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Indexer>>;

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already
     * exists.
     *
     * @param {string} indexerName The name of the indexer to create or update.
     *
     * @param {object} indexer The definition of the indexer to create or update.
     *
     * @param {string} indexer.name The name of the indexer.
     *
     * @param {string} [indexer.description] The description of the indexer.
     *
     * @param {string} indexer.dataSourceName The name of the datasource from which
     * this indexer reads data.
     *
     * @param {string} indexer.targetIndexName The name of the index to which this
     * indexer writes data.
     *
     * @param {object} [indexer.schedule] The schedule for this indexer.
     *
     * @param {moment.duration} indexer.schedule.interval The interval of time
     * between indexer executions.
     *
     * @param {date} [indexer.schedule.startTime] The time when an indexer should
     * start running.
     *
     * @param {object} [indexer.parameters] Parameters for indexer execution.
     *
     * @param {number} [indexer.parameters.batchSize] The number of items that are
     * read from the data source and indexed as a single batch in order to improve
     * performance. The default depends on the data source type.
     *
     * @param {number} [indexer.parameters.maxFailedItems] The maximum number of
     * items that can fail indexing for indexer execution to still be considered
     * successful. -1 means no limit. Default is 0.
     *
     * @param {number} [indexer.parameters.maxFailedItemsPerBatch] The maximum
     * number of items in a single batch that can fail indexing for the batch to
     * still be considered successful. -1 means no limit. Default is 0.
     *
     * @param {boolean} [indexer.parameters.base64EncodeKeys] Whether indexer will
     * base64-encode all values that are inserted into key field of the target
     * index. This is needed if keys can contain characters that are invalid in
     * keys (such as dot '.'). Default is false.
     *
     * @param {object} [indexer.parameters.configuration] A dictionary of
     * indexer-specific configuration properties. Each name is the name of a
     * specific property. Each value must be of a primitive type.
     *
     * @param {array} [indexer.fieldMappings] Defines mappings between fields in
     * the data source and corresponding target fields in the index.
     *
     * @param {boolean} [indexer.isDisabled] A value indicating whether the indexer
     * is disabled. Default is false.
     *
     * @param {string} [indexer.eTag] The ETag of the Indexer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Indexer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Indexer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Indexer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(indexerName: string, indexer: models.Indexer, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<models.Indexer>;
    createOrUpdate(indexerName: string, indexer: models.Indexer, callback: ServiceCallback<models.Indexer>): void;
    createOrUpdate(indexerName: string, indexer: models.Indexer, options: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Indexer>): void;


    /**
     * Deletes an Azure Search indexer.
     *
     * @param {string} indexerName The name of the indexer to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an Azure Search indexer.
     *
     * @param {string} indexerName The name of the indexer to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(indexerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(indexerName: string, options: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param {string} indexerName The name of the indexer to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Indexer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Indexer>>;

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param {string} indexerName The name of the indexer to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Indexer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Indexer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Indexer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.Indexer>;
    get(indexerName: string, callback: ServiceCallback<models.Indexer>): void;
    get(indexerName: string, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Indexer>): void;


    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IndexerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IndexerListResult>>;

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IndexerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IndexerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IndexerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.IndexerListResult>;
    list(callback: ServiceCallback<models.IndexerListResult>): void;
    list(options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IndexerListResult>): void;


    /**
     * Creates a new Azure Search indexer.
     *
     * @param {object} indexer The definition of the indexer to create.
     *
     * @param {string} indexer.name The name of the indexer.
     *
     * @param {string} [indexer.description] The description of the indexer.
     *
     * @param {string} indexer.dataSourceName The name of the datasource from which
     * this indexer reads data.
     *
     * @param {string} indexer.targetIndexName The name of the index to which this
     * indexer writes data.
     *
     * @param {object} [indexer.schedule] The schedule for this indexer.
     *
     * @param {moment.duration} indexer.schedule.interval The interval of time
     * between indexer executions.
     *
     * @param {date} [indexer.schedule.startTime] The time when an indexer should
     * start running.
     *
     * @param {object} [indexer.parameters] Parameters for indexer execution.
     *
     * @param {number} [indexer.parameters.batchSize] The number of items that are
     * read from the data source and indexed as a single batch in order to improve
     * performance. The default depends on the data source type.
     *
     * @param {number} [indexer.parameters.maxFailedItems] The maximum number of
     * items that can fail indexing for indexer execution to still be considered
     * successful. -1 means no limit. Default is 0.
     *
     * @param {number} [indexer.parameters.maxFailedItemsPerBatch] The maximum
     * number of items in a single batch that can fail indexing for the batch to
     * still be considered successful. -1 means no limit. Default is 0.
     *
     * @param {boolean} [indexer.parameters.base64EncodeKeys] Whether indexer will
     * base64-encode all values that are inserted into key field of the target
     * index. This is needed if keys can contain characters that are invalid in
     * keys (such as dot '.'). Default is false.
     *
     * @param {object} [indexer.parameters.configuration] A dictionary of
     * indexer-specific configuration properties. Each name is the name of a
     * specific property. Each value must be of a primitive type.
     *
     * @param {array} [indexer.fieldMappings] Defines mappings between fields in
     * the data source and corresponding target fields in the index.
     *
     * @param {boolean} [indexer.isDisabled] A value indicating whether the indexer
     * is disabled. Default is false.
     *
     * @param {string} [indexer.eTag] The ETag of the Indexer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Indexer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(indexer: models.Indexer, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Indexer>>;

    /**
     * Creates a new Azure Search indexer.
     *
     * @param {object} indexer The definition of the indexer to create.
     *
     * @param {string} indexer.name The name of the indexer.
     *
     * @param {string} [indexer.description] The description of the indexer.
     *
     * @param {string} indexer.dataSourceName The name of the datasource from which
     * this indexer reads data.
     *
     * @param {string} indexer.targetIndexName The name of the index to which this
     * indexer writes data.
     *
     * @param {object} [indexer.schedule] The schedule for this indexer.
     *
     * @param {moment.duration} indexer.schedule.interval The interval of time
     * between indexer executions.
     *
     * @param {date} [indexer.schedule.startTime] The time when an indexer should
     * start running.
     *
     * @param {object} [indexer.parameters] Parameters for indexer execution.
     *
     * @param {number} [indexer.parameters.batchSize] The number of items that are
     * read from the data source and indexed as a single batch in order to improve
     * performance. The default depends on the data source type.
     *
     * @param {number} [indexer.parameters.maxFailedItems] The maximum number of
     * items that can fail indexing for indexer execution to still be considered
     * successful. -1 means no limit. Default is 0.
     *
     * @param {number} [indexer.parameters.maxFailedItemsPerBatch] The maximum
     * number of items in a single batch that can fail indexing for the batch to
     * still be considered successful. -1 means no limit. Default is 0.
     *
     * @param {boolean} [indexer.parameters.base64EncodeKeys] Whether indexer will
     * base64-encode all values that are inserted into key field of the target
     * index. This is needed if keys can contain characters that are invalid in
     * keys (such as dot '.'). Default is false.
     *
     * @param {object} [indexer.parameters.configuration] A dictionary of
     * indexer-specific configuration properties. Each name is the name of a
     * specific property. Each value must be of a primitive type.
     *
     * @param {array} [indexer.fieldMappings] Defines mappings between fields in
     * the data source and corresponding target fields in the index.
     *
     * @param {boolean} [indexer.isDisabled] A value indicating whether the indexer
     * is disabled. Default is false.
     *
     * @param {string} [indexer.eTag] The ETag of the Indexer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Indexer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Indexer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Indexer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(indexer: models.Indexer, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.Indexer>;
    create(indexer: models.Indexer, callback: ServiceCallback<models.Indexer>): void;
    create(indexer: models.Indexer, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Indexer>): void;


    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param {string} indexerName The name of the indexer for which to retrieve
     * status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IndexerExecutionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatusWithHttpOperationResponse(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IndexerExecutionInfo>>;

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param {string} indexerName The name of the indexer for which to retrieve
     * status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IndexerExecutionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IndexerExecutionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IndexerExecutionInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatus(indexerName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.IndexerExecutionInfo>;
    getStatus(indexerName: string, callback: ServiceCallback<models.IndexerExecutionInfo>): void;
    getStatus(indexerName: string, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IndexerExecutionInfo>): void;
}

/**
 * @class
 * Indexes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SearchServiceClient.
 */
export interface Indexes {


    /**
     * Creates a new Azure Search index.
     *
     * @param {object} index The definition of the index to create.
     *
     * @param {string} index.name The name of the index.
     *
     * @param {array} index.fields The fields of the index.
     *
     * @param {array} [index.scoringProfiles] The scoring profiles for the index.
     *
     * @param {string} [index.defaultScoringProfile] The name of the scoring
     * profile to use if none is specified in the query. If this property is not
     * set and no scoring profile is specified in the query, then default scoring
     * (tf-idf) will be used.
     *
     * @param {object} [index.corsOptions] Options to control Cross-Origin Resource
     * Sharing (CORS) for the index.
     *
     * @param {array} index.corsOptions.allowedOrigins The list of origins from
     * which JavaScript code will be granted access to your index. Can contain a
     * list of hosts of the form
     * {protocol}://{fully-qualified-domain-name}[:{port#}], or a single '*' to
     * allow all origins (not recommended).
     *
     * @param {number} [index.corsOptions.maxAgeInSeconds] The duration for which
     * browsers should cache CORS preflight responses. Defaults to 5 mintues.
     *
     * @param {array} [index.suggesters] The suggesters for the index.
     *
     * @param {array} [index.analyzers] The analyzers for the index.
     *
     * @param {array} [index.tokenizers] The tokenizers for the index.
     *
     * @param {array} [index.tokenFilters] The token filters for the index.
     *
     * @param {array} [index.charFilters] The character filters for the index.
     *
     * @param {string} [index.eTag] The ETag of the index.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Index>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(index: models.Index, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Index>>;

    /**
     * Creates a new Azure Search index.
     *
     * @param {object} index The definition of the index to create.
     *
     * @param {string} index.name The name of the index.
     *
     * @param {array} index.fields The fields of the index.
     *
     * @param {array} [index.scoringProfiles] The scoring profiles for the index.
     *
     * @param {string} [index.defaultScoringProfile] The name of the scoring
     * profile to use if none is specified in the query. If this property is not
     * set and no scoring profile is specified in the query, then default scoring
     * (tf-idf) will be used.
     *
     * @param {object} [index.corsOptions] Options to control Cross-Origin Resource
     * Sharing (CORS) for the index.
     *
     * @param {array} index.corsOptions.allowedOrigins The list of origins from
     * which JavaScript code will be granted access to your index. Can contain a
     * list of hosts of the form
     * {protocol}://{fully-qualified-domain-name}[:{port#}], or a single '*' to
     * allow all origins (not recommended).
     *
     * @param {number} [index.corsOptions.maxAgeInSeconds] The duration for which
     * browsers should cache CORS preflight responses. Defaults to 5 mintues.
     *
     * @param {array} [index.suggesters] The suggesters for the index.
     *
     * @param {array} [index.analyzers] The analyzers for the index.
     *
     * @param {array} [index.tokenizers] The tokenizers for the index.
     *
     * @param {array} [index.tokenFilters] The token filters for the index.
     *
     * @param {array} [index.charFilters] The character filters for the index.
     *
     * @param {string} [index.eTag] The ETag of the index.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Index} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Index} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Index} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(index: models.Index, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.Index>;
    create(index: models.Index, callback: ServiceCallback<models.Index>): void;
    create(index: models.Index, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Index>): void;


    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.select] Selects which properties of the index
     * definitions to retrieve. Specified as a comma-separated list of JSON
     * property names, or '*' for all properties. The default is all properties.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IndexListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { select? : string, searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IndexListResult>>;

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.select] Selects which properties of the index
     * definitions to retrieve. Specified as a comma-separated list of JSON
     * property names, or '*' for all properties. The default is all properties.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IndexListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IndexListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IndexListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { select? : string, searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.IndexListResult>;
    list(callback: ServiceCallback<models.IndexListResult>): void;
    list(options: { select? : string, searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IndexListResult>): void;


    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param {string} indexName The definition of the index to create or update.
     *
     * @param {object} index The definition of the index to create or update.
     *
     * @param {string} index.name The name of the index.
     *
     * @param {array} index.fields The fields of the index.
     *
     * @param {array} [index.scoringProfiles] The scoring profiles for the index.
     *
     * @param {string} [index.defaultScoringProfile] The name of the scoring
     * profile to use if none is specified in the query. If this property is not
     * set and no scoring profile is specified in the query, then default scoring
     * (tf-idf) will be used.
     *
     * @param {object} [index.corsOptions] Options to control Cross-Origin Resource
     * Sharing (CORS) for the index.
     *
     * @param {array} index.corsOptions.allowedOrigins The list of origins from
     * which JavaScript code will be granted access to your index. Can contain a
     * list of hosts of the form
     * {protocol}://{fully-qualified-domain-name}[:{port#}], or a single '*' to
     * allow all origins (not recommended).
     *
     * @param {number} [index.corsOptions.maxAgeInSeconds] The duration for which
     * browsers should cache CORS preflight responses. Defaults to 5 mintues.
     *
     * @param {array} [index.suggesters] The suggesters for the index.
     *
     * @param {array} [index.analyzers] The analyzers for the index.
     *
     * @param {array} [index.tokenizers] The tokenizers for the index.
     *
     * @param {array} [index.tokenFilters] The token filters for the index.
     *
     * @param {array} [index.charFilters] The character filters for the index.
     *
     * @param {string} [index.eTag] The ETag of the index.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.allowIndexDowntime] Allows new analyzers,
     * tokenizers, token filters, or char filters to be added to an index by taking
     * the index offline for at least a few seconds. This temporarily causes
     * indexing and query requests to fail. Performance and write availability of
     * the index can be impaired for several minutes after the index is updated, or
     * longer for very large indexes.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Index>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(indexName: string, index: models.Index, options?: { allowIndexDowntime? : boolean, searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Index>>;

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param {string} indexName The definition of the index to create or update.
     *
     * @param {object} index The definition of the index to create or update.
     *
     * @param {string} index.name The name of the index.
     *
     * @param {array} index.fields The fields of the index.
     *
     * @param {array} [index.scoringProfiles] The scoring profiles for the index.
     *
     * @param {string} [index.defaultScoringProfile] The name of the scoring
     * profile to use if none is specified in the query. If this property is not
     * set and no scoring profile is specified in the query, then default scoring
     * (tf-idf) will be used.
     *
     * @param {object} [index.corsOptions] Options to control Cross-Origin Resource
     * Sharing (CORS) for the index.
     *
     * @param {array} index.corsOptions.allowedOrigins The list of origins from
     * which JavaScript code will be granted access to your index. Can contain a
     * list of hosts of the form
     * {protocol}://{fully-qualified-domain-name}[:{port#}], or a single '*' to
     * allow all origins (not recommended).
     *
     * @param {number} [index.corsOptions.maxAgeInSeconds] The duration for which
     * browsers should cache CORS preflight responses. Defaults to 5 mintues.
     *
     * @param {array} [index.suggesters] The suggesters for the index.
     *
     * @param {array} [index.analyzers] The analyzers for the index.
     *
     * @param {array} [index.tokenizers] The tokenizers for the index.
     *
     * @param {array} [index.tokenFilters] The token filters for the index.
     *
     * @param {array} [index.charFilters] The character filters for the index.
     *
     * @param {string} [index.eTag] The ETag of the index.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.allowIndexDowntime] Allows new analyzers,
     * tokenizers, token filters, or char filters to be added to an index by taking
     * the index offline for at least a few seconds. This temporarily causes
     * indexing and query requests to fail. Performance and write availability of
     * the index can be impaired for several minutes after the index is updated, or
     * longer for very large indexes.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Index} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Index} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Index} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(indexName: string, index: models.Index, options?: { allowIndexDowntime? : boolean, searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<models.Index>;
    createOrUpdate(indexName: string, index: models.Index, callback: ServiceCallback<models.Index>): void;
    createOrUpdate(indexName: string, index: models.Index, options: { allowIndexDowntime? : boolean, searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Index>): void;


    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param {string} indexName The name of the index to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(indexName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param {string} indexName The name of the index to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.accessCondition] Additional parameters for the
     * operation
     *
     * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
     * condition. The operation will be performed only if the ETag on the server
     * matches this value.
     *
     * @param {string} [options.accessCondition.ifNoneMatch] Defines the
     * If-None-Match condition. The operation will be performed only if the ETag on
     * the server does not match this value.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(indexName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(indexName: string, callback: ServiceCallback<void>): void;
    deleteMethod(indexName: string, options: { searchRequestOptions? : models.SearchRequestOptions, accessCondition? : models.AccessCondition, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param {string} indexName The name of the index to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Index>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(indexName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Index>>;

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param {string} indexName The name of the index to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Index} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Index} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Index} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(indexName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.Index>;
    get(indexName: string, callback: ServiceCallback<models.Index>): void;
    get(indexName: string, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Index>): void;


    /**
     * Returns statistics for the given index, including a document count and
     * storage usage.
     *
     * @param {string} indexName The name of the index for which to retrieve
     * statistics.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IndexGetStatisticsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatisticsWithHttpOperationResponse(indexName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IndexGetStatisticsResult>>;

    /**
     * Returns statistics for the given index, including a document count and
     * storage usage.
     *
     * @param {string} indexName The name of the index for which to retrieve
     * statistics.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IndexGetStatisticsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IndexGetStatisticsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IndexGetStatisticsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatistics(indexName: string, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.IndexGetStatisticsResult>;
    getStatistics(indexName: string, callback: ServiceCallback<models.IndexGetStatisticsResult>): void;
    getStatistics(indexName: string, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IndexGetStatisticsResult>): void;


    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param {string} indexName The name of the index for which to test an
     * analyzer.
     *
     * @param {object} request The text and analyzer or analysis components to
     * test.
     *
     * @param {string} request.text The text to break into tokens.
     *
     * @param {object} [request.analyzer] The name of the analyzer to use to break
     * the given text. If this parameter is not specified, you must specify a
     * tokenizer instead. The tokenizer and analyzer parameters are mutually
     * exclusive.
     *
     * @param {string} [request.analyzer.name]
     *
     * @param {object} [request.tokenizer] The name of the tokenizer to use to
     * break the given text. If this parameter is not specified, you must specify
     * an analyzer instead. The tokenizer and analyzer parameters are mutually
     * exclusive.
     *
     * @param {string} [request.tokenizer.name]
     *
     * @param {array} [request.tokenFilters] An optional list of token filters to
     * use when breaking the given text. This parameter can only be set when using
     * the tokenizer parameter.
     *
     * @param {array} [request.charFilters] An optional list of character filters
     * to use when breaking the given text. This parameter can only be set when
     * using the tokenizer parameter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AnalyzeResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    analyzeWithHttpOperationResponse(indexName: string, request: models.AnalyzeRequest, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AnalyzeResult>>;

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param {string} indexName The name of the index for which to test an
     * analyzer.
     *
     * @param {object} request The text and analyzer or analysis components to
     * test.
     *
     * @param {string} request.text The text to break into tokens.
     *
     * @param {object} [request.analyzer] The name of the analyzer to use to break
     * the given text. If this parameter is not specified, you must specify a
     * tokenizer instead. The tokenizer and analyzer parameters are mutually
     * exclusive.
     *
     * @param {string} [request.analyzer.name]
     *
     * @param {object} [request.tokenizer] The name of the tokenizer to use to
     * break the given text. If this parameter is not specified, you must specify
     * an analyzer instead. The tokenizer and analyzer parameters are mutually
     * exclusive.
     *
     * @param {string} [request.tokenizer.name]
     *
     * @param {array} [request.tokenFilters] An optional list of token filters to
     * use when breaking the given text. This parameter can only be set when using
     * the tokenizer parameter.
     *
     * @param {array} [request.charFilters] An optional list of character filters
     * to use when breaking the given text. This parameter can only be set when
     * using the tokenizer parameter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.searchRequestOptions] Additional parameters for the
     * operation
     *
     * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
     * sent with the request to help with debugging.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AnalyzeResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AnalyzeResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AnalyzeResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    analyze(indexName: string, request: models.AnalyzeRequest, options?: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.AnalyzeResult>;
    analyze(indexName: string, request: models.AnalyzeRequest, callback: ServiceCallback<models.AnalyzeResult>): void;
    analyze(indexName: string, request: models.AnalyzeRequest, options: { searchRequestOptions? : models.SearchRequestOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AnalyzeResult>): void;
}
