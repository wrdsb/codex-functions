/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ScoringProfile class.
 * @constructor
 * Defines parameters for an Azure Search index that influence scoring in
 * search queries.
 *
 * @member {string} name The name of the scoring profile.
 *
 * @member {object} [textWeights] Parameters that boost scoring based on text
 * matches in certain index fields.
 *
 * @member {object} [textWeights.weights] The dictionary of per-field weights
 * to boost document scoring. The keys are field names and the values are the
 * weights for each field.
 *
 * @member {array} [functions] The collection of functions that influence the
 * scoring of documents.
 *
 * @member {string} [functionAggregation] A value indicating how the results of
 * individual scoring functions should be combined. Defaults to "Sum". Ignored
 * if there are no scoring functions. Possible values include: 'sum',
 * 'average', 'minimum', 'maximum', 'firstMatching'
 *
 */
class ScoringProfile {
  constructor() {
  }

  /**
   * Defines the metadata of ScoringProfile
   *
   * @returns {object} metadata of ScoringProfile
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ScoringProfile',
      type: {
        name: 'Composite',
        className: 'ScoringProfile',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          textWeights: {
            required: false,
            serializedName: 'text',
            type: {
              name: 'Composite',
              className: 'TextWeights'
            }
          },
          functions: {
            required: false,
            serializedName: 'functions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ScoringFunctionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'type',
                      clientName: 'type'
                    },
                    uberParent: 'ScoringFunction',
                    className: 'ScoringFunction'
                  }
              }
            }
          },
          functionAggregation: {
            required: false,
            serializedName: 'functionAggregation',
            type: {
              name: 'Enum',
              allowedValues: [ 'sum', 'average', 'minimum', 'maximum', 'firstMatching' ]
            }
          }
        }
      }
    };
  }
}

module.exports = ScoringProfile;
