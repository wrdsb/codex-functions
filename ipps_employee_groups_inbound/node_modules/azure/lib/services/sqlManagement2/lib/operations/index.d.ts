/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Capabilities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Capabilities {


    /**
     * Gets the capabilities available for the specified location.
     *
     * @param {string} locationId The location id whose capabilities are retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocationCapabilities>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(locationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocationCapabilities>>;

    /**
     * Gets the capabilities available for the specified location.
     *
     * @param {string} locationId The location id whose capabilities are retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocationCapabilities} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocationCapabilities} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocationCapabilities} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(locationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocationCapabilities>;
    listByLocation(locationId: string, callback: ServiceCallback<models.LocationCapabilities>): void;
    listByLocation(locationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocationCapabilities>): void;
}

/**
 * @class
 * FirewallRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface FirewallRules {


    /**
     * Creates or updates a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the
     * firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all
     * Azure-internal IP addresses.
     *
     * @param {string} parameters.endIpAddress The end IP address of the firewall
     * rule. Must be IPv4 format. Must be greater than or equal to startIpAddress.
     * Use value '0.0.0.0' to represent all Azure-internal IP addresses.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRule>>;

    /**
     * Creates or updates a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the
     * firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all
     * Azure-internal IP addresses.
     *
     * @param {string} parameters.endIpAddress The end IP address of the firewall
     * rule. Must be IPv4 format. Must be greater than or equal to startIpAddress.
     * Use value '0.0.0.0' to represent all Azure-internal IP addresses.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRule>;
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, callback: ServiceCallback<models.FirewallRule>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRule>): void;


    /**
     * Deletes a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRule>>;

    /**
     * Gets a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRule>;
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, callback: ServiceCallback<models.FirewallRule>): void;
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRule>): void;


    /**
     * Returns a list of firewall rules.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRuleListResult>>;

    /**
     * Returns a list of firewall rules.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRuleListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.FirewallRuleListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRuleListResult>): void;
}

/**
 * @class
 * Databases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Databases {


    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'Basic', 'S0',
     * 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'System',
     * 'System2', 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    importMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'Basic', 'S0',
     * 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'System',
     * 'System2', 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    importMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    importMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    importMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createImportOperationWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    createImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    createImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Deletes a database replication link. Cannot be done during failover.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be dropped.
     *
     * @param {string} linkId The ID of the replication link to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteReplicationLinkWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a database replication link. Cannot be done during failover.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be dropped.
     *
     * @param {string} linkId The ID of the replication link to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    deleteReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to get the link for.
     *
     * @param {string} linkId The replication link ID to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicationLink>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReplicationLinkWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicationLink>>;

    /**
     * Gets a database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to get the link for.
     *
     * @param {string} linkId The replication link ID to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicationLink} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicationLink} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicationLink} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicationLink>;
    getReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<models.ReplicationLink>): void;
    getReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicationLink>): void;


    /**
     * Failover the database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverReplicationLinkWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Failover the database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failoverReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failoverReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    failoverReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Force failover the database replication link, which may result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverReplicationLinkAllowDataLossWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Force failover the database replication link, which may result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failoverReplicationLinkAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failoverReplicationLinkAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    failoverReplicationLinkAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a database's replication links.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to retrieve links for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicationLinkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listReplicationLinksWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicationLinkListResult>>;

    /**
     * Lists a database's replication links.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to retrieve links for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicationLinkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicationLinkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicationLinkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listReplicationLinks(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicationLinkListResult>;
    listReplicationLinks(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.ReplicationLinkListResult>): void;
    listReplicationLinks(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicationLinkListResult>): void;


    /**
     * Pauses a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to pause.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    pauseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Pauses a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to pause.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    pause(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    pause(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    pause(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resumes a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to resume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resumeWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resumes a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to resume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resume(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resume(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    resume(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a list of database restore points.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database from which to retrieve
     * available restore points.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestorePointListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRestorePointsWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestorePointListResult>>;

    /**
     * Returns a list of database restore points.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database from which to retrieve
     * available restore points.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestorePointListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestorePointListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestorePointListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRestorePoints(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestorePointListResult>;
    listRestorePoints(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.RestorePointListResult>): void;
    listRestorePoints(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestorePointListResult>): void;


    /**
     * Creates a new database or updates an existing database. Location is a
     * required property in the request body, and it must be the same as the
     * location of the SQL server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be operated on
     * (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.collation] The collation of the database. If
     * createMode is not Default, this value is ignored.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or
     * nonreadable) secondary replica of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, NonReadableSecondary, OnlineSecondary and
     * RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
     * Possible values include: 'Copy', 'Default', 'NonReadableSecondary',
     * 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore',
     * 'RestoreLongTermRetentionBackup'
     *
     * @param {string} [parameters.sourceDatabaseId] Conditional. If createMode is
     * Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery,
     * or Restore, then this value is required. Specifies the resource ID of the
     * source database. If createMode is NonReadableSecondary or OnlineSecondary,
     * the name of the source database must be the same as the new database being
     * created.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Conditional. If
     * createMode is Restore and sourceDatabaseId is the deleted database's
     * original resource id when it existed (as opposed to its current restorable
     * dropped database id), then this value is required. Specifies the time that
     * the database was deleted.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. If createMode is Restore, this
     * value is optional. Specifies the point in time (ISO8601 format) of the
     * source database that will be restored to create the new database. Must be
     * greater than or equal to the source database's earliestRestoreDate value.
     *
     * @param {date} [parameters.recoveryServicesRecoveryPointResourceId]
     * Conditional. If createMode is RestoreLongTermRetentionBackup, then this
     * value is required. Specifies the resource ID of the recovery point to
     * restore from.
     *
     * @param {string} [parameters.edition] The edition of the database. The
     * DatabaseEditions enumeration contains all the valid editions. If createMode
     * is NonReadableSecondary or OnlineSecondary, this value is ignored. To see
     * possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'Free',
     * 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes. If createMode is not Default, this value is ignored. To
     * see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {uuid} [parameters.requestedServiceObjectiveId] The configured
     * service level objective ID of the database. This is the service level
     * objective that is in the process of being applied to the database. Once
     * successfully updated, it will match the value of currentServiceObjectiveId
     * property. If requestedServiceObjectiveId and requestedServiceObjectiveName
     * are both updated, the value of requestedServiceObjectiveId overrides the
     * value of requestedServiceObjectiveName. To see possible values, query the
     * capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {string} [parameters.requestedServiceObjectiveName] The name of the
     * configured service level objective of the database. This is the service
     * level objective that is in the process of being applied to the database.
     * Once successfully updated, it will match the value of serviceLevelObjective
     * property. To see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6',
     * 'P11', 'P15', 'System', 'System2', 'ElasticPool'
     *
     * @param {string} [parameters.elasticPoolName] The name of the elastic pool
     * the database is in. If elasticPoolName and requestedServiceObjectiveName are
     * both updated, the value of requestedServiceObjectiveName is ignored. Not
     * supported for DataWarehouse edition.
     *
     * @param {string} [parameters.readScale] Conditional. If the database is a
     * geo-secondary, readScale indicates whether read-only connections are allowed
     * to this database or not. Not supported for DataWarehouse edition. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.sampleName] Indicates the name of the sample
     * schema to apply when creating this database. If createMode is not Default,
     * this value is ignored. Not supported for DataWarehouse edition. Possible
     * values include: 'AdventureWorksLT'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Creates a new database or updates an existing database. Location is a
     * required property in the request body, and it must be the same as the
     * location of the SQL server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be operated on
     * (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.collation] The collation of the database. If
     * createMode is not Default, this value is ignored.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or
     * nonreadable) secondary replica of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, NonReadableSecondary, OnlineSecondary and
     * RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
     * Possible values include: 'Copy', 'Default', 'NonReadableSecondary',
     * 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore',
     * 'RestoreLongTermRetentionBackup'
     *
     * @param {string} [parameters.sourceDatabaseId] Conditional. If createMode is
     * Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery,
     * or Restore, then this value is required. Specifies the resource ID of the
     * source database. If createMode is NonReadableSecondary or OnlineSecondary,
     * the name of the source database must be the same as the new database being
     * created.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Conditional. If
     * createMode is Restore and sourceDatabaseId is the deleted database's
     * original resource id when it existed (as opposed to its current restorable
     * dropped database id), then this value is required. Specifies the time that
     * the database was deleted.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. If createMode is Restore, this
     * value is optional. Specifies the point in time (ISO8601 format) of the
     * source database that will be restored to create the new database. Must be
     * greater than or equal to the source database's earliestRestoreDate value.
     *
     * @param {date} [parameters.recoveryServicesRecoveryPointResourceId]
     * Conditional. If createMode is RestoreLongTermRetentionBackup, then this
     * value is required. Specifies the resource ID of the recovery point to
     * restore from.
     *
     * @param {string} [parameters.edition] The edition of the database. The
     * DatabaseEditions enumeration contains all the valid editions. If createMode
     * is NonReadableSecondary or OnlineSecondary, this value is ignored. To see
     * possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'Free',
     * 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes. If createMode is not Default, this value is ignored. To
     * see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {uuid} [parameters.requestedServiceObjectiveId] The configured
     * service level objective ID of the database. This is the service level
     * objective that is in the process of being applied to the database. Once
     * successfully updated, it will match the value of currentServiceObjectiveId
     * property. If requestedServiceObjectiveId and requestedServiceObjectiveName
     * are both updated, the value of requestedServiceObjectiveId overrides the
     * value of requestedServiceObjectiveName. To see possible values, query the
     * capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {string} [parameters.requestedServiceObjectiveName] The name of the
     * configured service level objective of the database. This is the service
     * level objective that is in the process of being applied to the database.
     * Once successfully updated, it will match the value of serviceLevelObjective
     * property. To see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6',
     * 'P11', 'P15', 'System', 'System2', 'ElasticPool'
     *
     * @param {string} [parameters.elasticPoolName] The name of the elastic pool
     * the database is in. If elasticPoolName and requestedServiceObjectiveName are
     * both updated, the value of requestedServiceObjectiveName is ignored. Not
     * supported for DataWarehouse edition.
     *
     * @param {string} [parameters.readScale] Conditional. If the database is a
     * geo-secondary, readScale indicates whether read-only connections are allowed
     * to this database or not. Not supported for DataWarehouse edition. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.sampleName] Indicates the name of the sample
     * schema to apply when creating this database. If createMode is not Default,
     * this value is ignored. Not supported for DataWarehouse edition. Possible
     * values include: 'AdventureWorksLT'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, callback: ServiceCallback<models.Database>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Deletes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] A comma separated list of child objects to
     * expand in the response. Possible properties: serviceTierAdvisors,
     * transparentDataEncryption.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Gets a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] A comma separated list of child objects to
     * expand in the response. Possible properties: serviceTierAdvisors,
     * transparentDataEncryption.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Returns a list of databases in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] A comma separated list of child objects to
     * expand in the response. Possible properties: serviceTierAdvisors,
     * transparentDataEncryption.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of databases to return.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * Returns a list of databases in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] A comma separated list of child objects to
     * expand in the response. Possible properties: serviceTierAdvisors,
     * transparentDataEncryption.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of databases to return.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;


    /**
     * Returns database usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseMetricListResult>>;

    /**
     * Returns database usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseMetricListResult>;
    listUsages(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseMetricListResult>): void;
    listUsages(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseMetricListResult>): void;


    /**
     * Gets a service tier advisor.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {string} serviceTierAdvisorName The name of service tier advisor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceTierAdvisor>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getServiceTierAdvisorWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceTierAdvisor>>;

    /**
     * Gets a service tier advisor.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {string} serviceTierAdvisorName The name of service tier advisor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceTierAdvisor} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceTierAdvisor} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceTierAdvisor} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getServiceTierAdvisor(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceTierAdvisor>;
    getServiceTierAdvisor(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, callback: ServiceCallback<models.ServiceTierAdvisor>): void;
    getServiceTierAdvisor(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceTierAdvisor>): void;


    /**
     * Returns service tier advisors for specified database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceTierAdvisorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listServiceTierAdvisorsWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceTierAdvisorListResult>>;

    /**
     * Returns service tier advisors for specified database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceTierAdvisorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceTierAdvisorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceTierAdvisorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listServiceTierAdvisors(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceTierAdvisorListResult>;
    listServiceTierAdvisors(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.ServiceTierAdvisorListResult>): void;
    listServiceTierAdvisors(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceTierAdvisorListResult>): void;


    /**
     * Creates or updates a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which setting the
     * transparent data encryption applies.
     *
     * @param {object} parameters The required parameters for creating or updating
     * transparent data encryption.
     *
     * @param {string} [parameters.status] The status of the database transparent
     * data encryption. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransparentDataEncryption>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateTransparentDataEncryptionConfigurationWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransparentDataEncryption>>;

    /**
     * Creates or updates a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which setting the
     * transparent data encryption applies.
     *
     * @param {object} parameters The required parameters for creating or updating
     * transparent data encryption.
     *
     * @param {string} [parameters.status] The status of the database transparent
     * data encryption. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransparentDataEncryption} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransparentDataEncryption} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransparentDataEncryption} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateTransparentDataEncryptionConfiguration(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransparentDataEncryption>;
    createOrUpdateTransparentDataEncryptionConfiguration(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, callback: ServiceCallback<models.TransparentDataEncryption>): void;
    createOrUpdateTransparentDataEncryptionConfiguration(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransparentDataEncryption>): void;


    /**
     * Gets a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransparentDataEncryption>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTransparentDataEncryptionConfigurationWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransparentDataEncryption>>;

    /**
     * Gets a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransparentDataEncryption} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransparentDataEncryption} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransparentDataEncryption} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTransparentDataEncryptionConfiguration(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransparentDataEncryption>;
    getTransparentDataEncryptionConfiguration(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.TransparentDataEncryption>): void;
    getTransparentDataEncryptionConfiguration(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransparentDataEncryption>): void;


    /**
     * Returns a database's transparent data encryption operation result.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransparentDataEncryptionActivityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTransparentDataEncryptionActivityWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransparentDataEncryptionActivityListResult>>;

    /**
     * Returns a database's transparent data encryption operation result.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransparentDataEncryptionActivityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransparentDataEncryptionActivityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransparentDataEncryptionActivityListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTransparentDataEncryptionActivity(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransparentDataEncryptionActivityListResult>;
    listTransparentDataEncryptionActivity(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.TransparentDataEncryptionActivityListResult>): void;
    listTransparentDataEncryptionActivity(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransparentDataEncryptionActivityListResult>): void;


    /**
     * Gets a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getThreatDetectionPolicyWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseSecurityAlertPolicy>>;

    /**
     * Gets a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getThreatDetectionPolicy(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseSecurityAlertPolicy>;
    getThreatDetectionPolicy(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;
    getThreatDetectionPolicy(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;


    /**
     * Creates or updates a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} parameters The database Threat Detection policy.
     *
     * @param {string} [parameters.location] The geo-location where the resource
     * lives
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint and storageAccountAccessKey are required.
     * Possible values include: 'New', 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.disabledAlerts] Specifies the
     * semicolon-separated list of alerts that are disabled, or empty string to
     * disable no alerts. Possible values: Sql_Injection;
     * Sql_Injection_Vulnerability; Access_Anomaly; Usage_Anomaly.
     *
     * @param {string} [parameters.emailAddresses] Specifies the
     * semicolon-separated list of e-mail addresses to which the alert is sent.
     *
     * @param {string} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs. If state is Enabled,
     * storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account. If state is
     * Enabled, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {string} [parameters.useServerDefault] Specifies whether to use the
     * default server policy. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateThreatDetectionPolicyWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseSecurityAlertPolicy>>;

    /**
     * Creates or updates a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} parameters The database Threat Detection policy.
     *
     * @param {string} [parameters.location] The geo-location where the resource
     * lives
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint and storageAccountAccessKey are required.
     * Possible values include: 'New', 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.disabledAlerts] Specifies the
     * semicolon-separated list of alerts that are disabled, or empty string to
     * disable no alerts. Possible values: Sql_Injection;
     * Sql_Injection_Vulnerability; Access_Anomaly; Usage_Anomaly.
     *
     * @param {string} [parameters.emailAddresses] Specifies the
     * semicolon-separated list of e-mail addresses to which the alert is sent.
     *
     * @param {string} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs. If state is Enabled,
     * storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account. If state is
     * Enabled, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {string} [parameters.useServerDefault] Specifies whether to use the
     * default server policy. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateThreatDetectionPolicy(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseSecurityAlertPolicy>;
    createOrUpdateThreatDetectionPolicy(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;
    createOrUpdateThreatDetectionPolicy(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;


    /**
     * Gets a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * blob audit policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBlobAuditingPolicyWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseBlobAuditingPolicy>>;

    /**
     * Gets a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * blob audit policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBlobAuditingPolicy(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseBlobAuditingPolicy>;
    getBlobAuditingPolicy(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;
    getBlobAuditingPolicy(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;


    /**
     * Creates or updates a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * blob audit policy will be defined.
     *
     * @param {object} parameters The database blob auditing policy.
     *
     * @param {string} [parameters.location] The geo-location where the resource
     * lives
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint and storageAccountAccessKey are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled,
     * storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the Actions and
     * Actions-Groups to audit.
     *
     * @param {string} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage’s secondary key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateBlobAuditingPolicyWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseBlobAuditingPolicy>>;

    /**
     * Creates or updates a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * blob audit policy will be defined.
     *
     * @param {object} parameters The database blob auditing policy.
     *
     * @param {string} [parameters.location] The geo-location where the resource
     * lives
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint and storageAccountAccessKey are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled,
     * storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the Actions and
     * Actions-Groups to audit.
     *
     * @param {string} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage’s secondary key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateBlobAuditingPolicy(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseBlobAuditingPolicy>;
    createOrUpdateBlobAuditingPolicy(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;
    createOrUpdateBlobAuditingPolicy(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;


    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'Basic', 'S0',
     * 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'System',
     * 'System2', 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginImportMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'Basic', 'S0',
     * 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'System',
     * 'System2', 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginImportMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    beginImportMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    beginImportMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateImportOperationWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    beginCreateImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    beginCreateImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExportMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    beginExportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    beginExportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Failover the database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverReplicationLinkWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Failover the database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailoverReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginFailoverReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    beginFailoverReplicationLink(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Force failover the database replication link, which may result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverReplicationLinkAllowDataLossWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Force failover the database replication link, which may result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailoverReplicationLinkAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginFailoverReplicationLinkAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    beginFailoverReplicationLinkAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Pauses a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to pause.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPauseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Pauses a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to pause.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPause(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginPause(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    beginPause(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resumes a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to resume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResumeWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resumes a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the data warehouse to resume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResume(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResume(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    beginResume(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new database or updates an existing database. Location is a
     * required property in the request body, and it must be the same as the
     * location of the SQL server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be operated on
     * (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.collation] The collation of the database. If
     * createMode is not Default, this value is ignored.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or
     * nonreadable) secondary replica of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, NonReadableSecondary, OnlineSecondary and
     * RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
     * Possible values include: 'Copy', 'Default', 'NonReadableSecondary',
     * 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore',
     * 'RestoreLongTermRetentionBackup'
     *
     * @param {string} [parameters.sourceDatabaseId] Conditional. If createMode is
     * Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery,
     * or Restore, then this value is required. Specifies the resource ID of the
     * source database. If createMode is NonReadableSecondary or OnlineSecondary,
     * the name of the source database must be the same as the new database being
     * created.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Conditional. If
     * createMode is Restore and sourceDatabaseId is the deleted database's
     * original resource id when it existed (as opposed to its current restorable
     * dropped database id), then this value is required. Specifies the time that
     * the database was deleted.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. If createMode is Restore, this
     * value is optional. Specifies the point in time (ISO8601 format) of the
     * source database that will be restored to create the new database. Must be
     * greater than or equal to the source database's earliestRestoreDate value.
     *
     * @param {date} [parameters.recoveryServicesRecoveryPointResourceId]
     * Conditional. If createMode is RestoreLongTermRetentionBackup, then this
     * value is required. Specifies the resource ID of the recovery point to
     * restore from.
     *
     * @param {string} [parameters.edition] The edition of the database. The
     * DatabaseEditions enumeration contains all the valid editions. If createMode
     * is NonReadableSecondary or OnlineSecondary, this value is ignored. To see
     * possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'Free',
     * 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes. If createMode is not Default, this value is ignored. To
     * see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {uuid} [parameters.requestedServiceObjectiveId] The configured
     * service level objective ID of the database. This is the service level
     * objective that is in the process of being applied to the database. Once
     * successfully updated, it will match the value of currentServiceObjectiveId
     * property. If requestedServiceObjectiveId and requestedServiceObjectiveName
     * are both updated, the value of requestedServiceObjectiveId overrides the
     * value of requestedServiceObjectiveName. To see possible values, query the
     * capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {string} [parameters.requestedServiceObjectiveName] The name of the
     * configured service level objective of the database. This is the service
     * level objective that is in the process of being applied to the database.
     * Once successfully updated, it will match the value of serviceLevelObjective
     * property. To see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6',
     * 'P11', 'P15', 'System', 'System2', 'ElasticPool'
     *
     * @param {string} [parameters.elasticPoolName] The name of the elastic pool
     * the database is in. If elasticPoolName and requestedServiceObjectiveName are
     * both updated, the value of requestedServiceObjectiveName is ignored. Not
     * supported for DataWarehouse edition.
     *
     * @param {string} [parameters.readScale] Conditional. If the database is a
     * geo-secondary, readScale indicates whether read-only connections are allowed
     * to this database or not. Not supported for DataWarehouse edition. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.sampleName] Indicates the name of the sample
     * schema to apply when creating this database. If createMode is not Default,
     * this value is ignored. Not supported for DataWarehouse edition. Possible
     * values include: 'AdventureWorksLT'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Creates a new database or updates an existing database. Location is a
     * required property in the request body, and it must be the same as the
     * location of the SQL server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be operated on
     * (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.collation] The collation of the database. If
     * createMode is not Default, this value is ignored.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or
     * nonreadable) secondary replica of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, NonReadableSecondary, OnlineSecondary and
     * RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
     * Possible values include: 'Copy', 'Default', 'NonReadableSecondary',
     * 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore',
     * 'RestoreLongTermRetentionBackup'
     *
     * @param {string} [parameters.sourceDatabaseId] Conditional. If createMode is
     * Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery,
     * or Restore, then this value is required. Specifies the resource ID of the
     * source database. If createMode is NonReadableSecondary or OnlineSecondary,
     * the name of the source database must be the same as the new database being
     * created.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Conditional. If
     * createMode is Restore and sourceDatabaseId is the deleted database's
     * original resource id when it existed (as opposed to its current restorable
     * dropped database id), then this value is required. Specifies the time that
     * the database was deleted.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. If createMode is Restore, this
     * value is optional. Specifies the point in time (ISO8601 format) of the
     * source database that will be restored to create the new database. Must be
     * greater than or equal to the source database's earliestRestoreDate value.
     *
     * @param {date} [parameters.recoveryServicesRecoveryPointResourceId]
     * Conditional. If createMode is RestoreLongTermRetentionBackup, then this
     * value is required. Specifies the resource ID of the recovery point to
     * restore from.
     *
     * @param {string} [parameters.edition] The edition of the database. The
     * DatabaseEditions enumeration contains all the valid editions. If createMode
     * is NonReadableSecondary or OnlineSecondary, this value is ignored. To see
     * possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'Free',
     * 'Stretch', 'DataWarehouse', 'System', 'System2'
     *
     * @param {string} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes. If createMode is not Default, this value is ignored. To
     * see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {uuid} [parameters.requestedServiceObjectiveId] The configured
     * service level objective ID of the database. This is the service level
     * objective that is in the process of being applied to the database. Once
     * successfully updated, it will match the value of currentServiceObjectiveId
     * property. If requestedServiceObjectiveId and requestedServiceObjectiveName
     * are both updated, the value of requestedServiceObjectiveId overrides the
     * value of requestedServiceObjectiveName. To see possible values, query the
     * capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation."
     *
     * @param {string} [parameters.requestedServiceObjectiveName] The name of the
     * configured service level objective of the database. This is the service
     * level objective that is in the process of being applied to the database.
     * Once successfully updated, it will match the value of serviceLevelObjective
     * property. To see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
     * referred to by operationId: "Capabilities_ListByLocation.". Possible values
     * include: 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6',
     * 'P11', 'P15', 'System', 'System2', 'ElasticPool'
     *
     * @param {string} [parameters.elasticPoolName] The name of the elastic pool
     * the database is in. If elasticPoolName and requestedServiceObjectiveName are
     * both updated, the value of requestedServiceObjectiveName is ignored. Not
     * supported for DataWarehouse edition.
     *
     * @param {string} [parameters.readScale] Conditional. If the database is a
     * geo-secondary, readScale indicates whether read-only connections are allowed
     * to this database or not. Not supported for DataWarehouse edition. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.sampleName] Indicates the name of the sample
     * schema to apply when creating this database. If createMode is not Default,
     * this value is ignored. Not supported for DataWarehouse edition. Possible
     * values include: 'AdventureWorksLT'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, callback: ServiceCallback<models.Database>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;
}

/**
 * @class
 * Servers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Servers {


    /**
     * Returns a list of servers.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * Returns a list of servers.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    list(callback: ServiceCallback<models.ServerListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;


    /**
     * Creates or updates a new server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a server.
     *
     * @param {string} [parameters.version] The version of the server. Possible
     * values include: '2.0', '12.0'
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Can only be specified when the server is being created (and is
     * required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Creates or updates a new server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a server.
     *
     * @param {string} [parameters.version] The version of the server. Possible
     * values include: '2.0', '12.0'
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Can only be specified when the server is being created (and is
     * required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, callback: ServiceCallback<models.Server>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Deletes a SQL server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a SQL server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Gets a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.Server>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Returns a list of servers in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * Returns a list of servers in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ServerListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;


    /**
     * Returns server usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerMetricListResult>>;

    /**
     * Returns server usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerMetricListResult>;
    listUsages(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerMetricListResult>): void;
    listUsages(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerMetricListResult>): void;


    /**
     * Gets a database service objective.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} serviceObjectiveName The name of the service objective to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceObjective>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getServiceObjectiveWithHttpOperationResponse(resourceGroupName: string, serverName: string, serviceObjectiveName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceObjective>>;

    /**
     * Gets a database service objective.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} serviceObjectiveName The name of the service objective to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceObjective} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceObjective} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceObjective} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getServiceObjective(resourceGroupName: string, serverName: string, serviceObjectiveName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceObjective>;
    getServiceObjective(resourceGroupName: string, serverName: string, serviceObjectiveName: string, callback: ServiceCallback<models.ServiceObjective>): void;
    getServiceObjective(resourceGroupName: string, serverName: string, serviceObjectiveName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceObjective>): void;


    /**
     * Returns database service objectives.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceObjectiveListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listServiceObjectivesWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceObjectiveListResult>>;

    /**
     * Returns database service objectives.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceObjectiveListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceObjectiveListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceObjectiveListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listServiceObjectives(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceObjectiveListResult>;
    listServiceObjectives(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServiceObjectiveListResult>): void;
    listServiceObjectives(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceObjectiveListResult>): void;
}

/**
 * @class
 * ElasticPools
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ElasticPools {


    /**
     * Creates a new elastic pool or updates an existing elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be operated
     * on (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * an elastic pool.
     *
     * @param {string} [parameters.edition] The edition of the elastic pool.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.dtu] The total shared DTU for the database
     * elastic pool.
     *
     * @param {number} [parameters.databaseDtuMax] The maximum DTU any one database
     * can consume.
     *
     * @param {number} [parameters.databaseDtuMin] The minimum DTU all databases
     * are guaranteed.
     *
     * @param {number} [parameters.storageMB] Gets storage limit for the database
     * elastic pool in MB.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Creates a new elastic pool or updates an existing elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be operated
     * on (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * an elastic pool.
     *
     * @param {string} [parameters.edition] The edition of the elastic pool.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.dtu] The total shared DTU for the database
     * elastic pool.
     *
     * @param {number} [parameters.databaseDtuMax] The maximum DTU any one database
     * can consume.
     *
     * @param {number} [parameters.databaseDtuMin] The minimum DTU all databases
     * are guaranteed.
     *
     * @param {number} [parameters.storageMB] Gets storage limit for the database
     * elastic pool in MB.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    createOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, callback: ServiceCallback<models.ElasticPool>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;


    /**
     * Deletes the elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Gets an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    get(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.ElasticPool>): void;
    get(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;


    /**
     * Returns a list of elastic pools in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolListResult>>;

    /**
     * Returns a list of elastic pools in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ElasticPoolListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolListResult>): void;


    /**
     * Returns elastic pool activities.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool for which to
     * get the current activity.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolActivityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listActivityWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolActivityListResult>>;

    /**
     * Returns elastic pool activities.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool for which to
     * get the current activity.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolActivityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolActivityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolActivityListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listActivity(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolActivityListResult>;
    listActivity(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.ElasticPoolActivityListResult>): void;
    listActivity(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolActivityListResult>): void;


    /**
     * Returns activity on databases inside of an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolDatabaseActivityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDatabaseActivityWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolDatabaseActivityListResult>>;

    /**
     * Returns activity on databases inside of an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolDatabaseActivityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolDatabaseActivityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolDatabaseActivityListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDatabaseActivity(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolDatabaseActivityListResult>;
    listDatabaseActivity(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.ElasticPoolDatabaseActivityListResult>): void;
    listDatabaseActivity(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolDatabaseActivityListResult>): void;


    /**
     * Gets a database inside of an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be
     * retrieved.
     *
     * @param {string} databaseName The name of the database to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Gets a database inside of an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be
     * retrieved.
     *
     * @param {string} databaseName The name of the database to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatabase(resourceGroupName: string, serverName: string, elasticPoolName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    getDatabase(resourceGroupName: string, serverName: string, elasticPoolName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    getDatabase(resourceGroupName: string, serverName: string, elasticPoolName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Returns a list of databases in an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDatabasesWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * Returns a list of databases in an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDatabases(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listDatabases(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listDatabases(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;


    /**
     * Creates a new elastic pool or updates an existing elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be operated
     * on (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * an elastic pool.
     *
     * @param {string} [parameters.edition] The edition of the elastic pool.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.dtu] The total shared DTU for the database
     * elastic pool.
     *
     * @param {number} [parameters.databaseDtuMax] The maximum DTU any one database
     * can consume.
     *
     * @param {number} [parameters.databaseDtuMin] The minimum DTU all databases
     * are guaranteed.
     *
     * @param {number} [parameters.storageMB] Gets storage limit for the database
     * elastic pool in MB.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Creates a new elastic pool or updates an existing elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool to be operated
     * on (updated or created).
     *
     * @param {object} parameters The required parameters for creating or updating
     * an elastic pool.
     *
     * @param {string} [parameters.edition] The edition of the elastic pool.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.dtu] The total shared DTU for the database
     * elastic pool.
     *
     * @param {number} [parameters.databaseDtuMax] The maximum DTU any one database
     * can consume.
     *
     * @param {number} [parameters.databaseDtuMin] The minimum DTU all databases
     * are guaranteed.
     *
     * @param {number} [parameters.storageMB] Gets storage limit for the database
     * elastic pool in MB.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, callback: ServiceCallback<models.ElasticPool>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;
}

/**
 * @class
 * RecommendedElasticPools
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface RecommendedElasticPools {


    /**
     * Gets a recommented elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendedElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendedElasticPool>>;

    /**
     * Gets a recommented elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendedElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendedElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendedElasticPool} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendedElasticPool>;
    get(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, callback: ServiceCallback<models.RecommendedElasticPool>): void;
    get(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendedElasticPool>): void;


    /**
     * Gets a database inside of a recommented elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the elastic pool to
     * be retrieved.
     *
     * @param {string} databaseName The name of the database to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatabasesWithHttpOperationResponse(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Gets a database inside of a recommented elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the elastic pool to
     * be retrieved.
     *
     * @param {string} databaseName The name of the database to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatabases(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    getDatabases(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    getDatabases(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Returns recommended elastic pools.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendedElasticPoolListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendedElasticPoolListResult>>;

    /**
     * Returns recommended elastic pools.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendedElasticPoolListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendedElasticPoolListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendedElasticPoolListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendedElasticPoolListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.RecommendedElasticPoolListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendedElasticPoolListResult>): void;


    /**
     * Returns a list of databases inside a recommented elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDatabasesWithHttpOperationResponse(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * Returns a list of databases inside a recommented elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDatabases(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listDatabases(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listDatabases(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;


    /**
     * Returns a recommented elastic pool metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendedElasticPoolListMetricsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendedElasticPoolListMetricsResult>>;

    /**
     * Returns a recommented elastic pool metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendedElasticPoolListMetricsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendedElasticPoolListMetricsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendedElasticPoolListMetricsResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendedElasticPoolListMetricsResult>;
    listMetrics(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, callback: ServiceCallback<models.RecommendedElasticPoolListMetricsResult>): void;
    listMetrics(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendedElasticPoolListMetricsResult>): void;
}
