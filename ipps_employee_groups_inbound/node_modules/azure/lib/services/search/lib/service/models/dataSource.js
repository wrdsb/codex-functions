/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the DataSource class.
 * @constructor
 * Represents a datasource definition in Azure Search, which can be used to
 * configure an indexer.
 *
 * @member {string} name The name of the datasource.
 *
 * @member {string} [description] The description of the datasource.
 *
 * @member {object} type The type of the datasource.
 *
 * @member {string} [type.name]
 *
 * @member {object} credentials Credentials for the datasource.
 *
 * @member {string} [credentials.connectionString] The connection string for
 * the datasource.
 *
 * @member {object} container The data container for the datasource.
 *
 * @member {string} [container.name] The name of the table or view (for Azure
 * SQL data source) or collection (for DocumentDB data source) that will be
 * indexed.
 *
 * @member {string} [container.query] A query that is applied to this data
 * container. The syntax and meaning of this parameter is datasource-specific.
 * Not supported by Azure SQL datasources.
 *
 * @member {object} [dataChangeDetectionPolicy] The data change detection
 * policy for the datasource.
 *
 * @member {string} [dataChangeDetectionPolicy.odatatype] Polymorphic
 * Discriminator
 *
 * @member {object} [dataDeletionDetectionPolicy] The data deletion detection
 * policy for the datasource.
 *
 * @member {string} [dataDeletionDetectionPolicy.odatatype] Polymorphic
 * Discriminator
 *
 * @member {string} [eTag] The ETag of the DataSource.
 *
 */
class DataSource {
  constructor() {
  }

  /**
   * Defines the metadata of DataSource
   *
   * @returns {object} metadata of DataSource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataSource',
      type: {
        name: 'Composite',
        className: 'DataSource',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'Composite',
              className: 'DataSourceType'
            }
          },
          credentials: {
            required: true,
            serializedName: 'credentials',
            type: {
              name: 'Composite',
              className: 'DataSourceCredentials'
            }
          },
          container: {
            required: true,
            serializedName: 'container',
            type: {
              name: 'Composite',
              className: 'DataContainer'
            }
          },
          dataChangeDetectionPolicy: {
            required: false,
            serializedName: 'dataChangeDetectionPolicy',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '@odata.type',
                clientName: 'odatatype'
              },
              uberParent: 'DataChangeDetectionPolicy',
              className: 'DataChangeDetectionPolicy'
            }
          },
          dataDeletionDetectionPolicy: {
            required: false,
            serializedName: 'dataDeletionDetectionPolicy',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '@odata.type',
                clientName: 'odatatype'
              },
              uberParent: 'DataDeletionDetectionPolicy',
              className: 'DataDeletionDetectionPolicy'
            }
          },
          eTag: {
            required: false,
            serializedName: '@odata\\.etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DataSource;
