/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the NodeTypeDescription class.
 * @constructor
 * NodeType description
 *
 * @member {string} [name] NodeType description name
 *
 * @member {object} [placementProperties] Placement properties key
 *
 * @member {object} [capacities] Capacities key
 *
 * @member {number} [clientConnectionEndpointPort] Client connection endpoint
 * port
 *
 * @member {number} [httpGatewayEndpointPort] Http gateway endpoint port
 *
 * @member {string} [durabilityLevel] Nodetype durability Level. Possible
 * values include: 'Bronze', 'Silver', 'Gold', 'Platimun'
 *
 * @member {object} [applicationPorts] Application ports
 *
 * @member {number} [applicationPorts.startPort] Endpoint start port
 *
 * @member {number} [applicationPorts.endPort] Endpoint end port
 *
 * @member {object} [ephemeralPorts] Ephemeral ports
 *
 * @member {number} [ephemeralPorts.startPort] Endpoint start port
 *
 * @member {number} [ephemeralPorts.endPort] Endpoint end port
 *
 * @member {boolean} [isPrimary] Primary node or not
 *
 * @member {number} [vmInstanceCount] Instance count
 *
 * @member {number} [reverseProxyEndpointPort] Reverse proxy endpoint port
 *
 */
class NodeTypeDescription {
  constructor() {
  }

  /**
   * Defines the metadata of NodeTypeDescription
   *
   * @returns {object} metadata of NodeTypeDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeTypeDescription',
      type: {
        name: 'Composite',
        className: 'NodeTypeDescription',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          placementProperties: {
            required: false,
            serializedName: 'placementProperties',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          capacities: {
            required: false,
            serializedName: 'capacities',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          clientConnectionEndpointPort: {
            required: false,
            serializedName: 'clientConnectionEndpointPort',
            type: {
              name: 'Number'
            }
          },
          httpGatewayEndpointPort: {
            required: false,
            serializedName: 'httpGatewayEndpointPort',
            type: {
              name: 'Number'
            }
          },
          durabilityLevel: {
            required: false,
            serializedName: 'durabilityLevel',
            type: {
              name: 'String'
            }
          },
          applicationPorts: {
            required: false,
            serializedName: 'applicationPorts',
            type: {
              name: 'Composite',
              className: 'EndpointRangeDescription'
            }
          },
          ephemeralPorts: {
            required: false,
            serializedName: 'ephemeralPorts',
            type: {
              name: 'Composite',
              className: 'EndpointRangeDescription'
            }
          },
          isPrimary: {
            required: false,
            serializedName: 'isPrimary',
            type: {
              name: 'Boolean'
            }
          },
          vmInstanceCount: {
            required: false,
            serializedName: 'vmInstanceCount',
            type: {
              name: 'Number'
            }
          },
          reverseProxyEndpointPort: {
            required: false,
            serializedName: 'reverseProxyEndpointPort',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = NodeTypeDescription;
