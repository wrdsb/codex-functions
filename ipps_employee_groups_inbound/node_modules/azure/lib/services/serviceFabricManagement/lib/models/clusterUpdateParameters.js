/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ClusterUpdateParameters class.
 * @constructor
 * Cluster update request
 *
 * @member {string} [reliabilityLevel] Cluster reliability level. Possible
 * values include: 'Invalid', 'Bronze', 'Silver', 'Gold', 'Platinum'
 *
 * @member {string} [upgradeMode] Cluster upgrade mode. Possible values
 * include: 'Default', 'Automatic', 'Manual'
 *
 * @member {string} [clusterCodeVersion] The ServiceFabric code version, if set
 * it, please make sure you have set upgradeMode to Manual, otherwise ,it will
 * fail
 *
 * @member {object} [certificate] The cluster certificate settings, the new
 * certificate should exist in Vmss or KeyVault,before you add it, it will
 * override original value
 *
 * @member {string} [certificate.thumbprint] Primary certificate thumbprint
 *
 * @member {string} [certificate.thumbprintSecondary] Secondary certificate
 * thumbprint
 *
 * @member {string} [certificate.x509StoreName] Certificate x509 store
 * location. Possible values include: 'AddressBook', 'AuthRoot',
 * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
 * 'TrustedPublisher'
 *
 * @member {array} [clientCertificateThumbprints] The cluster client
 * thumbprints, it will override existing collection
 *
 * @member {array} [fabricSettings] The new fabric settings for the cluster, Be
 * noted, it will overwrite existing collection
 *
 * @member {object} [reverseProxyCertificate] Certificate for the reverse proxy
 *
 * @member {string} [reverseProxyCertificate.thumbprint] Primary certificate
 * thumbprint
 *
 * @member {string} [reverseProxyCertificate.thumbprintSecondary] Secondary
 * certificate thumbprint
 *
 * @member {string} [reverseProxyCertificate.x509StoreName] Certificate x509
 * store location. Possible values include: 'AddressBook', 'AuthRoot',
 * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
 * 'TrustedPublisher'
 *
 * @member {array} [nodeTypes] The settings for NodeTypes, it will override
 *
 * @member {object} [tags] Cluster update parameters
 *
 */
class ClusterUpdateParameters {
  constructor() {
  }

  /**
   * Defines the metadata of ClusterUpdateParameters
   *
   * @returns {object} metadata of ClusterUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterUpdateParameters',
      type: {
        name: 'Composite',
        className: 'ClusterUpdateParameters',
        modelProperties: {
          reliabilityLevel: {
            required: false,
            serializedName: 'properties.reliabilityLevel',
            type: {
              name: 'String'
            }
          },
          upgradeMode: {
            required: false,
            serializedName: 'properties.upgradeMode',
            type: {
              name: 'String'
            }
          },
          clusterCodeVersion: {
            required: false,
            serializedName: 'properties.clusterCodeVersion',
            type: {
              name: 'String'
            }
          },
          certificate: {
            required: false,
            serializedName: 'properties.certificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          clientCertificateThumbprints: {
            required: false,
            serializedName: 'properties.clientCertificateThumbprints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientCertificateThumbprintElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientCertificateThumbprint'
                  }
              }
            }
          },
          fabricSettings: {
            required: false,
            serializedName: 'properties.fabricSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SettingsSectionDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'SettingsSectionDescription'
                  }
              }
            }
          },
          reverseProxyCertificate: {
            required: false,
            serializedName: 'properties.reverseProxyCertificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          nodeTypes: {
            required: false,
            serializedName: 'properties.nodeTypes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeTypeDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeTypeDescription'
                  }
              }
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterUpdateParameters;
