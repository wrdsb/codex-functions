/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the AnalyzeRequest class.
 * @constructor
 * Specifies some text and analysis components used to break that text into
 * tokens.
 *
 * @member {string} text The text to break into tokens.
 *
 * @member {object} [analyzer] The name of the analyzer to use to break the
 * given text. If this parameter is not specified, you must specify a tokenizer
 * instead. The tokenizer and analyzer parameters are mutually exclusive.
 *
 * @member {string} [analyzer.name]
 *
 * @member {object} [tokenizer] The name of the tokenizer to use to break the
 * given text. If this parameter is not specified, you must specify an analyzer
 * instead. The tokenizer and analyzer parameters are mutually exclusive.
 *
 * @member {string} [tokenizer.name]
 *
 * @member {array} [tokenFilters] An optional list of token filters to use when
 * breaking the given text. This parameter can only be set when using the
 * tokenizer parameter.
 *
 * @member {array} [charFilters] An optional list of character filters to use
 * when breaking the given text. This parameter can only be set when using the
 * tokenizer parameter.
 *
 */
class AnalyzeRequest {
  constructor() {
  }

  /**
   * Defines the metadata of AnalyzeRequest
   *
   * @returns {object} metadata of AnalyzeRequest
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AnalyzeRequest',
      type: {
        name: 'Composite',
        className: 'AnalyzeRequest',
        modelProperties: {
          text: {
            required: true,
            serializedName: 'text',
            type: {
              name: 'String'
            }
          },
          analyzer: {
            required: false,
            serializedName: 'analyzer',
            type: {
              name: 'Composite',
              className: 'AnalyzerName'
            }
          },
          tokenizer: {
            required: false,
            serializedName: 'tokenizer',
            type: {
              name: 'Composite',
              className: 'TokenizerName'
            }
          },
          tokenFilters: {
            required: false,
            serializedName: 'tokenFilters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TokenFilterNameElementType',
                  type: {
                    name: 'Composite',
                    className: 'TokenFilterName'
                  }
              }
            }
          },
          charFilters: {
            required: false,
            serializedName: 'charFilters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CharFilterNameElementType',
                  type: {
                    name: 'Composite',
                    className: 'CharFilterName'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = AnalyzeRequest;
