/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the MaxSizeCapability class.
 * @constructor
 * The maximum size limits for a database.
 *
 * @member {number} [limit] The maximum size of the database (see 'unit' for
 * the units).
 *
 * @member {string} [unit] The units that the limit is expressed in. Possible
 * values include: 'Megabytes', 'Gigabytes', 'Terabytes', 'Petabytes'
 *
 * @member {string} [status] The status of the maximum size capability.
 * Possible values include: 'Visible', 'Available', 'Default', 'Disabled'
 *
 */
class MaxSizeCapability {
  constructor() {
  }

  /**
   * Defines the metadata of MaxSizeCapability
   *
   * @returns {object} metadata of MaxSizeCapability
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MaxSizeCapability',
      type: {
        name: 'Composite',
        className: 'MaxSizeCapability',
        modelProperties: {
          limit: {
            required: false,
            readOnly: true,
            serializedName: 'limit',
            type: {
              name: 'Number'
            }
          },
          unit: {
            required: false,
            readOnly: true,
            serializedName: 'unit',
            type: {
              name: 'Enum',
              allowedValues: [ 'Megabytes', 'Gigabytes', 'Terabytes', 'Petabytes' ]
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'Enum',
              allowedValues: [ 'Visible', 'Available', 'Default', 'Disabled' ]
            }
          }
        }
      }
    };
  }
}

module.exports = MaxSizeCapability;
